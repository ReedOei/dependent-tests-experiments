org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r41 = new com.google.gson.JsonParser >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r41.<com.google.gson.JsonParser: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r41.<com.google.gson.JsonParser: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r42 = virtualinvoke $r41.<com.google.gson.JsonParser: com.google.gson.JsonElement parse(java.lang.String)>("[\n   {\n      \"repositories\":[\n         {\n            \"Repositories/base_url\":\"http://s3.amazonaws.com/dev.hortonworks.com/HDP/centos5/2.x/updates/2.2.0.0\",\n            \"Repositories/repo_name\":\"HDP-UTILS\",\n            \"Repositories/repo_id\":\"HDP-UTILS-1.1.0.20\"\n         },\n         {\n            \"Repositories/base_url\":\"http://s3.amazonaws.com/dev.hortonworks.com/HDP/centos5/2.x/updates/2.2.0.0\",\n            \"Repositories/repo_name\":\"HDP\",\n            \"Repositories/repo_id\":\"HDP-2.2\"\n         }\n      ],\n      \"OperatingSystems/os_type\":\"redhat6\"\n   }\n]")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r42 = virtualinvoke $r41.<com.google.gson.JsonParser: com.google.gson.JsonElement parse(java.lang.String)>("[\n   {\n      \"repositories\":[\n         {\n            \"Repositories/base_url\":\"http://s3.amazonaws.com/dev.hortonworks.com/HDP/centos5/2.x/updates/2.2.0.0\",\n            \"Repositories/repo_name\":\"HDP-UTILS\",\n            \"Repositories/repo_id\":\"HDP-UTILS-1.1.0.20\"\n         },\n         {\n            \"Repositories/base_url\":\"http://s3.amazonaws.com/dev.hortonworks.com/HDP/centos5/2.x/updates/2.2.0.0\",\n            \"Repositories/repo_name\":\"HDP\",\n            \"Repositories/repo_id\":\"HDP-2.2\"\n         }\n      ],\n      \"OperatingSystems/os_type\":\"redhat6\"\n   }\n]") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r2 = virtualinvoke $r42.<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r2 = virtualinvoke $r42.<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r43 = virtualinvoke r2.<com.google.gson.JsonArray: com.google.gson.JsonElement get(int)>(0)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r43 = virtualinvoke r2.<com.google.gson.JsonArray: com.google.gson.JsonElement get(int)>(0) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r3 = virtualinvoke $r43.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r3 = virtualinvoke $r43.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r3.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Boolean)>("OperatingSystems/ambari_managed_repositories", $r44)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r3.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Boolean)>("OperatingSystems/ambari_managed_repositories", $r44) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r4 = virtualinvoke r2.<com.google.gson.JsonArray: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r4 = virtualinvoke r2.<com.google.gson.JsonArray: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r45 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r45 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r5 = (org.apache.ambari.server.state.Cluster) $r45
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r5 = (org.apache.ambari.server.state.Cluster) $r45 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r46 = new org.apache.ambari.server.state.StackId
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r46 = new org.apache.ambari.server.state.StackId >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r46.<org.apache.ambari.server.state.StackId: void <init>(java.lang.String,java.lang.String)>("HDP", "2.0.1")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r46.<org.apache.ambari.server.state.StackId: void <init>(java.lang.String,java.lang.String)>("HDP", "2.0.1") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r47 = new java.io.File
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r47 = new java.io.File >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>("src/test/resources/hbase_version_test.xml")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>("src/test/resources/hbase_version_test.xml") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r48 = new org.apache.ambari.server.orm.entities.StackEntity
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r48 = new org.apache.ambari.server.orm.entities.StackEntity >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r48.<org.apache.ambari.server.orm.entities.StackEntity: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r48.<org.apache.ambari.server.orm.entities.StackEntity: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r48.<org.apache.ambari.server.orm.entities.StackEntity: void setStackName(java.lang.String)>("HDP")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r48.<org.apache.ambari.server.orm.entities.StackEntity: void setStackName(java.lang.String)>("HDP") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r48.<org.apache.ambari.server.orm.entities.StackEntity: void setStackVersion(java.lang.String)>("2.1.1")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r48.<org.apache.ambari.server.orm.entities.StackEntity: void setStackVersion(java.lang.String)>("2.1.1") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r49 = new org.apache.ambari.server.orm.entities.RepositoryVersionEntity
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r49 = new org.apache.ambari.server.orm.entities.RepositoryVersionEntity >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r50 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r50 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setId(java.lang.Long)>($r50)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setId(java.lang.Long)>($r50) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setOperatingSystems(java.lang.String)>(r4)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setOperatingSystems(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r51 = new java.io.FileInputStream
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r51 = new java.io.FileInputStream >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r51.<java.io.FileInputStream: void <init>(java.io.File)>($r47)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r51.<java.io.FileInputStream: void <init>(java.io.File)>($r47) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r52 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)>($r51)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r52 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)>($r51) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setVersionXml(java.lang.String)>($r52)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setVersionXml(java.lang.String)>($r52) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setVersionXsd(java.lang.String)>("version_definition.xsd")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setVersionXsd(java.lang.String)>("version_definition.xsd") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r53 = <org.apache.ambari.server.state.RepositoryType: org.apache.ambari.server.state.RepositoryType STANDARD>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r53 = <org.apache.ambari.server.state.RepositoryType: org.apache.ambari.server.state.RepositoryType STANDARD> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setType(org.apache.ambari.server.state.RepositoryType)>($r53)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setType(org.apache.ambari.server.state.RepositoryType)>($r53) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setStack(org.apache.ambari.server.orm.entities.StackEntity)>($r48)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r49.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setStack(org.apache.ambari.server.orm.entities.StackEntity)>($r48) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r54 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r54 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r55 = virtualinvoke $r54.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ComponentInfo getComponent(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("HDP", "2.1.1", "HBASE", "HBASE_MASTER")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r55 = virtualinvoke $r54.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ComponentInfo getComponent(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("HDP", "2.1.1", "HBASE", "HBASE_MASTER") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r55.<org.apache.ambari.server.state.ComponentInfo: void setVersionAdvertised(boolean)>(1)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r55.<org.apache.ambari.server.state.ComponentInfo: void setVersionAdvertised(boolean)>(1) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r56 = new java.util.ArrayList
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r56 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r56.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r56.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r57 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r57 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r57.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r57.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i10 = 0
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i10 = 0 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if i10 >= 10
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if i10 >= 10 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r308 = new java.lang.StringBuilder
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if i10 >= 10 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r58 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Service;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r58 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Service;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r334 = (org.apache.ambari.server.state.Service) $r58
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r334 = (org.apache.ambari.server.state.Service) $r58 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r59 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Service;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r59 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Service;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r335 = (org.apache.ambari.server.state.Service) $r59
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r335 = (org.apache.ambari.server.state.Service) $r59 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r60 = interfaceinvoke r334.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r60 = interfaceinvoke r334.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r61 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r60)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r61 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r60) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r62 = interfaceinvoke $r61.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r62 = interfaceinvoke $r61.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r62.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r62.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r64 = interfaceinvoke r335.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r64 = interfaceinvoke r335.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r65 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r64)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r65 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r64) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r66 = interfaceinvoke $r65.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r66 = interfaceinvoke $r65.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r66.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r66.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r68 = interfaceinvoke r334.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r68 = interfaceinvoke r334.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r69 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r68)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r69 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r68) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r70 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r70 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r70.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r70.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r69.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r70)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r69.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r70) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r72 = interfaceinvoke r335.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r72 = interfaceinvoke r335.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r73 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r72)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r73 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r72) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r74 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r74 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r74.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r74.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r73.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r74)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r73.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r74) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r76 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r76 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r76.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r76.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HDFS", r334)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HDFS", r334) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HBASE", r335)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HBASE", r335) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r79 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r79 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r13 = (org.apache.ambari.server.state.ServiceComponentHost) $r79
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r13 = (org.apache.ambari.server.state.ServiceComponentHost) $r79 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r80 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r80 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r81 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r80)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r81 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r80) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r82 = interfaceinvoke $r81.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r82 = interfaceinvoke $r81.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r82.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r82.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r84 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r84 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r85 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r84)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r85 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r84) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r86 = interfaceinvoke $r85.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("DATANODE")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r86 = interfaceinvoke $r85.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("DATANODE") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r86.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r86.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r88 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r88 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r14 = (org.apache.ambari.server.state.ServiceComponentHost) $r88
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r14 = (org.apache.ambari.server.state.ServiceComponentHost) $r88 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r89 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r89 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r90 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r89)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r90 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r89) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r91 = interfaceinvoke $r90.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r91 = interfaceinvoke $r90.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r91.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r91.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r93 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r93 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r94 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r93)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r94 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r93) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r95 = interfaceinvoke $r94.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("NAMENODE")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r95 = interfaceinvoke $r94.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("NAMENODE") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r95.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r95.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r97 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r97 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r15 = (org.apache.ambari.server.state.ServiceComponentHost) $r97
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r15 = (org.apache.ambari.server.state.ServiceComponentHost) $r97 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r98 = interfaceinvoke r15.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r98 = interfaceinvoke r15.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r99 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r98)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r99 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r98) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r100 = interfaceinvoke $r99.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r100 = interfaceinvoke $r99.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r100.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r100.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r102 = interfaceinvoke r15.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r102 = interfaceinvoke r15.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r103 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r102)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r103 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r102) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r104 = interfaceinvoke $r103.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE_MASTER")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r104 = interfaceinvoke $r103.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE_MASTER") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r104.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r104.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r106 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[2]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r106 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[2] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r106[0] = r13
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r106[0] = r13 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r106[1] = r14
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r106[1] = r14 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r106)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r106) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r107 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r107 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r107[0] = r13
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r107[0] = r13 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r107)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r107) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r108 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r108 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r108[0] = r15
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r108[0] = r15 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r108)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r108) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r109 = new org.apache.ambari.server.state.ServiceOsSpecific$Package
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r109 = new org.apache.ambari.server.state.ServiceOsSpecific$Package >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r109.<org.apache.ambari.server.state.ServiceOsSpecific$Package: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r109.<org.apache.ambari.server.state.ServiceOsSpecific$Package: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r109.<org.apache.ambari.server.state.ServiceOsSpecific$Package: void setName(java.lang.String)>("hdfs")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r109.<org.apache.ambari.server.state.ServiceOsSpecific$Package: void setName(java.lang.String)>("hdfs") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r20 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r109)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r20 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r109) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r110 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/actionmanager/ActionManager;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r110 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/actionmanager/ActionManager;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r21 = (org.apache.ambari.server.actionmanager.ActionManager) $r110
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r21 = (org.apache.ambari.server.actionmanager.ActionManager) $r110 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r111 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/RequestStatusResponse;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r111 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/RequestStatusResponse;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r22 = (org.apache.ambari.server.controller.RequestStatusResponse) $r111
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r22 = (org.apache.ambari.server.controller.RequestStatusResponse) $r111 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r112 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/spi/ResourceProvider;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r112 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/spi/ResourceProvider;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r23 = (org.apache.ambari.server.controller.spi.ResourceProvider) $r112
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r23 = (org.apache.ambari.server.controller.spi.ResourceProvider) $r112 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r113 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r113 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r113.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r113.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r114 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.ConfigHelper configHelper>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r114 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.ConfigHelper configHelper> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r115 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/cluster/ClusterImpl;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r115 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/cluster/ClusterImpl;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r116 = (org.apache.ambari.server.state.Cluster) $r115
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r116 = (org.apache.ambari.server.state.Cluster) $r115 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r117 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r117 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r118 = (java.lang.String) $r117
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r118 = (java.lang.String) $r117 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r119 = virtualinvoke $r114.<org.apache.ambari.server.state.ConfigHelper: java.util.Map getEffectiveDesiredTags(org.apache.ambari.server.state.Cluster,java.lang.String)>($r116, $r118)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r119 = virtualinvoke $r114.<org.apache.ambari.server.state.ConfigHelper: java.util.Map getEffectiveDesiredTags(org.apache.ambari.server.state.Cluster,java.lang.String)>($r116, $r118) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r120 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r119)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r120 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r119) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r120.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r113)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r120.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r113) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r122 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r122 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r123 = interfaceinvoke $r122.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r123 = interfaceinvoke $r122.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r124 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r123)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r124 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r123) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r125 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r125 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r126 = interfaceinvoke $r124.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r125)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r126 = interfaceinvoke $r124.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r125) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r126.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r126.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r128 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r128 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r129 = interfaceinvoke $r128.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r129 = interfaceinvoke $r128.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r130 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r129)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r130 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r129) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r131 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r131 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r132 = interfaceinvoke $r130.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r131)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r132 = interfaceinvoke $r130.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r131) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r132.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r132.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r134 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r134 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r135 = interfaceinvoke $r134.<org.apache.ambari.server.controller.AmbariManagementController: java.lang.String getAuthName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r135 = interfaceinvoke $r134.<org.apache.ambari.server.controller.AmbariManagementController: java.lang.String getAuthName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r136 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r135)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r136 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r135) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r137 = interfaceinvoke $r136.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("admin")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r137 = interfaceinvoke $r136.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("admin") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r137.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r137.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r139 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r139 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r140 = interfaceinvoke $r139.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.actionmanager.ActionManager getActionManager()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r140 = interfaceinvoke $r139.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.actionmanager.ActionManager getActionManager()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r141 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r140)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r141 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r140) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r142 = interfaceinvoke $r141.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r21)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r142 = interfaceinvoke $r141.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r21) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r142.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r142.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r144 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r144 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r145 = interfaceinvoke $r144.<org.apache.ambari.server.controller.AmbariManagementController: java.lang.String getJdkResourceUrl()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r145 = interfaceinvoke $r144.<org.apache.ambari.server.controller.AmbariManagementController: java.lang.String getJdkResourceUrl()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r146 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r145)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r146 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r145) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r147 = interfaceinvoke $r146.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("/JdkResourceUrl")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r147 = interfaceinvoke $r146.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("/JdkResourceUrl") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r147.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r147.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r149 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r149 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r150 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceInfo;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r150 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceInfo;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r151 = (org.apache.ambari.server.state.ServiceInfo) $r150
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r151 = (org.apache.ambari.server.state.ServiceInfo) $r150 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r152 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r152 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r153 = (java.util.Map) $r152
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r153 = (java.util.Map) $r152 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r154 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r154 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r155 = (java.lang.String) $r154
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r155 = (java.lang.String) $r154 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r156 = interfaceinvoke $r149.<org.apache.ambari.server.controller.AmbariManagementController: java.util.List getPackagesForServiceHost(org.apache.ambari.server.state.ServiceInfo,java.util.Map,java.lang.String)>($r151, $r153, $r155)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r156 = interfaceinvoke $r149.<org.apache.ambari.server.controller.AmbariManagementController: java.util.List getPackagesForServiceHost(org.apache.ambari.server.state.ServiceInfo,java.util.Map,java.lang.String)>($r151, $r153, $r155) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r157 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r156)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r157 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r156) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r158 = interfaceinvoke $r157.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r20)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r158 = interfaceinvoke $r157.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r20) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r158.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r158.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r160 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r160 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r161 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r161 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r162 = (org.apache.ambari.server.state.Cluster) $r161
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r162 = (org.apache.ambari.server.state.Cluster) $r161 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r163 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r163 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r164 = interfaceinvoke $r160.<org.apache.ambari.server.controller.AmbariManagementController: java.util.Map findConfigurationTagsWithOverrides(org.apache.ambari.server.state.Cluster,java.lang.String)>($r162, $r163)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r164 = interfaceinvoke $r160.<org.apache.ambari.server.controller.AmbariManagementController: java.util.Map findConfigurationTagsWithOverrides(org.apache.ambari.server.state.Cluster,java.lang.String)>($r162, $r163) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r165 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r164)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r165 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r164) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r166 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r166 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r166.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r166.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r167 = interfaceinvoke $r165.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r166)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r167 = interfaceinvoke $r165.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r166) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r167.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r167.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r169 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r169 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r170 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r170 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r171 = (java.lang.String) $r170
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r171 = (java.lang.String) $r170 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r172 = interfaceinvoke $r169.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r171)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r172 = interfaceinvoke $r169.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r171) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r173 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r172)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r173 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r172) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r173.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r5)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r173.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r175 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r175 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r176 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r176 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r177 = (java.lang.String) $r176
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r177 = (java.lang.String) $r176 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r178 = interfaceinvoke $r175.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>($r177)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r178 = interfaceinvoke $r175.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>($r177) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r179 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r178)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r179 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r178) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r180 = interfaceinvoke $r179.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r57)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r180 = interfaceinvoke $r179.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r57) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r180.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r180.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l1 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l1 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r182 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r182 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r183 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r182)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r183 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r182) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r184 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r184 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r185 = interfaceinvoke $r183.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r184)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r185 = interfaceinvoke $r183.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r184) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r185.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r185.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r187 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Collection getHosts()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r187 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Collection getHosts()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r188 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r187)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r188 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r187) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r189 = interfaceinvoke $r57.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r189 = interfaceinvoke $r57.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r190 = interfaceinvoke $r188.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r189)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r190 = interfaceinvoke $r188.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r189) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r190.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r190.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r192 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r192 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r193 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r192)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r193 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r192) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r194 = interfaceinvoke $r193.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r76)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r194 = interfaceinvoke $r193.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r76) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r194.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r194.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r196 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getCurrentStackVersion()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r196 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getCurrentStackVersion()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r197 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r196)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r197 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r196) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r197.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r46)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r197.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r46) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r199 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r199 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r200 = (java.lang.String) $r199
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r200 = (java.lang.String) $r199 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r201 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>($r200)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r201 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>($r200) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r202 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r201)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r202 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r201) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r203 = new org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest$4
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r203 = new org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest$4 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r203.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest$4: void <init>(org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest,java.util.List,java.util.List,java.util.List)>(r0, r17, r18, r16)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r203.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest$4: void <init>(org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest,java.util.List,java.util.List,java.util.List)>(r0, r17, r18, r16) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r204 = interfaceinvoke $r202.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andAnswer(org.easymock.IAnswer)>($r203)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r204 = interfaceinvoke $r202.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andAnswer(org.easymock.IAnswer)>($r203) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r204.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r204.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r206 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/entities/RepositoryVersionEntity;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r206 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/entities/RepositoryVersionEntity;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r207 = (org.apache.ambari.server.orm.entities.RepositoryVersionEntity) $r206
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r207 = (org.apache.ambari.server.orm.entities.RepositoryVersionEntity) $r206 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r208 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/repository/VersionDefinitionXml;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r208 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/repository/VersionDefinitionXml;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r209 = (org.apache.ambari.server.state.repository.VersionDefinitionXml) $r208
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r209 = (org.apache.ambari.server.state.repository.VersionDefinitionXml) $r208 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z0 = staticinvoke <org.easymock.EasyMock: boolean eq(boolean)>(0)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z0 = staticinvoke <org.easymock.EasyMock: boolean eq(boolean)>(0) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r210 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.List transitionHostsToInstalling(org.apache.ambari.server.orm.entities.RepositoryVersionEntity,org.apache.ambari.server.state.repository.VersionDefinitionXml,boolean)>($r207, $r209, $z0)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r210 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.List transitionHostsToInstalling(org.apache.ambari.server.orm.entities.RepositoryVersionEntity,org.apache.ambari.server.state.repository.VersionDefinitionXml,boolean)>($r207, $r209, $z0) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r211 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r210)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r211 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r210) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r212 = interfaceinvoke $r211.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r56)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r212 = interfaceinvoke $r211.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r56) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r212.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r212.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r214 = new org.apache.ambari.server.agent.ExecutionCommand
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r214 = new org.apache.ambari.server.agent.ExecutionCommand >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r214.<org.apache.ambari.server.agent.ExecutionCommand: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r214.<org.apache.ambari.server.agent.ExecutionCommand: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r215 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/actionmanager/ExecutionCommandWrapper;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r215 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/actionmanager/ExecutionCommandWrapper;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r27 = (org.apache.ambari.server.actionmanager.ExecutionCommandWrapper) $r215
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r27 = (org.apache.ambari.server.actionmanager.ExecutionCommandWrapper) $r215 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r216 = virtualinvoke r27.<org.apache.ambari.server.actionmanager.ExecutionCommandWrapper: org.apache.ambari.server.agent.ExecutionCommand getExecutionCommand()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r216 = virtualinvoke r27.<org.apache.ambari.server.actionmanager.ExecutionCommandWrapper: org.apache.ambari.server.agent.ExecutionCommand getExecutionCommand()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r217 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r216)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r217 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r216) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r218 = interfaceinvoke $r217.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r214)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r218 = interfaceinvoke $r217.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r214) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r218.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r218.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r220 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/actionmanager/Stage;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r220 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/actionmanager/Stage;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r28 = (org.apache.ambari.server.actionmanager.Stage) $r220
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r28 = (org.apache.ambari.server.actionmanager.Stage) $r220 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r221 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r221 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r222 = (java.lang.String) $r221
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r222 = (java.lang.String) $r221 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r223 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r223 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r224 = (java.lang.String) $r223
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r224 = (java.lang.String) $r223 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r225 = virtualinvoke r28.<org.apache.ambari.server.actionmanager.Stage: org.apache.ambari.server.actionmanager.ExecutionCommandWrapper getExecutionCommandWrapper(java.lang.String,java.lang.String)>($r222, $r224)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r225 = virtualinvoke r28.<org.apache.ambari.server.actionmanager.Stage: org.apache.ambari.server.actionmanager.ExecutionCommandWrapper getExecutionCommandWrapper(java.lang.String,java.lang.String)>($r222, $r224) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r226 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r225)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r226 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r225) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r227 = interfaceinvoke $r226.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r27)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r227 = interfaceinvoke $r226.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r27) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r227.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r227.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r229 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r229 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r229.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r229.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r230 = virtualinvoke r28.<org.apache.ambari.server.actionmanager.Stage: java.util.Map getSuccessFactors()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r230 = virtualinvoke r28.<org.apache.ambari.server.actionmanager.Stage: java.util.Map getSuccessFactors()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r231 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r230)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r231 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r230) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r232 = interfaceinvoke $r231.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r229)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r232 = interfaceinvoke $r231.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r229) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r232.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r232.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r234 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r234 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l2 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l2 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r235 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r235 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r236 = (java.lang.String) $r235
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r236 = (java.lang.String) $r235 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r237 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r237 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r238 = (java.lang.String) $r237
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r238 = (java.lang.String) $r237 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l3 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l3 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r239 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r239 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r240 = (java.lang.String) $r239
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r240 = (java.lang.String) $r239 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r241 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r241 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r242 = (java.lang.String) $r241
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r242 = (java.lang.String) $r241 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r243 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r243 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r244 = (java.lang.String) $r243
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r244 = (java.lang.String) $r243 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r245 = interfaceinvoke $r234.<org.apache.ambari.server.actionmanager.StageFactory: org.apache.ambari.server.actionmanager.Stage createNew(long,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String)>($l2, $r236, $r238, $l3, $r240, $r242, $r244)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r245 = interfaceinvoke $r234.<org.apache.ambari.server.actionmanager.StageFactory: org.apache.ambari.server.actionmanager.Stage createNew(long,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String)>($l2, $r236, $r238, $l3, $r240, $r242, $r244) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r246 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r245)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r246 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r245) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r247 = interfaceinvoke $r246.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r28)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r247 = interfaceinvoke $r246.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r28) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i4 = 10 / 2
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i4 = 10 / 2 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $d0 = (double) $i4
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $d0 = (double) $i4 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i5 = (int) $d1
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i5 = (int) $d1 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r247.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters times(int)>($i5)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r247.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters times(int)>($i5) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r249 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAOMock>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r249 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAOMock> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r250 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/StackId;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r250 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Lorg/apache/ambari/server/state/StackId;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r251 = (org.apache.ambari.server.state.StackId) $r250
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r251 = (org.apache.ambari.server.state.StackId) $r250 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r252 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r252 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r253 = (java.lang.String) $r252
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r253 = (java.lang.String) $r252 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r254 = virtualinvoke $r249.<org.apache.ambari.server.orm.dao.RepositoryVersionDAO: org.apache.ambari.server.orm.entities.RepositoryVersionEntity findByStackAndVersion(org.apache.ambari.server.state.StackId,java.lang.String)>($r251, $r253)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r254 = virtualinvoke $r249.<org.apache.ambari.server.orm.dao.RepositoryVersionDAO: org.apache.ambari.server.orm.entities.RepositoryVersionEntity findByStackAndVersion(org.apache.ambari.server.state.StackId,java.lang.String)>($r251, $r253) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r255 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r254)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r255 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r254) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r255.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r49)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r255.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r49) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r30 = staticinvoke <org.easymock.Capture: org.easymock.Capture newInstance()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r30 = staticinvoke <org.easymock.Capture: org.easymock.Capture newInstance()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r31 = staticinvoke <org.easymock.Capture: org.easymock.Capture newInstance()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r31 = staticinvoke <org.easymock.Capture: org.easymock.Capture newInstance()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r257 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r30)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r257 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r30) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r258 = (org.apache.ambari.server.actionmanager.Request) $r257
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r258 = (org.apache.ambari.server.actionmanager.Request) $r257 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r259 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r31)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r259 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r31) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r260 = (org.apache.ambari.server.controller.ExecuteActionRequest) $r259
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r260 = (org.apache.ambari.server.controller.ExecuteActionRequest) $r259 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r21.<org.apache.ambari.server.actionmanager.ActionManager: void sendActions(org.apache.ambari.server.actionmanager.Request,org.apache.ambari.server.controller.ExecuteActionRequest)>($r258, $r260)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r21.<org.apache.ambari.server.actionmanager.ActionManager: void sendActions(org.apache.ambari.server.actionmanager.Request,org.apache.ambari.server.controller.ExecuteActionRequest)>($r258, $r260) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r261 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expectLastCall()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r261 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expectLastCall()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r261.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r261.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l6 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l6 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r263 = virtualinvoke r21.<org.apache.ambari.server.actionmanager.ActionManager: java.util.List getRequestTasks(long)>($l6)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r263 = virtualinvoke r21.<org.apache.ambari.server.actionmanager.ActionManager: java.util.List getRequestTasks(long)>($l6) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r264 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r263)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r264 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r263) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r265 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r265 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r266 = interfaceinvoke $r264.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r265)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r266 = interfaceinvoke $r264.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r265) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r266.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r266.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r268 = new org.apache.ambari.server.orm.entities.ClusterEntity
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r268 = new org.apache.ambari.server.orm.entities.ClusterEntity >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r268.<org.apache.ambari.server.orm.entities.ClusterEntity: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r268.<org.apache.ambari.server.orm.entities.ClusterEntity: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r269 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r269 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r268.<org.apache.ambari.server.orm.entities.ClusterEntity: void setClusterId(java.lang.Long)>($r269)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r268.<org.apache.ambari.server.orm.entities.ClusterEntity: void setClusterId(java.lang.Long)>($r269) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r268.<org.apache.ambari.server.orm.entities.ClusterEntity: void setClusterName(java.lang.String)>("Cluster100")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r268.<org.apache.ambari.server.orm.entities.ClusterEntity: void setClusterName(java.lang.String)>("Cluster100") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r270 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r270 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r271 = interfaceinvoke $r270.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/topology/TopologyManager;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r271 = interfaceinvoke $r270.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/topology/TopologyManager;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r272 = (org.apache.ambari.server.topology.TopologyManager) $r271
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r272 = (org.apache.ambari.server.topology.TopologyManager) $r271 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.utils.StageUtils: void setTopologyManager(org.apache.ambari.server.topology.TopologyManager)>($r272)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.utils.StageUtils: void setTopologyManager(org.apache.ambari.server.topology.TopologyManager)>($r272) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r273 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r273 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r274 = interfaceinvoke $r273.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r274 = interfaceinvoke $r273.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r275 = (org.apache.ambari.server.configuration.Configuration) $r274
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r275 = (org.apache.ambari.server.configuration.Configuration) $r274 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.utils.StageUtils: void setConfiguration(org.apache.ambari.server.configuration.Configuration)>($r275)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.utils.StageUtils: void setConfiguration(org.apache.ambari.server.configuration.Configuration)>($r275) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276 = newarray (java.lang.Object)[16]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276 = newarray (java.lang.Object)[16] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r277 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r277 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[0] = $r277
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[0] = $r277 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[1] = r22
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[1] = r22 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r278 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r278 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[2] = $r278
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[2] = $r278 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[3] = r334
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[3] = r334 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[4] = r335
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[4] = r335 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[5] = r23
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[5] = r23 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[6] = r5
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[6] = r5 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r279 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAOMock>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r279 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAOMock> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[7] = $r279
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[7] = $r279 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r280 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.ConfigHelper configHelper>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r280 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.ConfigHelper configHelper> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[8] = $r280
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[8] = $r280 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[9] = r13
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[9] = r13 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[10] = r14
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[10] = r14 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[11] = r15
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[11] = r15 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[12] = r21
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[12] = r21 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[13] = r27
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[13] = r27 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[14] = r28
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[14] = r28 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r281 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r281 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[15] = $r281
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276[15] = $r281 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r276)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r276) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r282 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r282 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r33 = specialinvoke r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider createProvider(org.apache.ambari.server.controller.AmbariManagementController)>($r282)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r33 = specialinvoke r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider createProvider(org.apache.ambari.server.controller.AmbariManagementController)>($r282) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r283 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r283 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r283.<com.google.inject.Injector: void injectMembers(java.lang.Object)>(r33)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r283.<com.google.inject.Injector: void injectMembers(java.lang.Object)>(r33) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r284 = new java.util.LinkedHashSet
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r284 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r284.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r284.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r285 = new java.util.LinkedHashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r285 = new java.util.LinkedHashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r285.<java.util.LinkedHashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r285.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r286 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r286 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r285.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r286, "Cluster100")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r285.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r286, "Cluster100") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r288 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r288 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r285.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r288, "2.2.0.1-885")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r285.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r288, "2.2.0.1-885") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r290 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_STACK_PROPERTY_ID>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r290 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_STACK_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r285.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r290, "HDP")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r285.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r290, "HDP") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r292 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r292 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r285.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r292, "2.1.1")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r285.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r292, "2.1.1") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r284.<java.util.Set: boolean add(java.lang.Object)>($r285)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r284.<java.util.Set: boolean add(java.lang.Object)>($r285) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r36 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: org.apache.ambari.server.controller.spi.Request getCreateRequest(java.util.Set,java.util.Map)>($r284, null)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r36 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: org.apache.ambari.server.controller.spi.Request getCreateRequest(java.util.Set,java.util.Map)>($r284, null) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r294 = staticinvoke <org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r294 = staticinvoke <org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r294.<org.springframework.security.core.context.SecurityContext: void setAuthentication(org.springframework.security.core.Authentication)>(r1)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r294.<org.springframework.security.core.context.SecurityContext: void setAuthentication(org.springframework.security.core.Authentication)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r37 = interfaceinvoke r33.<org.apache.ambari.server.controller.spi.ResourceProvider: org.apache.ambari.server.controller.spi.RequestStatus createResources(org.apache.ambari.server.controller.spi.Request)>(r36)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r37 = interfaceinvoke r33.<org.apache.ambari.server.controller.spi.ResourceProvider: org.apache.ambari.server.controller.spi.RequestStatus createResources(org.apache.ambari.server.controller.spi.Request)>(r36) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r37)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r37) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295 = newarray (java.lang.Object)[5]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295 = newarray (java.lang.Object)[5] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r296 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r296 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.controller.AmbariManagementController managementController> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[0] = $r296
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[0] = $r296 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[1] = r22
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[1] = r22 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r297 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r297 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[2] = $r297
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[2] = $r297 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r298 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r298 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[3] = $r298
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[3] = $r298 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[4] = r28
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295[4] = r28 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void verify(java.lang.Object[])>($r295)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void verify(java.lang.Object[])>($r295) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r299 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role INSTALL_PACKAGES>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r299 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role INSTALL_PACKAGES> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r300 = interfaceinvoke $r229.<java.util.Map: java.lang.Object get(java.lang.Object)>($r299)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r300 = interfaceinvoke $r229.<java.util.Map: java.lang.Object get(java.lang.Object)>($r299) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r38 = (java.lang.Float) $r300
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r38 = (java.lang.Float) $r300 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r301 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.85F)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r301 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.85F) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r301, r38)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r301, r38) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r302 = virtualinvoke $r214.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.agent.CommandRepository getRepositoryFile()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r302 = virtualinvoke $r214.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.agent.CommandRepository getRepositoryFile()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r302)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r302) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r303 = virtualinvoke $r214.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.agent.CommandRepository getRepositoryFile()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r303 = virtualinvoke $r214.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.agent.CommandRepository getRepositoryFile()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r304 = virtualinvoke $r303.<org.apache.ambari.server.agent.CommandRepository: java.util.Collection getRepositories()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r304 = virtualinvoke $r303.<org.apache.ambari.server.agent.CommandRepository: java.util.Collection getRepositories()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i7 = interfaceinvoke $r304.<java.util.Collection: int size()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i7 = interfaceinvoke $r304.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l8 = (long) $i7
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l8 = (long) $i7 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l8)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l8) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r305 = virtualinvoke $r214.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.agent.CommandRepository getRepositoryFile()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r305 = virtualinvoke $r214.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.agent.CommandRepository getRepositoryFile()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r306 = virtualinvoke $r305.<org.apache.ambari.server.agent.CommandRepository: java.util.Collection getRepositories()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r306 = virtualinvoke $r305.<org.apache.ambari.server.agent.CommandRepository: java.util.Collection getRepositories()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r39 = interfaceinvoke $r306.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r39 = interfaceinvoke $r306.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if $z2 == 0
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if $z2 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r307 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if $z2 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : return
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r307 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r40 = (org.apache.ambari.server.agent.CommandRepository$Repository) $r307
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r40 = (org.apache.ambari.server.agent.CommandRepository$Repository) $r307 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z3 = virtualinvoke r40.<org.apache.ambari.server.agent.CommandRepository$Repository: boolean isAmbariManaged()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z3 = virtualinvoke r40.<org.apache.ambari.server.agent.CommandRepository$Repository: boolean isAmbariManaged()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : goto [?= $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : goto [?= $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r308 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r308.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r308.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r309 = virtualinvoke $r308.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("host")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r309 = virtualinvoke $r308.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("host") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r310 = virtualinvoke $r309.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r310 = virtualinvoke $r309.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r332 = virtualinvoke $r310.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r332 = virtualinvoke $r310.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r311 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.String,java.lang.Class)>(r332, class "Lorg/apache/ambari/server/state/Host;")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r311 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.String,java.lang.Class)>(r332, class "Lorg/apache/ambari/server/state/Host;") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r333 = (org.apache.ambari.server.state.Host) $r311
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r333 = (org.apache.ambari.server.state.Host) $r311 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312 = interfaceinvoke r333.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312 = interfaceinvoke r333.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r313 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r312)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r313 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r312) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r314 = interfaceinvoke $r313.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r332)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r314 = interfaceinvoke $r313.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r332) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r314.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r314.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r316 = interfaceinvoke r333.<org.apache.ambari.server.state.Host: java.lang.String getOsFamily()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r316 = interfaceinvoke r333.<org.apache.ambari.server.state.Host: java.lang.String getOsFamily()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r317 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r316)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r317 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r316) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r318 = interfaceinvoke $r317.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("redhat6")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r318 = interfaceinvoke $r317.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("redhat6") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r318.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r318.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l9 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l9 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r320 = interfaceinvoke r333.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l9)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r320 = interfaceinvoke r333.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l9) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r321 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r320)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r321 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r320) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r322 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r322 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r323 = interfaceinvoke $r321.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r322)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r323 = interfaceinvoke $r321.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r322) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r323.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r323.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r325 = interfaceinvoke r333.<org.apache.ambari.server.state.Host: java.util.List getAllHostVersions()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r325 = interfaceinvoke r333.<org.apache.ambari.server.state.Host: java.util.List getAllHostVersions()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r326 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r325)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r326 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r325) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r327 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r327 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r328 = interfaceinvoke $r326.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r327)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r328 = interfaceinvoke $r326.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r327) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r328.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r328.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r330 = newarray (java.lang.Object)[1]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r330 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r330[0] = r333
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r330[0] = r333 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r330)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r330) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r332, r333)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r332, r333) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean equals(java.lang.String,java.lang.String)>("host3", r332)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean equals(java.lang.String,java.lang.String)>("host3", r332) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if $z4 != 0
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if $z4 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r56.<java.util.List: boolean add(java.lang.Object)>(r333)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if $z4 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i10 = i10 + 1
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i10 = i10 + 1 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : goto [?= (branch)]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if i10 >= 10
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r56.<java.util.List: boolean add(java.lang.Object)>(r333) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i10 = i10 + 1
