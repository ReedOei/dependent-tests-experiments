org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r3 = new org.apache.ambari.server.checks.UpgradeCheckRegistry >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : specialinvoke $r3.<org.apache.ambari.server.checks.UpgradeCheckRegistry: void <init>()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : specialinvoke $r3.<org.apache.ambari.server.checks.UpgradeCheckRegistry: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r4 = virtualinvoke r0.<org.apache.ambari.server.controller.ControllerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/checks/UpgradeCheckRegistry;")
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r4 = virtualinvoke r0.<org.apache.ambari.server.controller.ControllerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/checks/UpgradeCheckRegistry;") >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r3)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if null == r20
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if null == r20 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $z2 = interfaceinvoke r20.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if null == r20 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r5 = class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;"
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r5 = class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;" >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Package getPackage()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Package getPackage()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r21 = virtualinvoke $r6.<java.lang.Package: java.lang.String getName()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r21 = virtualinvoke $r6.<java.lang.Package: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r7 = <org.apache.ambari.server.controller.ControllerModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r7 = <org.apache.ambari.server.controller.ControllerModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Searching package {} for classes matching {}", r21, class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;")
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Searching package {} for classes matching {}", r21, class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;") >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r8 = new org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r8 = new org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : specialinvoke $r8.<org.springframework.context.'annotation'.ClassPathScanningCandidateComponentProvider: void <init>(boolean)>(0)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : specialinvoke $r8.<org.springframework.context.'annotation'.ClassPathScanningCandidateComponentProvider: void <init>(boolean)>(0) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r9 = new org.springframework.core.type.filter.AssignableTypeFilter
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r9 = new org.springframework.core.type.filter.AssignableTypeFilter >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : specialinvoke $r9.<org.springframework.core.type.filter.AssignableTypeFilter: void <init>(java.lang.Class)>(class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;")
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : specialinvoke $r9.<org.springframework.core.type.filter.AssignableTypeFilter: void <init>(java.lang.Class)>(class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;") >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : virtualinvoke $r8.<org.springframework.context.'annotation'.ClassPathScanningCandidateComponentProvider: void addIncludeFilter(org.springframework.core.type.filter.TypeFilter)>($r9)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : virtualinvoke $r8.<org.springframework.context.'annotation'.ClassPathScanningCandidateComponentProvider: void addIncludeFilter(org.springframework.core.type.filter.TypeFilter)>($r9) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r20 = virtualinvoke $r8.<org.springframework.context.'annotation'.ClassPathScanningCandidateComponentProvider: java.util.Set findCandidateComponents(java.lang.String)>(r21)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r20 = virtualinvoke $r8.<org.springframework.context.'annotation'.ClassPathScanningCandidateComponentProvider: java.util.Set findCandidateComponents(java.lang.String)>(r21) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if null == r20
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if null == r20 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $i0 = interfaceinvoke r20.<java.util.Set: int size()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if null == r20 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r10 = <org.apache.ambari.server.controller.ControllerModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r10 = <org.apache.ambari.server.controller.ControllerModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("No instances of {} found to register", class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;")
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("No instances of {} found to register", class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;") >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : return null
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $i0 = interfaceinvoke r20.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $i0 != 0
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $i0 != 0 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r10 = <org.apache.ambari.server.controller.ControllerModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $i0 != 0 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r24 = interfaceinvoke r20.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r24 = interfaceinvoke r20.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z0 == 0
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r14 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r29 = virtualinvoke $r3.<org.apache.ambari.server.checks.UpgradeCheckRegistry: java.util.List getUpgradeChecks()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r29 = virtualinvoke $r3.<org.apache.ambari.server.checks.UpgradeCheckRegistry: java.util.List getUpgradeChecks()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r30 = interfaceinvoke r29.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r30 = interfaceinvoke r29.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z1 == 0
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r11 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : return r20
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r11 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r31 = (org.apache.ambari.server.checks.AbstractCheckDescriptor) $r11
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r31 = (org.apache.ambari.server.checks.AbstractCheckDescriptor) $r11 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r12 = <org.apache.ambari.server.controller.ControllerModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r12 = <org.apache.ambari.server.controller.ControllerModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r13 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r13 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Registered pre-upgrade check {}", $r13)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Registered pre-upgrade check {}", $r13) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : goto [?= $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : goto [?= $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r14 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r25 = (org.springframework.beans.factory.config.BeanDefinition) $r14
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r25 = (org.springframework.beans.factory.config.BeanDefinition) $r14 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r26 = interfaceinvoke r25.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r26 = interfaceinvoke r25.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r15 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r15 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolveClassName(java.lang.String,java.lang.ClassLoader)>(r26, $r15)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolveClassName(java.lang.String,java.lang.ClassLoader)>(r26, $r15) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r16 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolveClassName(java.lang.String,java.lang.ClassLoader)>(r26, $r15) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r18 := @caughtexception
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r19 = <org.apache.ambari.server.controller.ControllerModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r19.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to bind and register upgrade check {}", r2, $r18)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r19.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to bind and register upgrade check {}", r2, $r18) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : goto [?= $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : goto [?= $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r16 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r27 = (org.apache.ambari.server.checks.AbstractCheckDescriptor) $r16
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r16 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r18 := @caughtexception
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r27 = (org.apache.ambari.server.checks.AbstractCheckDescriptor) $r16 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r17 = virtualinvoke r0.<org.apache.ambari.server.controller.ControllerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(r2)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : r27 = (org.apache.ambari.server.checks.AbstractCheckDescriptor) $r16 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r18 := @caughtexception
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r17 = virtualinvoke r0.<org.apache.ambari.server.controller.ControllerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(r2) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r17.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r27)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r17 = virtualinvoke r0.<org.apache.ambari.server.controller.ControllerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(r2) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r18 := @caughtexception
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r17.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r27) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : virtualinvoke $r3.<org.apache.ambari.server.checks.UpgradeCheckRegistry: void register(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r27)
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : interfaceinvoke $r17.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r27) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r18 := @caughtexception
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : virtualinvoke $r3.<org.apache.ambari.server.checks.UpgradeCheckRegistry: void register(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r27) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : goto [?= (branch)]
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : virtualinvoke $r3.<org.apache.ambari.server.checks.UpgradeCheckRegistry: void register(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r27) >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r18 := @caughtexception
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : goto [?= $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $z2 = interfaceinvoke r20.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z2 == 0
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z2 == 0 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : $r5 = class "Lorg/apache/ambari/server/checks/AbstractCheckDescriptor;"
org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if $z2 == 0 >>>>>>>> org.apache.ambari.server.controller.ControllerModule.registerUpgradeChecks : if null == r20
