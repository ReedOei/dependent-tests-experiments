org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List resolveTasks(org.apache.ambari.server.state.UpgradeContext,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, 1, r4) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r24 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List access$100(java.util.List)>($r7)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r24 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List access$100(java.util.List)>($r7) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r25 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r25 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z1 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r20 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r31 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: org.apache.ambari.server.state.stack.upgrade.Task resolveTask(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, r4)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r31 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: org.apache.ambari.server.state.stack.upgrade.Task resolveTask(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, r4) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if null == r31
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if null == r31 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r14 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if null == r31 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r8 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List resolveTasks(org.apache.ambari.server.state.UpgradeContext,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, 0, r4)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r8 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List resolveTasks(org.apache.ambari.server.state.UpgradeContext,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, 0, r4) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r33 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List access$100(java.util.List)>($r8)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r33 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List access$100(java.util.List)>($r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r34 = interfaceinvoke r33.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r34 = interfaceinvoke r33.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z6 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z6 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z6 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z6 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r10 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z6 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z2 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: boolean m_serviceCheck>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z2 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: boolean m_serviceCheck> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z2 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if z0 != 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : return
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r9 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.Set m_servicesToCheck>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : return
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r9 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.Set m_servicesToCheck> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r3)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : return
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r10 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r35 = (org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket) $r10
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r35 = (org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket) $r10 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r11 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r11 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r12 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket: java.util.List access$200(org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket)>(r35)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r12 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket: java.util.List access$200(org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket)>(r35) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r36 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.TaskWrapperBuilder: java.util.List getTaskList(java.lang.String,java.lang.String,org.apache.ambari.server.stack.HostsType,java.util.List,java.util.Map)>(r3, $r11, r2, $r12, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r36 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.TaskWrapperBuilder: java.util.List getTaskList(java.lang.String,java.lang.String,org.apache.ambari.server.stack.HostsType,java.util.List,java.util.Map)>(r3, $r11, r2, $r12, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r37 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List organizeTaskWrappersBySyncRules(java.util.List)>(r36)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r37 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List organizeTaskWrappersBySyncRules(java.util.List)>(r36) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r38 = interfaceinvoke r37.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r38 = interfaceinvoke r37.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z4 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r13 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z6 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z6 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z6 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r13 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r6 = (java.util.List) $r13
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r6 = (java.util.List) $r13 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r6, "Completing", r1, r3, r4, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r6, "Completing", r1, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r14 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r15 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r15 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r16 = r2.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r16 = r2.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r17 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r31)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r17 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r31) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke $r14.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.List)>(r3, $r15, $r16, r5, $r17)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke $r14.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.List)>(r3, $r15, $r16, r5, $r17) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r14)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r19 = virtualinvoke r31.<org.apache.ambari.server.state.stack.upgrade.Task: java.lang.String getActionVerb()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r19 = virtualinvoke r31.<org.apache.ambari.server.state.stack.upgrade.Task: java.lang.String getActionVerb()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>($r18, $r19, r1, r3, r4, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>($r18, $r19, r1, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r8 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List resolveTasks(org.apache.ambari.server.state.UpgradeContext,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, 0, r4)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r20 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r26 = (org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket) $r20
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r26 = (org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket) $r20 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r21 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r21 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r22 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket: java.util.List access$200(org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket)>(r26)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r22 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket: java.util.List access$200(org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket)>(r26) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r27 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.TaskWrapperBuilder: java.util.List getTaskList(java.lang.String,java.lang.String,org.apache.ambari.server.stack.HostsType,java.util.List,java.util.Map)>(r3, $r21, r2, $r22, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r27 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.TaskWrapperBuilder: java.util.List getTaskList(java.lang.String,java.lang.String,org.apache.ambari.server.stack.HostsType,java.util.List,java.util.Map)>(r3, $r21, r2, $r22, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r28 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List organizeTaskWrappersBySyncRules(java.util.List)>(r27)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r28 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List organizeTaskWrappersBySyncRules(java.util.List)>(r27) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r29 = interfaceinvoke r28.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r29 = interfaceinvoke r28.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z5 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z5 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z5 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r23 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r23 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r30 = (java.util.List) $r23
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r30 = (java.util.List) $r23 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r30, "Preparing", r1, r3, r4, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r30, "Preparing", r1, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z5 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z5 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z5 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
