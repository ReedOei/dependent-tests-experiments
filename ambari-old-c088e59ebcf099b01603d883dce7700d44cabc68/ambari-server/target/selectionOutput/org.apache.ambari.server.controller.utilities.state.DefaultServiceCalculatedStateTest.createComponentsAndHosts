org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r7 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Service service> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r1 = interfaceinvoke $r7.<org.apache.ambari.server.state.Service: org.apache.ambari.server.state.ServiceComponent addServiceComponent(java.lang.String)>("ZOOKEEPER_SERVER")
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r1 = interfaceinvoke $r7.<org.apache.ambari.server.state.Service: org.apache.ambari.server.state.ServiceComponent addServiceComponent(java.lang.String)>("ZOOKEEPER_SERVER") >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r8 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Service service>
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r8 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Service service> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r2 = interfaceinvoke $r8.<org.apache.ambari.server.state.Service: org.apache.ambari.server.state.ServiceComponent addServiceComponent(java.lang.String)>("ZOOKEEPER_CLIENT")
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r2 = interfaceinvoke $r8.<org.apache.ambari.server.state.Service: org.apache.ambari.server.state.ServiceComponent addServiceComponent(java.lang.String)>("ZOOKEEPER_CLIENT") >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r3 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: java.lang.String[] hosts>
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r3 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: java.lang.String[] hosts> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : i0 = lengthof r3
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : i0 = lengthof r3 >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : i1 = 0
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : i1 = 0 >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : if i1 >= i0
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : if i1 >= i0 >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r4 = r3[i1]
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : if i1 >= i0 >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : return
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r4 = r3[i1] >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r9 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r9 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: void addHost(java.lang.String)>(r4)
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: void addHost(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r10 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r10 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r5 = interfaceinvoke $r10.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Host getHost(java.lang.String)>(r4)
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r5 = interfaceinvoke $r10.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Host getHost(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r11 = new java.util.HashMap
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r11 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : specialinvoke $r11.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : specialinvoke $r11.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_family", "redhat")
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_family", "redhat") >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_release_version", "6.3")
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_release_version", "6.3") >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r5.<org.apache.ambari.server.state.Host: void setHostAttributes(java.util.Map)>($r11)
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r5.<org.apache.ambari.server.state.Host: void setHostAttributes(java.util.Map)>($r11) >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r14 = <org.apache.ambari.server.state.HostState: org.apache.ambari.server.state.HostState HEALTHY>
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r14 = <org.apache.ambari.server.state.HostState: org.apache.ambari.server.state.HostState HEALTHY> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r5.<org.apache.ambari.server.state.Host: void setState(org.apache.ambari.server.state.HostState)>($r14)
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r5.<org.apache.ambari.server.state.Host: void setState(org.apache.ambari.server.state.HostState)>($r14) >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r15 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r15 = r0.<org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke $r15.<org.apache.ambari.server.state.Clusters: void mapHostToCluster(java.lang.String,java.lang.String)>(r4, "c1")
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke $r15.<org.apache.ambari.server.state.Clusters: void mapHostToCluster(java.lang.String,java.lang.String)>(r4, "c1") >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r18 = interfaceinvoke r1.<org.apache.ambari.server.state.ServiceComponent: org.apache.ambari.server.state.ServiceComponentHost addServiceComponentHost(java.lang.String)>(r4)
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r18 = interfaceinvoke r1.<org.apache.ambari.server.state.ServiceComponent: org.apache.ambari.server.state.ServiceComponentHost addServiceComponentHost(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r18.<org.apache.ambari.server.state.ServiceComponentHost: void setVersion(java.lang.String)>("2.1.1.0")
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r18.<org.apache.ambari.server.state.ServiceComponentHost: void setVersion(java.lang.String)>("2.1.1.0") >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r16 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State STARTED>
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r16 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State STARTED> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r18.<org.apache.ambari.server.state.ServiceComponentHost: void setState(org.apache.ambari.server.state.State)>($r16)
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r18.<org.apache.ambari.server.state.ServiceComponentHost: void setState(org.apache.ambari.server.state.State)>($r16) >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r19 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponent: org.apache.ambari.server.state.ServiceComponentHost addServiceComponentHost(java.lang.String)>(r4)
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : r19 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponent: org.apache.ambari.server.state.ServiceComponentHost addServiceComponentHost(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r19.<org.apache.ambari.server.state.ServiceComponentHost: void setVersion(java.lang.String)>("2.1.1.0")
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r19.<org.apache.ambari.server.state.ServiceComponentHost: void setVersion(java.lang.String)>("2.1.1.0") >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r17 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State INSTALLED>
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : $r17 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State INSTALLED> >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r19.<org.apache.ambari.server.state.ServiceComponentHost: void setState(org.apache.ambari.server.state.State)>($r17)
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : interfaceinvoke r19.<org.apache.ambari.server.state.ServiceComponentHost: void setState(org.apache.ambari.server.state.State)>($r17) >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : i1 = i1 + 1
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : i1 = i1 + 1 >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : goto [?= (branch)]
org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.utilities.state.DefaultServiceCalculatedStateTest.createComponentsAndHosts : if i1 >= i0
