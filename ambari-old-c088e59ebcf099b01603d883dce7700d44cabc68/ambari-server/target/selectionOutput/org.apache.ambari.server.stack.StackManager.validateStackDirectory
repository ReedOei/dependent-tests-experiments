org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r4 = <org.apache.ambari.server.stack.StackManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Validating stack directory {} ...", r1)
org.apache.ambari.server.stack.StackManager.validateStackDirectory : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Validating stack directory {} ...", r1) >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : r2 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.StackManager.validateStackDirectory : r2 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r5 = <org.apache.ambari.server.stack.StackManager: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r5 = <org.apache.ambari.server.stack.StackManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z0 == 0
org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r14 = <org.apache.ambari.server.stack.StackManager: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z1 != 0
org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z1 != 0 >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $z2 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z1 != 0 >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : r3 = staticinvoke <org.apache.ambari.server.stack.StackManager: javax.xml.validation.Validator getPropertySchemaValidator()>()
org.apache.ambari.server.stack.StackManager.validateStackDirectory : r3 = staticinvoke <org.apache.ambari.server.stack.StackManager: javax.xml.validation.Validator getPropertySchemaValidator()>() >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : staticinvoke <org.apache.ambari.server.stack.StackManager: void validateAllPropertyXmlsInFolderRecursively(java.io.File,javax.xml.validation.Validator)>(r1, r3)
org.apache.ambari.server.stack.StackManager.validateStackDirectory : staticinvoke <org.apache.ambari.server.stack.StackManager: void validateAllPropertyXmlsInFolderRecursively(java.io.File,javax.xml.validation.Validator)>(r1, r3) >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : return
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $z2 = virtualinvoke r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z2 != 0
org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z2 != 0 >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r6 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.stack.StackManager.validateStackDirectory : if $z2 != 0 >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : r3 = staticinvoke <org.apache.ambari.server.stack.StackManager: javax.xml.validation.Validator getPropertySchemaValidator()>()
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r6 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r7 = new java.lang.StringBuilder
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.StackManager.validateStackDirectory : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r9 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r9 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9)
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be a directory with stack, stackRoot = ")
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be a directory with stack, stackRoot = ") >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : specialinvoke $r6.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r13)
org.apache.ambari.server.stack.StackManager.validateStackDirectory : specialinvoke $r6.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : throw $r6
org.apache.ambari.server.stack.StackManager.validateStackDirectory : $r14 = <org.apache.ambari.server.stack.StackManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Loading stack information, stackRoot = {}", r2)
org.apache.ambari.server.stack.StackManager.validateStackDirectory : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Loading stack information, stackRoot = {}", r2) >>>>>>>> org.apache.ambari.server.stack.StackManager.validateStackDirectory : $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>()
