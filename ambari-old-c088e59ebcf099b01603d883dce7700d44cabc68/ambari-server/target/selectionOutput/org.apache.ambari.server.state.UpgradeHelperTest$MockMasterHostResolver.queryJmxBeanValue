org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $z2 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Hadoop:service=NameNode,name=NameNodeStatus") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z2 == 0
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $z3 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("State")
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : return "NOT_MOCKED"
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $z3 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("State") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z3 == 0
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if z0 == 0
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : return "NOT_MOCKED"
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : b2 = -1
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : return "NOT_MOCKED"
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : b2 = -1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>()
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch($i1) {     case 2281:
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch($i1) {     case 2281: >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("H1")
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch($i1) {     case 2281: >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("H2")
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch($i1) {     case 2281: >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch(b2) {     case 0:
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch(b2) {     case 0: >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $r7 = <org.apache.ambari.server.stack.MasterHostResolver$Status: org.apache.ambari.server.stack.MasterHostResolver$Status ACTIVE>
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch(b2) {     case 0: >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $r5 = <org.apache.ambari.server.stack.MasterHostResolver$Status: org.apache.ambari.server.stack.MasterHostResolver$Status STANDBY>
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch(b2) {     case 0: >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : return "UNKNOWN_NAMENODE_STATUS_FOR_THIS_HOST"
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $r5 = <org.apache.ambari.server.stack.MasterHostResolver$Status: org.apache.ambari.server.stack.MasterHostResolver$Status STANDBY> >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $r6 = virtualinvoke $r5.<org.apache.ambari.server.stack.MasterHostResolver$Status: java.lang.String toString()>()
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $r6 = virtualinvoke $r5.<org.apache.ambari.server.stack.MasterHostResolver$Status: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : return $r6
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $r7 = <org.apache.ambari.server.stack.MasterHostResolver$Status: org.apache.ambari.server.stack.MasterHostResolver$Status ACTIVE> >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $r8 = virtualinvoke $r7.<org.apache.ambari.server.stack.MasterHostResolver$Status: java.lang.String toString()>()
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $r8 = virtualinvoke $r7.<org.apache.ambari.server.stack.MasterHostResolver$Status: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : return $r8
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("H2") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z4 == 0
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : b2 = 1
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch(b2) {     case 0:
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : b2 = 1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch(b2) {     case 0:
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("H1") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z5 == 0
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : b2 = 0
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch(b2) {     case 0:
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : b2 = 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockMasterHostResolver.queryJmxBeanValue : lookupswitch(b2) {     case 0:
