org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r10 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map jmxPortMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : interfaceinvoke $r10.<java.util.Map: void clear()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : interfaceinvoke $r10.<java.util.Map: void clear()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r11 = new java.util.HashMap
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r11 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : specialinvoke $r11.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : specialinvoke $r11.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHostComponentMap> = $r11
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHostComponentMap> = $r11 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r12 = new java.util.HashMap
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r12 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : specialinvoke $r12.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterGangliaCollectorMap> = $r12
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterGangliaCollectorMap> = $r12 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r13 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r13 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r1 = interfaceinvoke $r13.<org.apache.ambari.server.state.Clusters: java.util.Map getClusters()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r1 = interfaceinvoke $r13.<org.apache.ambari.server.state.Clusters: java.util.Map getClusters()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z0 = staticinvoke <org.apache.commons.collections.MapUtils: boolean isEmpty(java.util.Map)>(r1)
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z0 = staticinvoke <org.apache.commons.collections.MapUtils: boolean isEmpty(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z0 == 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : return
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r14 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r14 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r2 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r2 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z1 == 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : return
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r3 = (org.apache.ambari.server.state.Cluster) $r15
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r3 = (org.apache.ambari.server.state.Cluster) $r15 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r4 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r4 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r16 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHostComponentMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r16 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHostComponentMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r26 = (java.util.Map) $r17
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r26 = (java.util.Map) $r17 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if r26 != null
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if r26 != null >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r23 = new java.util.HashMap
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if r26 != null >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r5 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r5 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z2 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>(r5)
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z2 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>(r5) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z2 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z2 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z2 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z3 == 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z3 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z3 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r7 = (org.apache.ambari.server.state.ServiceComponentHost) $r18
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r7 = (org.apache.ambari.server.state.ServiceComponentHost) $r18 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r8 = interfaceinvoke r7.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r8 = interfaceinvoke r7.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r9 = interfaceinvoke r7.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getHostName()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r9 = interfaceinvoke r7.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9)
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z4 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("GANGLIA_SERVER")
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z4 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("GANGLIA_SERVER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z4 == 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z4 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r21 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterGangliaCollectorMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z4 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z5 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("METRICS_COLLECTOR")
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z5 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("METRICS_COLLECTOR") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z5 == 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z5 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r20 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager metricsCollectorHAManager>
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : if $z5 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : goto [?= $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : goto [?= $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r20 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager metricsCollectorHAManager> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : virtualinvoke $r20.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager: void addCollectorHost(java.lang.String,java.lang.String)>(r4, r9)
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : virtualinvoke $r20.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager: void addCollectorHost(java.lang.String,java.lang.String)>(r4, r9) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : goto [?= $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r21 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterGangliaCollectorMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r9)
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r9) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $z5 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("METRICS_COLLECTOR")
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r23 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : specialinvoke $r23.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : specialinvoke $r23.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r26 = $r23
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r26 = $r23 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r24 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHostComponentMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : $r24 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHostComponentMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r23)
org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r23) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.initProviderMaps : r5 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts()>()
