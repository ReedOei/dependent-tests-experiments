org.apache.ambari.server.utils.StageUtilsTest.insertTopology : if r3 == null >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : if r3 == null >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : return
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : if $z0 == 0
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : return
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : r5 = (java.lang.String) $r6
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : r5 = (java.lang.String) $r6 >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : r10 = (java.util.Collection) $r7
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : r10 = (java.util.Collection) $r7 >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : if r10 != null
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : if r10 != null >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $r8 = new java.util.HashSet
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : if r10 != null >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>(r2)
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : $r8 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : specialinvoke $r8.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : specialinvoke $r8.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : r10 = $r8
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : r10 = $r8 >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r8)
org.apache.ambari.server.utils.StageUtilsTest.insertTopology : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r8) >>>>>>>> org.apache.ambari.server.utils.StageUtilsTest.insertTopology : interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>(r2)
