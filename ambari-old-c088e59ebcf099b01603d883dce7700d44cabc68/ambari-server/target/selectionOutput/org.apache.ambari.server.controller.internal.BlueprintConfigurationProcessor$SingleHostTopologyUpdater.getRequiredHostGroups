org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : r5 = specialinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$HostGroupUpdater: java.util.Collection getRequiredHostGroups(java.lang.String,java.lang.String,java.util.Map,org.apache.ambari.server.topology.ClusterTopology)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $z0 = interfaceinvoke r5.<java.util.Collection: boolean isEmpty()>()
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $z0 = interfaceinvoke r5.<java.util.Collection: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if $z0 != 0
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : return r5
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r8 = r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.lang.String component>
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r8 = r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.lang.String component> >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : r6 = interfaceinvoke r4.<org.apache.ambari.server.topology.ClusterTopology: java.util.Collection getHostGroupsForComponent(java.lang.String)>($r8)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : r6 = interfaceinvoke r4.<org.apache.ambari.server.topology.ClusterTopology: java.util.Collection getHostGroupsForComponent(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : i0 = interfaceinvoke r6.<java.util.Collection: int size()>()
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : i0 = interfaceinvoke r6.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if i0 == 0
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if i0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r15 = new java.util.HashSet
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if i0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r9 = interfaceinvoke r4.<org.apache.ambari.server.topology.ClusterTopology: org.apache.ambari.server.topology.Blueprint getBlueprint()>()
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r9 = interfaceinvoke r4.<org.apache.ambari.server.topology.ClusterTopology: org.apache.ambari.server.topology.Blueprint getBlueprint()>() >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r10 = interfaceinvoke $r9.<org.apache.ambari.server.topology.Blueprint: org.apache.ambari.server.controller.internal.Stack getStack()>()
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r10 = interfaceinvoke $r9.<org.apache.ambari.server.topology.Blueprint: org.apache.ambari.server.controller.internal.Stack getStack()>() >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r11 = r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.lang.String component>
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r11 = r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.lang.String component> >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : r7 = virtualinvoke $r10.<org.apache.ambari.server.controller.internal.Stack: org.apache.ambari.server.topology.Cardinality getCardinality(java.lang.String)>($r11)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : r7 = virtualinvoke $r10.<org.apache.ambari.server.controller.internal.Stack: org.apache.ambari.server.topology.Cardinality getCardinality(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $z1 = virtualinvoke r7.<org.apache.ambari.server.topology.Cardinality: boolean isValidCount(int)>(0)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $z1 = virtualinvoke r7.<org.apache.ambari.server.topology.Cardinality: boolean isValidCount(int)>(0) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if $z1 != 0
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r13 = staticinvoke <org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor: org.slf4j.Logger access$600()>()
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r12 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r12 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : return $r12
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r13 = staticinvoke <org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor: org.slf4j.Logger access$600()>() >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r14 = r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.lang.String component>
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r14 = r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.lang.String component> >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("The property \'{}\' is associated with the component \'{}\' which isn\'t mapped to any host group. This may affect configuration topology resolution.", r1, $r14)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("The property \'{}\' is associated with the component \'{}\' which isn\'t mapped to any host group. This may affect configuration topology resolution.", r1, $r14) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r12 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : $r15 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : specialinvoke $r15.<java.util.HashSet: void <init>(java.util.Collection)>(r6)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : specialinvoke $r15.<java.util.HashSet: void <init>(java.util.Collection)>(r6) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater.getRequiredHostGroups : return $r15
