org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r2 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: org.apache.ambari.server.state.scheduler.Batch getBatch()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r35 = null
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r35 = null >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r2 == null
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r2 == null >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r3 = virtualinvoke r2.<org.apache.ambari.server.state.scheduler.Batch: java.util.List getBatchRequests()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r2 == null >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : return r35
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r3 = virtualinvoke r2.<org.apache.ambari.server.state.scheduler.Batch: java.util.List getBatchRequests()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r3 == null
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r3 == null >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : staticinvoke <java.util.Collections: void sort(java.util.List)>(r3)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r3 == null >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : return r35
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : staticinvoke <java.util.Collections: void sort(java.util.List)>(r3) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $i0 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $i0 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r4 = interfaceinvoke r3.<java.util.List: java.util.ListIterator listIterator(int)>($i0)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r4 = interfaceinvoke r3.<java.util.List: java.util.ListIterator listIterator(int)>($i0) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r36 = null
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r36 = null >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasPrevious()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasPrevious()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if $z0 == 0
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if $z0 == 0 >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r9 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object previous()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if $z0 == 0 >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : return r35
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r9 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object previous()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r5 = (org.apache.ambari.server.state.scheduler.BatchRequest) $r9
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r5 = (org.apache.ambari.server.state.scheduler.BatchRequest) $r9 >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r10 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: java.lang.Long getId()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r10 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: java.lang.Long getId()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r11 = virtualinvoke r5.<org.apache.ambari.server.state.scheduler.BatchRequest: java.lang.Long getOrderId()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r11 = virtualinvoke r5.<org.apache.ambari.server.state.scheduler.BatchRequest: java.lang.Long getOrderId()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r6 = virtualinvoke r0.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: java.lang.String getJobName(java.lang.Long,java.lang.Long)>($r10, $r11)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r6 = virtualinvoke r0.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: java.lang.String getJobName(java.lang.Long,java.lang.Long)>($r10, $r11) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r12 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: org.apache.ambari.server.state.scheduler.Batch getBatch()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r12 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: org.apache.ambari.server.state.scheduler.Batch getBatch()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r13 = virtualinvoke $r12.<org.apache.ambari.server.state.scheduler.Batch: org.apache.ambari.server.state.scheduler.BatchSettings getBatchSettings()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r13 = virtualinvoke $r12.<org.apache.ambari.server.state.scheduler.Batch: org.apache.ambari.server.state.scheduler.BatchSettings getBatchSettings()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r7 = virtualinvoke $r13.<org.apache.ambari.server.state.scheduler.BatchSettings: java.lang.Integer getBatchSeparationInSeconds()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r7 = virtualinvoke $r13.<org.apache.ambari.server.state.scheduler.BatchSettings: java.lang.Integer getBatchSeparationInSeconds()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r14 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/apache/ambari/server/state/scheduler/BatchRequestJob;")
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r14 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/apache/ambari/server/state/scheduler/BatchRequestJob;") >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r15 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>(r6, "LinearExecutionJobs")
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r15 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>(r6, "LinearExecutionJobs") >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r16 = virtualinvoke $r15.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("ExecutionJob.Name", r36)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r16 = virtualinvoke $r15.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("ExecutionJob.Name", r36) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r17 = virtualinvoke $r16.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("ExecutionJob.Group", "LinearExecutionJobs")
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r17 = virtualinvoke $r16.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("ExecutionJob.Group", "LinearExecutionJobs") >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r18 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: java.lang.Long getId()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r18 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: java.lang.Long getId()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r19 = virtualinvoke $r17.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.Long)>("BatchRequestJob.ExecutionId", $r18)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r19 = virtualinvoke $r17.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.Long)>("BatchRequestJob.ExecutionId", $r18) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r20 = virtualinvoke r5.<org.apache.ambari.server.state.scheduler.BatchRequest: java.lang.Long getOrderId()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r20 = virtualinvoke r5.<org.apache.ambari.server.state.scheduler.BatchRequest: java.lang.Long getOrderId()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r21 = virtualinvoke $r19.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.Long)>("BatchRequestJob.BatchId", $r20)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r21 = virtualinvoke $r19.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.Long)>("BatchRequestJob.BatchId", $r20) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r22 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: java.lang.String getClusterName()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r22 = interfaceinvoke r1.<org.apache.ambari.server.state.scheduler.RequestExecution: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r23 = virtualinvoke $r21.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("BatchRequestJob.ClusterName", $r22)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r23 = virtualinvoke $r21.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("BatchRequestJob.ClusterName", $r22) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r7 == null
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r7 == null >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $i1 = virtualinvoke r7.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : if r7 == null >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $i1 = 0
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $i1 = 0 >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r26 = virtualinvoke $r23.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.Integer)>("ExecutionJob.SeparationMinutes", $r25)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r26 = virtualinvoke $r23.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.Integer)>("ExecutionJob.SeparationMinutes", $r25) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r27 = virtualinvoke $r26.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r27 = virtualinvoke $r26.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r35 = virtualinvoke $r27.<org.quartz.JobBuilder: org.quartz.JobDetail build()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r35 = virtualinvoke $r27.<org.quartz.JobBuilder: org.quartz.JobDetail build()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r28 = r0.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.scheduler.ExecutionScheduler executionScheduler>
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r28 = r0.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.scheduler.ExecutionScheduler executionScheduler> >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : interfaceinvoke $r28.<org.apache.ambari.server.scheduler.ExecutionScheduler: void addJob(org.quartz.JobDetail)>(r35)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r28 = r0.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.scheduler.ExecutionScheduler executionScheduler> >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r29 := @caughtexception
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r31 = <org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r30 = new java.lang.StringBuilder
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r30 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to add job detail. ")
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to add job detail. ") >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : interfaceinvoke $r31.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r34, $r29)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : interfaceinvoke $r31.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r34, $r29) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r36 = r6
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r36 = r6 >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : goto [?= $z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasPrevious()>()]
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : goto [?= $z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasPrevious()>()] >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasPrevious()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : interfaceinvoke $r28.<org.apache.ambari.server.scheduler.ExecutionScheduler: void addJob(org.quartz.JobDetail)>(r35) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : goto [?= r36 = r6]
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : interfaceinvoke $r28.<org.apache.ambari.server.scheduler.ExecutionScheduler: void addJob(org.quartz.JobDetail)>(r35) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r29 := @caughtexception
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : goto [?= r36 = r6] >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : r36 = r6
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $i1 = virtualinvoke r7.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : goto [?= $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)]
org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : goto [?= $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)] >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.persistBatch : $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
