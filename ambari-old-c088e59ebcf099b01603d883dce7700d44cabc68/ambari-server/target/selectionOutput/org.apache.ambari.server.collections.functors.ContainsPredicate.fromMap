org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if r0 != null >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r27 = null
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if r0 != null >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r27 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("contains")
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r27 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("contains") >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $r27 != null
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $r27 != null >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r26 = new java.lang.IllegalArgumentException
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $r27 != null >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z0 = $r27 instanceof java.util.Collection
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z0 = $r27 instanceof java.util.Collection >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z0 == 0
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z0 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r2 = (java.util.Collection) $r27
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z0 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r6 = new java.lang.IllegalArgumentException
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r6 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r7 = newarray (java.lang.Object)[1]
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r7 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r8 = virtualinvoke $r27.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r8 = virtualinvoke $r27.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r7[0] = $r9
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r7[0] = $r9 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected data type for \'contains\' operation - %s", $r7)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected data type for \'contains\' operation - %s", $r7) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : throw $r6
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r2 = (java.util.Collection) $r27 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $i0 = interfaceinvoke r2.<java.util.Collection: int size()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $i0 != 2
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $i0 != 2 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $i0 != 2 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r11 = new java.lang.IllegalArgumentException
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r11 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r12 = newarray (java.lang.Object)[1]
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r12 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $i1 = interfaceinvoke r2.<java.util.Collection: int size()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r12[0] = $r13
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r12[0] = $r13 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Missing data for \'contains\' operation - 2 predicates are needed, %d found", $r12)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Missing data for \'contains\' operation - 2 predicates are needed, %d found", $r12) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : throw $r11
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z1 = r4 instanceof java.lang.String
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z1 = r4 instanceof java.lang.String >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z1 == 0
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z1 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z2 = r5 instanceof java.lang.String
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z1 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r15 = new java.lang.IllegalArgumentException
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r15 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r16 = newarray (java.lang.Object)[2]
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r16 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r17 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r17 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r16[0] = $r18
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r16[0] = $r18 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r19 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r19 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r16[1] = $r20
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r16[1] = $r20 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected data types: %s and %s", $r16)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected data types: %s and %s", $r16) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : throw $r15
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z2 = r5 instanceof java.lang.String >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z2 == 0
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z2 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r22 = new org.apache.ambari.server.collections.functors.ContainsPredicate
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z2 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r15 = new java.lang.IllegalArgumentException
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r22 = new org.apache.ambari.server.collections.functors.ContainsPredicate >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r23 = new org.apache.ambari.server.collections.functors.ContextTransformer
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r23 = new org.apache.ambari.server.collections.functors.ContextTransformer >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r24 = (java.lang.String) r4
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r24 = (java.lang.String) r4 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r23.<org.apache.ambari.server.collections.functors.ContextTransformer: void <init>(java.lang.String)>($r24)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r23.<org.apache.ambari.server.collections.functors.ContextTransformer: void <init>(java.lang.String)>($r24) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r25 = (java.lang.String) r5
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r25 = (java.lang.String) r5 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r22.<org.apache.ambari.server.collections.functors.ContainsPredicate: void <init>(org.apache.ambari.server.collections.functors.ContextTransformer,java.lang.String)>($r23, $r25)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r22.<org.apache.ambari.server.collections.functors.ContainsPredicate: void <init>(org.apache.ambari.server.collections.functors.ContextTransformer,java.lang.String)>($r23, $r25) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : return $r22
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r26 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing data for \'contains\' operation")
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing data for \'contains\' operation") >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : throw $r26
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r27 = null >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : goto [?= (branch)]
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $r27 != null
