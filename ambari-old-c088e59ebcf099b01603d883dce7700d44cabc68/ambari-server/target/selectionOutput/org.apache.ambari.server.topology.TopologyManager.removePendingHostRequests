org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void ensureInitialized()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r6 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r6 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("TopologyManager.removePendingHostRequests: Entering")
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("TopologyManager.removePendingHostRequests: Entering") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r7 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.AmbariContext ambariContext>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r7 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.AmbariContext ambariContext> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : l3 = virtualinvoke $r7.<org.apache.ambari.server.topology.AmbariContext: long getClusterId(java.lang.String)>(r1)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r7 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.AmbariContext ambariContext> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r31 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r32 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r32.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unable to retrieve clusterId", $r31)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r32.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unable to retrieve clusterId", $r31) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r33 = new java.lang.IllegalArgumentException
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r33 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to retrieve clusterId")
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to retrieve clusterId") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : throw $r33
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : l3 = virtualinvoke $r7.<org.apache.ambari.server.topology.AmbariContext: long getClusterId(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : goto [?= $r8 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map clusterTopologyMap>]
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : l3 = virtualinvoke $r7.<org.apache.ambari.server.topology.AmbariContext: long getClusterId(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r31 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : goto [?= $r8 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map clusterTopologyMap>] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r8 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map clusterTopologyMap>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r8 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map clusterTopologyMap> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r35 = (org.apache.ambari.server.topology.ClusterTopology) $r10
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r35 = (org.apache.ambari.server.topology.ClusterTopology) $r10 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if r35 != null
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if r35 != null >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r30 = new java.lang.IllegalArgumentException
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if r35 != null >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r11 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map allRequests>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r11 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map allRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r2 = (org.apache.ambari.server.topology.LogicalRequest) $r13
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r2 = (org.apache.ambari.server.topology.LogicalRequest) $r13 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if r2 != null
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if r2 != null >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r25 = new java.lang.IllegalArgumentException
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if r2 != null >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r3 = virtualinvoke r2.<org.apache.ambari.server.topology.LogicalRequest: java.util.Collection removePendingHostRequests(java.lang.String)>(null)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r3 = virtualinvoke r2.<org.apache.ambari.server.topology.LogicalRequest: java.util.Collection removePendingHostRequests(java.lang.String)>(null) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $z0 = virtualinvoke r2.<org.apache.ambari.server.topology.LogicalRequest: boolean hasPendingHostRequests()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $z0 = virtualinvoke r2.<org.apache.ambari.server.topology.LogicalRequest: boolean hasPendingHostRequests()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z0 != 0
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z0 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r24 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z0 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r14 = virtualinvoke r2.<org.apache.ambari.server.topology.LogicalRequest: java.util.Collection getHostRequests()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r14 = virtualinvoke r2.<org.apache.ambari.server.topology.LogicalRequest: java.util.Collection getHostRequests()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $z1 = interfaceinvoke $r14.<java.util.Collection: boolean isEmpty()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $z1 = interfaceinvoke $r14.<java.util.Collection: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z1 == 0
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r21 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map allRequests>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState persistedState>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState persistedState> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r15.<org.apache.ambari.server.topology.PersistedState: void removeHostRequests(long,java.util.Collection)>(l0, r3)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r15.<org.apache.ambari.server.topology.PersistedState: void removeHostRequests(long,java.util.Collection)>(l0, r3) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r16 = interfaceinvoke r35.<org.apache.ambari.server.topology.ClusterTopology: java.util.Map getHostGroupInfo()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r16 = interfaceinvoke r35.<org.apache.ambari.server.topology.ClusterTopology: java.util.Map getHostGroupInfo()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z3 == 0
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r19 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r18 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r18 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>("TopologyManager.removePendingHostRequests: Exit")
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>("TopologyManager.removePendingHostRequests: Exit") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : return
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r19 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r5 = (org.apache.ambari.server.topology.HostGroupInfo) $r19
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : r5 = (org.apache.ambari.server.topology.HostGroupInfo) $r19 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r20 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r20 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $i1 = interfaceinvoke $r20.<java.util.Collection: int size()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $i1 = interfaceinvoke $r20.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: void setRequestedCount(int)>($i1)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: void setRequestedCount(int)>($i1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r21 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map allRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r21.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r22)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r21.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState persistedState>
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r24 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r24.<java.util.Collection: boolean remove(java.lang.Object)>(r2)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : interfaceinvoke $r24.<java.util.Collection: boolean remove(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r14 = virtualinvoke r2.<org.apache.ambari.server.topology.LogicalRequest: java.util.Collection getHostRequests()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r25 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r26 = new java.lang.StringBuilder
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r26 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No Logical Request found for requestId: ")
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No Logical Request found for requestId: ") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29)
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : throw $r25
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : $r30 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to retrieve cluster topology for cluster")
org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to retrieve cluster topology for cluster") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removePendingHostRequests : throw $r30
