org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$OptionalSingleHostTopologyUpdater.getRequiredHostGroups : $r8 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$OptionalSingleHostTopologyUpdater.getRequiredHostGroups : return $r8
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$OptionalSingleHostTopologyUpdater.getRequiredHostGroups : $r6 = specialinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.util.Collection getRequiredHostGroups(java.lang.String,java.lang.String,java.util.Map,org.apache.ambari.server.topology.ClusterTopology)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$OptionalSingleHostTopologyUpdater.getRequiredHostGroups : return $r6
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$OptionalSingleHostTopologyUpdater.getRequiredHostGroups : $r6 = specialinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.util.Collection getRequiredHostGroups(java.lang.String,java.lang.String,java.util.Map,org.apache.ambari.server.topology.ClusterTopology)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$OptionalSingleHostTopologyUpdater.getRequiredHostGroups : $r7 := @caughtexception
