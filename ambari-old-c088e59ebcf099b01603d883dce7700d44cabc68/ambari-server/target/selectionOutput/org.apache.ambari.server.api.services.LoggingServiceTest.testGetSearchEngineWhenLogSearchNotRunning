org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r13 = new org.easymock.EasyMockSupport >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : specialinvoke $r13.<org.easymock.EasyMockSupport: void <init>()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : specialinvoke $r13.<org.easymock.EasyMockSupport: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r14 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/api/services/LoggingService$ControllerFactory;")
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r14 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/api/services/LoggingService$ControllerFactory;") >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r5 = (org.apache.ambari.server.api.services.LoggingService$ControllerFactory) $r14
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r5 = (org.apache.ambari.server.api.services.LoggingService$ControllerFactory) $r14 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r15 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;")
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r15 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;") >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r6 = (org.apache.ambari.server.controller.AmbariManagementController) $r15
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r6 = (org.apache.ambari.server.controller.AmbariManagementController) $r15 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r16 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;")
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r16 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;") >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r7 = (org.apache.ambari.server.state.Clusters) $r16
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r7 = (org.apache.ambari.server.state.Clusters) $r16 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r17 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;")
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r17 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;") >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r8 = (org.apache.ambari.server.state.Cluster) $r17
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r8 = (org.apache.ambari.server.state.Cluster) $r17 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r18 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/logging/LoggingRequestHelperFactory;")
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r18 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/logging/LoggingRequestHelperFactory;") >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r9 = (org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory) $r18
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r9 = (org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory) $r18 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r19 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Ljavax/ws/rs/core/UriInfo;")
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r19 = virtualinvoke $r13.<org.easymock.EasyMockSupport: java.lang.Object createMock(java.lang.Class)>(class "Ljavax/ws/rs/core/UriInfo;") >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r10 = (javax.ws.rs.core.UriInfo) $r19
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r10 = (javax.ws.rs.core.UriInfo) $r19 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : if z0 == 0
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : if z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r41 = interfaceinvoke r10.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : if z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r20 = interfaceinvoke r5.<org.apache.ambari.server.api.services.LoggingService$ControllerFactory: org.apache.ambari.server.controller.AmbariManagementController getController()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r20 = interfaceinvoke r5.<org.apache.ambari.server.api.services.LoggingService$ControllerFactory: org.apache.ambari.server.controller.AmbariManagementController getController()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r21 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r20)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r21 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r20) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r22 = interfaceinvoke $r21.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r6)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r22 = interfaceinvoke $r21.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r22.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r22.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r24 = interfaceinvoke r6.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r24 = interfaceinvoke r6.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r25 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r24)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r25 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r24) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r26 = interfaceinvoke $r25.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r7)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r26 = interfaceinvoke $r25.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r26.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters once()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r26.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters once()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r28 = interfaceinvoke r7.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>("clusterone")
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r28 = interfaceinvoke r7.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>("clusterone") >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r29 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r28)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r29 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r28) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r30 = interfaceinvoke $r29.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r8)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r30 = interfaceinvoke $r29.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r30.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters once()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r30.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters once()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r32 = interfaceinvoke r8.<org.apache.ambari.server.state.Cluster: java.lang.Long getResourceId()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r32 = interfaceinvoke r8.<org.apache.ambari.server.state.Cluster: java.lang.Long getResourceId()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r33 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r32)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r33 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r32) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r35 = interfaceinvoke $r33.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r34)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r35 = interfaceinvoke $r33.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r34) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r35.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters once()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r35.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters once()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : virtualinvoke $r13.<org.easymock.EasyMockSupport: void replayAll()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : virtualinvoke $r13.<org.easymock.EasyMockSupport: void replayAll()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.apache.ambari.server.security.authorization.AuthorizationHelperInitializer: void viewInstanceDAOReturningNull()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.apache.ambari.server.security.authorization.AuthorizationHelperInitializer: void viewInstanceDAOReturningNull()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r37 = staticinvoke <org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r37 = staticinvoke <org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r37.<org.springframework.security.core.context.SecurityContext: void setAuthentication(org.springframework.security.core.Authentication)>(r1)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r37.<org.springframework.security.core.context.SecurityContext: void setAuthentication(org.springframework.security.core.Authentication)>(r1) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r38 = new org.apache.ambari.server.api.services.LoggingService
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r38 = new org.apache.ambari.server.api.services.LoggingService >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : specialinvoke $r38.<org.apache.ambari.server.api.services.LoggingService: void <init>(java.lang.String,org.apache.ambari.server.api.services.LoggingService$ControllerFactory)>("clusterone", r5)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : specialinvoke $r38.<org.apache.ambari.server.api.services.LoggingService: void <init>(java.lang.String,org.apache.ambari.server.api.services.LoggingService$ControllerFactory)>("clusterone", r5) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : virtualinvoke $r38.<org.apache.ambari.server.api.services.LoggingService: void setLoggingRequestHelperFactory(org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory)>(r9)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : virtualinvoke $r38.<org.apache.ambari.server.api.services.LoggingService: void setLoggingRequestHelperFactory(org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory)>(r9) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r12 = virtualinvoke $r38.<org.apache.ambari.server.api.services.LoggingService: javax.ws.rs.core.Response getSearchEngine(java.lang.String,javax.ws.rs.core.HttpHeaders,javax.ws.rs.core.UriInfo)>("", null, r10)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : r12 = virtualinvoke $r38.<org.apache.ambari.server.api.services.LoggingService: javax.ws.rs.core.Response getSearchEngine(java.lang.String,javax.ws.rs.core.HttpHeaders,javax.ws.rs.core.UriInfo)>("", null, r10) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("The response returned by the LoggingService should not have been null", r12)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("The response returned by the LoggingService should not have been null", r12) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : if z0 == 0
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : if z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $i2 = virtualinvoke r12.<javax.ws.rs.core.Response: int getStatus()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : if z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $i0 = virtualinvoke r12.<javax.ws.rs.core.Response: int getStatus()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $i0 = virtualinvoke r12.<javax.ws.rs.core.Response: int getStatus()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $l1 = (long) $i0
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $l1 = (long) $i0 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("A FORBIDDEN status should have been returned", 403L, $l1)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("A FORBIDDEN status should have been returned", 403L, $l1) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : virtualinvoke $r13.<org.easymock.EasyMockSupport: void verifyAll()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : virtualinvoke $r13.<org.easymock.EasyMockSupport: void verifyAll()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : return
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $i2 = virtualinvoke r12.<javax.ws.rs.core.Response: int getStatus()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $l3 = (long) $i2
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $l3 = (long) $i2 >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("An OK status should have been returned", 404L, $l3)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("An OK status should have been returned", 404L, $l3) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r39 = virtualinvoke r12.<javax.ws.rs.core.Response: java.lang.Object getEntity()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r39 = virtualinvoke r12.<javax.ws.rs.core.Response: java.lang.Object getEntity()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("A non-null Entity should have been returned", $r39)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("A non-null Entity should have been returned", $r39) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r40 = virtualinvoke r12.<javax.ws.rs.core.Response: java.lang.Object getEntity()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r40 = virtualinvoke r12.<javax.ws.rs.core.Response: java.lang.Object getEntity()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Expected error message was not included in the response", "LogSearch is not currently available.  If LogSearch is deployed in this cluster, please verify that the LogSearch services are running.", $r40)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Expected error message was not included in the response", "LogSearch is not currently available.  If LogSearch is deployed in this cluster, please verify that the LogSearch services are running.", $r40) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : goto [?= virtualinvoke $r13.<org.easymock.EasyMockSupport: void verifyAll()>()]
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : goto [?= virtualinvoke $r13.<org.easymock.EasyMockSupport: void verifyAll()>()] >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : virtualinvoke $r13.<org.easymock.EasyMockSupport: void verifyAll()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r41 = interfaceinvoke r10.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r42 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r41)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r42 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r41) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r43 = new com.sun.jersey.core.util.MultivaluedMapImpl
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r43 = new com.sun.jersey.core.util.MultivaluedMapImpl >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : specialinvoke $r43.<com.sun.jersey.core.util.MultivaluedMapImpl: void <init>()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : specialinvoke $r43.<com.sun.jersey.core.util.MultivaluedMapImpl: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r44 = interfaceinvoke $r42.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r43)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r44 = interfaceinvoke $r42.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r43) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r44.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r44.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r46 = interfaceinvoke r9.<org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory: org.apache.ambari.server.controller.logging.LoggingRequestHelper getHelper(org.apache.ambari.server.controller.AmbariManagementController,java.lang.String)>(r6, "clusterone")
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r46 = interfaceinvoke r9.<org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory: org.apache.ambari.server.controller.logging.LoggingRequestHelper getHelper(org.apache.ambari.server.controller.AmbariManagementController,java.lang.String)>(r6, "clusterone") >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r47 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r46)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r47 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r46) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r48 = interfaceinvoke $r47.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(null)
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r48 = interfaceinvoke $r47.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(null) >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r48.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : interfaceinvoke $r48.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.api.services.LoggingServiceTest.testGetSearchEngineWhenLogSearchNotRunning : $r20 = interfaceinvoke r5.<org.apache.ambari.server.api.services.LoggingService$ControllerFactory: org.apache.ambari.server.controller.AmbariManagementController getController()>()
