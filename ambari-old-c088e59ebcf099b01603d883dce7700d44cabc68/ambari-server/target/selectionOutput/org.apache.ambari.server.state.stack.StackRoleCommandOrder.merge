org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r16 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : specialinvoke $r16.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : specialinvoke $r16.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r3 = virtualinvoke r1.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap getContent()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r3 = virtualinvoke r1.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap getContent()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17 = newarray (java.lang.String)[6]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17 = newarray (java.lang.String)[6] >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[0] = "general_deps"
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[0] = "general_deps" >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[1] = "optional_glusterfs"
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[1] = "optional_glusterfs" >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[2] = "optional_no_glusterfs"
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[2] = "optional_no_glusterfs" >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[3] = "namenode_optional_ha"
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[3] = "namenode_optional_ha" >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[4] = "resourcemanager_optional_ha"
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[4] = "resourcemanager_optional_ha" >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[5] = "host_ordered_upgrade"
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r17[5] = "host_ordered_upgrade" >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z1 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r18 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content> = $r16
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content> = $r16 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : return
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r18 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r6 = (java.lang.String) $r18
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r6 = (java.lang.String) $r18 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z2 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z2 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z2 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r23 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content>
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r19 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content>
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r19 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content> >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z3 = virtualinvoke $r19.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z3 = virtualinvoke $r19.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z3 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r21 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content>
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z4 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z4 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z4 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r20 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r20 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r20)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r20) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r21 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content> >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r22 = virtualinvoke $r21.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r22 = virtualinvoke $r21.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r22)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r22) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= (branch)]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r23 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content> >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z5 = virtualinvoke $r23.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z5 = virtualinvoke $r23.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z5 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r24 = new java.util.HashMap
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r19 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content>
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r24 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : specialinvoke $r24.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : specialinvoke $r24.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r25 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r25 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r8 = (java.util.Map) $r25
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r8 = (java.util.Map) $r25 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r26 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content>
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r26 = r0.<org.apache.ambari.server.state.stack.StackRoleCommandOrder: java.util.HashMap content> >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r27 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r27 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r9 = (java.util.Map) $r27
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r9 = (java.util.Map) $r27 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r28 = new org.apache.commons.collections.map.MultiValueMap
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r28 = new org.apache.commons.collections.map.MultiValueMap >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : specialinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: void <init>()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : specialinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: void putAll(java.util.Map)>(r9)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: void putAll(java.util.Map)>(r9) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: void putAll(java.util.Map)>(r8)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: void putAll(java.util.Map)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r29 = virtualinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: java.util.Set keySet()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r29 = virtualinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r10 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r10 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z6 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z6 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z6 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z6 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z6 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r24)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r24) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= (branch)]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r30 = virtualinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: java.lang.Object get(java.lang.Object)>(r11)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r30 = virtualinvoke $r28.<org.apache.commons.collections.map.MultiValueMap: java.lang.Object get(java.lang.Object)>(r11) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r12 = (java.util.List) $r30
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r12 = (java.util.List) $r30 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r36 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r36 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if z0 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r32 = new java.util.ArrayList
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r31 = (java.lang.String) r11
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r31 = (java.lang.String) r11 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, r36)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, r36) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z6 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z6 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z6 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r32 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : specialinvoke $r32.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : specialinvoke $r32.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r14 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r14 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z7 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z7 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z7 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r36 = $r32
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r36 = $r32 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r31 = (java.lang.String) r11
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z8 = r15 instanceof java.util.List
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z8 = r15 instanceof java.util.List >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z8 == 0
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r34 = (java.util.List) r15
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r33 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r33 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : interfaceinvoke $r32.<java.util.List: boolean add(java.lang.Object)>($r33)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : interfaceinvoke $r32.<java.util.List: boolean add(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z7 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z7 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $z7 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : $r34 = (java.util.List) r15 >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : interfaceinvoke $r32.<java.util.List: boolean addAll(java.util.Collection)>($r34)
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : interfaceinvoke $r32.<java.util.List: boolean addAll(java.util.Collection)>($r34) >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= (branch)]
org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.stack.StackRoleCommandOrder.merge : goto [?= $z7 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]
