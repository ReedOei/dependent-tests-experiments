org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r5 = <org.apache.ambari.server.orm.db.DDLTests: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Comparing {} against Postgres", r0)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Comparing {} against Postgres", r0) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r1 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: org.apache.ambari.server.orm.db.DDL getDdl(java.lang.String)>("Postgres")
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r1 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: org.apache.ambari.server.orm.db.DDL getDdl(java.lang.String)>("Postgres") >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r2 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: org.apache.ambari.server.orm.db.DDL getDdl(java.lang.String)>(r0)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r2 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: org.apache.ambari.server.orm.db.DDL getDdl(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r3 = staticinvoke <org.apache.ambari.server.orm.db.DDLTests: java.util.List compareDdls(org.apache.ambari.server.orm.db.DDL,org.apache.ambari.server.orm.db.DDL)>(r1, r2)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r3 = staticinvoke <org.apache.ambari.server.orm.db.DDLTests: java.util.List compareDdls(org.apache.ambari.server.orm.db.DDL,org.apache.ambari.server.orm.db.DDL)>(r1, r2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : if $z0 == 0
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r22 = <org.apache.ambari.server.orm.db.DDLTests: org.slf4j.Logger LOG>
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r6 = <org.apache.ambari.server.orm.db.DDLTests: org.slf4j.Logger LOG>
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r6 = <org.apache.ambari.server.orm.db.DDLTests: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $i0 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $i0 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("{} differences found:", $r7)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("{} differences found:", $r7) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r23 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r23 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : if $z1 == 0
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : if $z1 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r20 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : if $z1 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r8 = new java.lang.StringBuilder
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found ")
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found ") >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $i1 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $i1 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" differences when comparing ")
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" differences when comparing ") >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" against Postgres:")
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" against Postgres:") >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r14 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r14 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r16 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r16 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r17 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r3, $r16)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r17 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r3, $r16) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r19 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r19 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r19)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : return
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r20 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r4 = (java.lang.String) $r20
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : r4 = (java.lang.String) $r20 >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r21 = <org.apache.ambari.server.orm.db.DDLTests: org.slf4j.Logger LOG>
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r21 = <org.apache.ambari.server.orm.db.DDLTests: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>(r4)
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : goto [?= $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : goto [?= $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : $r22 = <org.apache.ambari.server.orm.db.DDLTests: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>("Compare OK.")
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>("Compare OK.") >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : goto [?= return]
org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : goto [?= return] >>>>>>>> org.apache.ambari.server.orm.db.DDLTests.compareAgainstPostgres : return
