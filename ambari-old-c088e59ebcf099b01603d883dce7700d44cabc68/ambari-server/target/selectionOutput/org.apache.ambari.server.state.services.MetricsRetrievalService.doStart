org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r2 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i0 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceCacheTimeout()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i0 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceCacheTimeout()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r3 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r3 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $l5 = (long) i0
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $l5 = (long) i0 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r5 = virtualinvoke $r3.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l5, $r4)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r5 = virtualinvoke $r3.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l5, $r4) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r6 = virtualinvoke $r5.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r6 = virtualinvoke $r5.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: com.google.common.cache.Cache m_jmxCache> = $r6
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: com.google.common.cache.Cache m_jmxCache> = $r6 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r7 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r7 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $l6 = (long) i0
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $l6 = (long) i0 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r9 = virtualinvoke $r7.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l6, $r8)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r9 = virtualinvoke $r7.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l6, $r8) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r10 = virtualinvoke $r9.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r10 = virtualinvoke $r9.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: com.google.common.cache.Cache m_restCache> = $r10
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: com.google.common.cache.Cache m_restCache> = $r10 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r11 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r11 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i1 = virtualinvoke $r11.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceRequestTTL()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i1 = virtualinvoke $r11.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceRequestTTL()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r12 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r12 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : z0 = virtualinvoke $r12.<org.apache.ambari.server.configuration.Configuration: boolean isMetricsServiceRequestTTLCacheEnabled()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : z0 = virtualinvoke $r12.<org.apache.ambari.server.configuration.Configuration: boolean isMetricsServiceRequestTTLCacheEnabled()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : if z0 == 0
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r37 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r13 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r13 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i2 = virtualinvoke $r13.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceThreadPoolCoreSize()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i2 = virtualinvoke $r13.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceThreadPoolCoreSize()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r14 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r14 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i3 = virtualinvoke $r14.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceThreadPoolMaxSize()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i3 = virtualinvoke $r14.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceThreadPoolMaxSize()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r15 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r15 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $i7 = virtualinvoke $r15.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceWorkerQueueSize()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $i7 = virtualinvoke $r15.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceWorkerQueueSize()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: int m_queueMaximumSize> = $i7
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: int m_queueMaximumSize> = $i7 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r16 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r16 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i4 = virtualinvoke $r16.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceThreadPriority()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : i4 = virtualinvoke $r16.<org.apache.ambari.server.configuration.Configuration: int getMetricsServiceThreadPriority()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r17 = new org.apache.ambari.server.controller.utilities.ScalingThreadPoolExecutor
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r17 = new org.apache.ambari.server.controller.utilities.ScalingThreadPoolExecutor >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $i8 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: int m_queueMaximumSize>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $i8 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: int m_queueMaximumSize> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : specialinvoke $r17.<org.apache.ambari.server.controller.utilities.ScalingThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,int)>(i2, i3, 30L, $r18, $i8)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : specialinvoke $r17.<org.apache.ambari.server.controller.utilities.ScalingThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,int)>(i2, i3, 30L, $r18, $i8) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: java.util.concurrent.ThreadPoolExecutor m_threadPoolExecutor> = $r17
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: java.util.concurrent.ThreadPoolExecutor m_threadPoolExecutor> = $r17 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r19 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: java.util.concurrent.ThreadPoolExecutor m_threadPoolExecutor>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r19 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: java.util.concurrent.ThreadPoolExecutor m_threadPoolExecutor> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : virtualinvoke $r19.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : virtualinvoke $r19.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r21 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: java.util.concurrent.ThreadPoolExecutor m_threadPoolExecutor>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r21 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: java.util.concurrent.ThreadPoolExecutor m_threadPoolExecutor> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r20 = new java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r20 = new java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : specialinvoke $r20.<java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy: void <init>()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : specialinvoke $r20.<java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy: void <init>()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : virtualinvoke $r21.<java.util.concurrent.ThreadPoolExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)>($r20)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : virtualinvoke $r21.<java.util.concurrent.ThreadPoolExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)>($r20) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r22 = new com.google.common.util.concurrent.ThreadFactoryBuilder
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r22 = new com.google.common.util.concurrent.ThreadFactoryBuilder >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : specialinvoke $r22.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : specialinvoke $r22.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r23 = virtualinvoke $r22.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)>(1)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r23 = virtualinvoke $r22.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)>(1) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r24 = virtualinvoke $r23.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("ambari-metrics-retrieval-service-thread-%d")
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r24 = virtualinvoke $r23.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("ambari-metrics-retrieval-service-thread-%d") >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r25 = virtualinvoke $r24.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int)>(i4)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r25 = virtualinvoke $r24.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int)>(i4) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r26 = new org.apache.ambari.server.state.services.MetricsRetrievalService$MetricRunnableExceptionHandler
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r26 = new org.apache.ambari.server.state.services.MetricsRetrievalService$MetricRunnableExceptionHandler >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : specialinvoke $r26.<org.apache.ambari.server.state.services.MetricsRetrievalService$MetricRunnableExceptionHandler: void <init>(org.apache.ambari.server.state.services.MetricsRetrievalService$1)>(null)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : specialinvoke $r26.<org.apache.ambari.server.state.services.MetricsRetrievalService$MetricRunnableExceptionHandler: void <init>(org.apache.ambari.server.state.services.MetricsRetrievalService$1)>(null) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r27 = virtualinvoke $r25.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r26)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r27 = virtualinvoke $r25.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r26) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r1 = virtualinvoke $r27.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r1 = virtualinvoke $r27.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r28 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: java.util.concurrent.ThreadPoolExecutor m_threadPoolExecutor>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r28 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: java.util.concurrent.ThreadPoolExecutor m_threadPoolExecutor> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : virtualinvoke $r28.<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>(r1)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : virtualinvoke $r28.<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>(r1) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r30 = <org.apache.ambari.server.state.services.MetricsRetrievalService: org.slf4j.Logger LOG>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r30 = <org.apache.ambari.server.state.services.MetricsRetrievalService: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29 = newarray (java.lang.Object)[4]
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29[0] = $r31
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29[0] = $r31 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29[1] = $r32
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29[1] = $r32 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $i9 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: int m_queueMaximumSize>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $i9 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: int m_queueMaximumSize> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29[2] = $r33
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29[2] = $r33 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29[3] = $r34
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r29[3] = $r34 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : interfaceinvoke $r30.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Initializing the Metrics Retrieval Service with core={}, max={}, workerQueue={}, threadPriority={}", $r29)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : interfaceinvoke $r30.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Initializing the Metrics Retrieval Service with core={}, max={}, workerQueue={}, threadPriority={}", $r29) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : if z0 == 0
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r35 = <org.apache.ambari.server.state.services.MetricsRetrievalService: org.slf4j.Logger LOG>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : return
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r35 = <org.apache.ambari.server.state.services.MetricsRetrievalService: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : interfaceinvoke $r35.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Metrics Retrieval Service request TTL cache is enabled and set to {} seconds", $r36)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : interfaceinvoke $r35.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Metrics Retrieval Service request TTL cache is enabled and set to {} seconds", $r36) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : return
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r37 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $l10 = (long) i1
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $l10 = (long) i1 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r38 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r38 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r39 = virtualinvoke $r37.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l10, $r38)
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r39 = virtualinvoke $r37.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l10, $r38) >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r40 = virtualinvoke $r39.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>()
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r40 = virtualinvoke $r39.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>() >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: com.google.common.cache.Cache m_ttlUrlCache> = $r40
org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: com.google.common.cache.Cache m_ttlUrlCache> = $r40 >>>>>>>> org.apache.ambari.server.state.services.MetricsRetrievalService.doStart : $r13 = r0.<org.apache.ambari.server.state.services.MetricsRetrievalService: org.apache.ambari.server.configuration.Configuration m_configuration>
