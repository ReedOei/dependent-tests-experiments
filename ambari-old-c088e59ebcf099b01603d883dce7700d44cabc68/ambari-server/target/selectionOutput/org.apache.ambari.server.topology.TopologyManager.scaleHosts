org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void ensureInitialized()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r6 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r6 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("TopologyManager.scaleHosts: Entering")
org.apache.ambari.server.topology.TopologyManager.scaleHosts : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("TopologyManager.scaleHosts: Entering") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.internal.ScaleClusterRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.topology.TopologyManager.scaleHosts : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.internal.ScaleClusterRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r7 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.AmbariContext ambariContext>
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r7 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.AmbariContext ambariContext> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : l0 = virtualinvoke $r7.<org.apache.ambari.server.topology.AmbariContext: long getClusterId(java.lang.String)>(r2)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : l0 = virtualinvoke $r7.<org.apache.ambari.server.topology.AmbariContext: long getClusterId(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r8 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map clusterTopologyMap>
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r8 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map clusterTopologyMap> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : r3 = (org.apache.ambari.server.topology.ClusterTopology) $r10
org.apache.ambari.server.topology.TopologyManager.scaleHosts : r3 = (org.apache.ambari.server.topology.ClusterTopology) $r10 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : if r3 != null
org.apache.ambari.server.topology.TopologyManager.scaleHosts : if r3 != null >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r16 = new org.apache.ambari.server.topology.InvalidTopologyException
org.apache.ambari.server.topology.TopologyManager.scaleHosts : if r3 != null >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void hostNameCheck(org.apache.ambari.server.controller.internal.ScaleClusterRequest,org.apache.ambari.server.topology.ClusterTopology)>(r1, r3)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void hostNameCheck(org.apache.ambari.server.controller.internal.ScaleClusterRequest,org.apache.ambari.server.topology.ClusterTopology)>(r1, r3) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : virtualinvoke r1.<org.apache.ambari.server.controller.internal.ScaleClusterRequest: void setClusterId(java.lang.Long)>($r11)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : virtualinvoke r1.<org.apache.ambari.server.controller.internal.ScaleClusterRequest: void setClusterId(java.lang.Long)>($r11) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : interfaceinvoke r3.<org.apache.ambari.server.topology.ClusterTopology: void update(org.apache.ambari.server.topology.TopologyRequest)>(r1)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : interfaceinvoke r3.<org.apache.ambari.server.topology.ClusterTopology: void update(org.apache.ambari.server.topology.TopologyRequest)>(r1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r12 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.AmbariContext ambariContext>
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r12 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.AmbariContext ambariContext> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : r4 = virtualinvoke $r12.<org.apache.ambari.server.topology.AmbariContext: java.lang.Long getNextRequestId()>()
org.apache.ambari.server.topology.TopologyManager.scaleHosts : r4 = virtualinvoke $r12.<org.apache.ambari.server.topology.AmbariContext: java.lang.Long getNextRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r13 = new org.apache.ambari.server.topology.TopologyManager$2
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r13 = new org.apache.ambari.server.topology.TopologyManager$2 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke $r13.<org.apache.ambari.server.topology.TopologyManager$2: void <init>(org.apache.ambari.server.topology.TopologyManager,org.apache.ambari.server.controller.internal.ScaleClusterRequest,org.apache.ambari.server.topology.ClusterTopology,java.lang.Long)>(r0, r1, r3, r4)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke $r13.<org.apache.ambari.server.topology.TopologyManager$2: void <init>(org.apache.ambari.server.topology.TopologyManager,org.apache.ambari.server.controller.internal.ScaleClusterRequest,org.apache.ambari.server.topology.ClusterTopology,java.lang.Long)>(r0, r1, r3, r4) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r14 = staticinvoke <org.apache.ambari.server.utils.RetryHelper: java.lang.Object executeWithRetry(java.util.concurrent.Callable)>($r13)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r14 = staticinvoke <org.apache.ambari.server.utils.RetryHelper: java.lang.Object executeWithRetry(java.util.concurrent.Callable)>($r13) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : r5 = (org.apache.ambari.server.topology.LogicalRequest) $r14
org.apache.ambari.server.topology.TopologyManager.scaleHosts : r5 = (org.apache.ambari.server.topology.LogicalRequest) $r14 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void processRequest(org.apache.ambari.server.topology.TopologyRequest,org.apache.ambari.server.topology.ClusterTopology,org.apache.ambari.server.topology.LogicalRequest)>(r1, r3, r5)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void processRequest(org.apache.ambari.server.topology.TopologyRequest,org.apache.ambari.server.topology.ClusterTopology,org.apache.ambari.server.topology.LogicalRequest)>(r1, r3, r5) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $l1 = virtualinvoke r5.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $l1 = virtualinvoke r5.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r15 = virtualinvoke r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.controller.RequestStatusResponse getRequestStatus(long)>($l1)
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r15 = virtualinvoke r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.controller.RequestStatusResponse getRequestStatus(long)>($l1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : return $r15
org.apache.ambari.server.topology.TopologyManager.scaleHosts : $r16 = new org.apache.ambari.server.topology.InvalidTopologyException >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke $r16.<org.apache.ambari.server.topology.InvalidTopologyException: void <init>(java.lang.String)>("Unable to retrieve cluster topology for cluster. This is most likely a result of trying to scale a cluster via the API which was created using the Ambari UI. At this time only clusters created via the API using a blueprint can be scaled with this API.  If the cluster was originally created via the API as described above, please file a Jira for this matter.")
org.apache.ambari.server.topology.TopologyManager.scaleHosts : specialinvoke $r16.<org.apache.ambari.server.topology.InvalidTopologyException: void <init>(java.lang.String)>("Unable to retrieve cluster topology for cluster. This is most likely a result of trying to scale a cluster via the API which was created using the Ambari UI. At this time only clusters created via the API using a blueprint can be scaled with this API.  If the cluster was originally created via the API as described above, please file a Jira for this matter.") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.scaleHosts : throw $r16
