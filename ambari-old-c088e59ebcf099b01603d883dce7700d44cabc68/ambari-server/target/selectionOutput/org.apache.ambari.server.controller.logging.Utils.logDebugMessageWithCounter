org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() >>>>>>>> org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : if $i1 != 0
org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : if $i1 != 0 >>>>>>>> org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : interfaceinvoke r0.<org.slf4j.Logger: void debug(java.lang.String)>(r2)
org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : if $i1 != 0 >>>>>>>> org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, 0)
org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, 0) >>>>>>>> org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : return
org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : interfaceinvoke r0.<org.slf4j.Logger: void debug(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : goto [?= return]
org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : goto [?= return] >>>>>>>> org.apache.ambari.server.controller.logging.Utils.logDebugMessageWithCounter : return
