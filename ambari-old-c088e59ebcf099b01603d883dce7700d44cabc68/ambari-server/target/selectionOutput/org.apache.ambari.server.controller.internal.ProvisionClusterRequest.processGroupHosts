org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if r2 == null >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $i1 = virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>()
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if r2 == null >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $i0 = virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>()
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $i0 = virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>() >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $i0 != 0
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $i0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r6 = new org.apache.ambari.server.topology.InvalidTopologyTemplateException
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $i0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : return
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r6 = new org.apache.ambari.server.topology.InvalidTopologyTemplateException >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r7 = newarray (java.lang.Object)[1]
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r7 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r7[0] = r1
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r7[0] = r1 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Host group \'%s\' must contain at least one \'hosts/fqdn\' or a \'host_count\' value", $r7)
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Host group \'%s\' must contain at least one \'hosts/fqdn\' or a \'host_count\' value", $r7) >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : specialinvoke $r6.<org.apache.ambari.server.topology.InvalidTopologyTemplateException: void <init>(java.lang.String)>($r8)
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : specialinvoke $r6.<org.apache.ambari.server.topology.InvalidTopologyTemplateException: void <init>(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : throw $r6
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $i1 = virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>() >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $i1 == 0
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $i1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r20 = new org.apache.ambari.server.topology.InvalidTopologyTemplateException
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $i1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r9 = virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: org.apache.ambari.server.controller.spi.Predicate getPredicate()>()
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r9 = virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: org.apache.ambari.server.controller.spi.Predicate getPredicate()>() >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $r9 == null
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $r9 == null >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r17 = new org.apache.ambari.server.topology.InvalidTopologyTemplateException
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $r9 == null >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z0 == 0
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $i0 = virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>()
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : r5 = (java.util.Map) $r10
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : r5 = (java.util.Map) $r10 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $z1 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("fqdn")
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $z1 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("fqdn") >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z1 == 0
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r15 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("fqdn")
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("rack_info")
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("rack_info") >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z2 == 0
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z2 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r11 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("fqdn")
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : if $z2 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r11 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("fqdn") >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r12 = (java.lang.String) $r11
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r12 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r13 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("rack_info")
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r13 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("rack_info") >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r14 = (java.lang.String) $r13
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r14 = (java.lang.String) $r13 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: void addHostRackInfo(java.lang.String,java.lang.String)>($r12, $r14)
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: void addHostRackInfo(java.lang.String,java.lang.String)>($r12, $r14) >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r15 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("fqdn") >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r16 = (java.lang.String) $r15
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r16 = (java.lang.String) $r15 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: void addHost(java.lang.String)>($r16)
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : virtualinvoke r3.<org.apache.ambari.server.topology.HostGroupInfo: void addHost(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("rack_info")
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r17 = new org.apache.ambari.server.topology.InvalidTopologyTemplateException >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r18 = newarray (java.lang.Object)[1]
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r18 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r18[0] = r1
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r18[0] = r1 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Host group \'%s\' must not contain both a \'hosts\' element and a \'host_predicate\' value", $r18)
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Host group \'%s\' must not contain both a \'hosts\' element and a \'host_predicate\' value", $r18) >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : specialinvoke $r17.<org.apache.ambari.server.topology.InvalidTopologyTemplateException: void <init>(java.lang.String)>($r19)
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : specialinvoke $r17.<org.apache.ambari.server.topology.InvalidTopologyTemplateException: void <init>(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : throw $r17
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r20 = new org.apache.ambari.server.topology.InvalidTopologyTemplateException >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r21 = newarray (java.lang.Object)[1]
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r21 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r21[0] = r1
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r21[0] = r1 >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Host group \'%s\' must not contain both a \'hosts\' element and a \'host_count\' value", $r21)
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Host group \'%s\' must not contain both a \'hosts\' element and a \'host_count\' value", $r21) >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : specialinvoke $r20.<org.apache.ambari.server.topology.InvalidTopologyTemplateException: void <init>(java.lang.String)>($r22)
org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : specialinvoke $r20.<org.apache.ambari.server.topology.InvalidTopologyTemplateException: void <init>(java.lang.String)>($r22) >>>>>>>> org.apache.ambari.server.controller.internal.ProvisionClusterRequest.processGroupHosts : throw $r20
