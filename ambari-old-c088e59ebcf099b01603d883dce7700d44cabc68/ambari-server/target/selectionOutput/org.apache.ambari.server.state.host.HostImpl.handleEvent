org.apache.ambari.server.state.host.HostImpl.handleEvent : $r5 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : if $z0 == 0
org.apache.ambari.server.state.host.HostImpl.handleEvent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r20 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.host.HostImpl.handleEvent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : r2 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : r2 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r6 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock>
org.apache.ambari.server.state.host.HostImpl.handleEvent : r2 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r39 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r39.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r39.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : throw $r38
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r6 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r6 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r7 = r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.fsm.StateMachine stateMachine>
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r7 = r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.fsm.StateMachine stateMachine> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r24 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r7 = r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.fsm.StateMachine stateMachine> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r7 = r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.fsm.StateMachine stateMachine> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r24 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r7.<org.apache.ambari.server.state.fsm.StateMachine: java.lang.Enum doTransition(java.lang.Enum,java.lang.Object)>($r8, r1)
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r7.<org.apache.ambari.server.state.fsm.StateMachine: java.lang.Enum doTransition(java.lang.Enum,java.lang.Object)>($r8, r1) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r24 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r7.<org.apache.ambari.server.state.fsm.StateMachine: java.lang.Enum doTransition(java.lang.Enum,java.lang.Object)>($r8, r1) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r7.<org.apache.ambari.server.state.fsm.StateMachine: java.lang.Enum doTransition(java.lang.Enum,java.lang.Object)>($r8, r1) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : goto [?= $r10 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock>]
org.apache.ambari.server.state.host.HostImpl.handleEvent : goto [?= $r10 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock>] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r10 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock>
org.apache.ambari.server.state.host.HostImpl.handleEvent : goto [?= $r10 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock>] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r10 = r0.<org.apache.ambari.server.state.host.HostImpl: java.util.concurrent.locks.Lock writeLock> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : goto [?= $r11 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>()]
org.apache.ambari.server.state.host.HostImpl.handleEvent : goto [?= $r11 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r11 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r11 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : if r2 == $r11
org.apache.ambari.server.state.host.HostImpl.handleEvent : if r2 == $r11 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r12 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.host.HostImpl.handleEvent : if r2 == $r11 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : return
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r12 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $z1 = interfaceinvoke $r12.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $z1 = interfaceinvoke $r12.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : if $z1 == 0
org.apache.ambari.server.state.host.HostImpl.handleEvent : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r14 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.host.HostImpl.handleEvent : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : return
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r14 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13 = newarray (java.lang.Object)[5]
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13 = newarray (java.lang.Object)[5] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r15 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r15 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[0] = $r15
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[0] = $r15 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[1] = r2
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[1] = r2 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r16 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r16 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[2] = $r16
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[2] = $r16 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r17 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r17 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r18 = (org.apache.ambari.server.state.HostEventType) $r17
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r18 = (org.apache.ambari.server.state.HostEventType) $r17 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.HostEventType: java.lang.String name()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.HostEventType: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[3] = $r19
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[3] = $r19 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[4] = r1
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r13[4] = r1 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Host transitioned to a new state, host={}, oldState={}, currentState={}, eventType={}, event={}", $r13)
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Host transitioned to a new state, host={}, oldState={}, currentState={}, eventType={}, event={}", $r13) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : return
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r26 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r25 = new java.lang.StringBuilder
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r26 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r25 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r25 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t handle Host event at current state, host=")
org.apache.ambari.server.state.host.HostImpl.handleEvent : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t handle Host event at current state, host=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r28 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t handle Host event at current state, host=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r28 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r28 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentState=")
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentState=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentState=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", eventType=")
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", eventType=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r33 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", eventType=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r33 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33)
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r33 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", event=")
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", event=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", event=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String)>($r37)
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String)>($r37) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : throw $r24
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String)>($r37) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : throw $r24 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r38 := @caughtexception
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r20 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r21 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r21 = virtualinvoke r1.<org.apache.ambari.server.state.HostEvent: java.lang.Enum getType()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r22 = (org.apache.ambari.server.state.HostEventType) $r21
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r22 = (org.apache.ambari.server.state.HostEventType) $r21 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : $r23 = virtualinvoke $r22.<org.apache.ambari.server.state.HostEventType: java.lang.String name()>()
org.apache.ambari.server.state.host.HostImpl.handleEvent : $r23 = virtualinvoke $r22.<org.apache.ambari.server.state.HostEventType: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Handling Host event, eventType={}, event={}", $r23, r1)
org.apache.ambari.server.state.host.HostImpl.handleEvent : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Handling Host event, eventType={}, event={}", $r23, r1) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.handleEvent : r2 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.state.HostState getState()>()
