org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"or\":[{\"equals\":[\"configurations/cluster-env/property1\",\"false\"]},")
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"or\":[{\"equals\":[\"configurations/cluster-env/property1\",\"false\"]},") >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"and\":[{\"contains\":[\"services\",\"HDFS\"]},{\"equals\":[\"configurations/service-env/property1\",\"true\"]}]}")
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"and\":[{\"contains\":[\"services\",\"HDFS\"]},{\"equals\":[\"configurations/service-env/property1\",\"true\"]}]}") >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]}")
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]}") >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r7 = new java.lang.StringBuilder
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"not\":")
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"not\":") >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}")
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}") >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtilsTest.createJSON : return $r11
