org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r18 = new org.apache.ambari.server.controller.internal.ResourceImpl >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r19 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Cluster>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r19 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Cluster> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r18.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r19)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r18.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r19) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r18.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Clusters/cluster_name", "testCluster")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r18.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Clusters/cluster_name", "testCluster") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r18.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Clusters/version", "HDP-1.3.3")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r18.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Clusters/version", "HDP-1.3.3") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r18.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Clusters/prop1", "value1")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r18.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Clusters/prop1", "value1") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r18.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("foo", "bar")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r18.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("foo", "bar") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r3 = interfaceinvoke r1.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r18, "Cluster:1")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r3 = interfaceinvoke r1.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r18, "Cluster:1") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r4 = interfaceinvoke r3.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>(null, "hosts")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r4 = interfaceinvoke r3.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>(null, "hosts") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r4.<org.apache.ambari.server.api.util.TreeNode: void setProperty(java.lang.String,java.lang.Object)>("isCollection", "true")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r4.<org.apache.ambari.server.api.util.TreeNode: void setProperty(java.lang.String,java.lang.Object)>("isCollection", "true") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r20 = new org.apache.ambari.server.controller.internal.ResourceImpl
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r20 = new org.apache.ambari.server.controller.internal.ResourceImpl >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r21 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r21 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r20.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r21)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r20.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r21) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r23 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r23 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r22 = <org.apache.ambari.server.controller.internal.HostResourceProvider: java.util.Map keyPropertyIds>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r22 = <org.apache.ambari.server.controller.internal.HostResourceProvider: java.util.Map keyPropertyIds> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: void setKeyPropertyIds(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>($r23, $r22)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: void setKeyPropertyIds(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>($r23, $r22) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r25 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r25 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r24 = <org.apache.ambari.server.controller.internal.HostComponentResourceProvider: java.util.Map keyPropertyIds>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r24 = <org.apache.ambari.server.controller.internal.HostComponentResourceProvider: java.util.Map keyPropertyIds> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: void setKeyPropertyIds(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>($r25, $r24)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: void setKeyPropertyIds(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>($r25, $r24) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r20.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/host_name", "testHost")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r20.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/host_name", "testHost") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r20.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/cluster_name", "testCluster")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r20.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/cluster_name", "testCluster") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r20.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("foo", "bar")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r20.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("foo", "bar") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r6 = interfaceinvoke r4.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r20, "Host:1")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r6 = interfaceinvoke r4.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r20, "Host:1") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r7 = interfaceinvoke r6.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>(null, "host_components")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r7 = interfaceinvoke r6.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>(null, "host_components") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: void setProperty(java.lang.String,java.lang.Object)>("isCollection", "true")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: void setProperty(java.lang.String,java.lang.Object)>("isCollection", "true") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r26 = new org.apache.ambari.server.controller.internal.ResourceImpl
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r26 = new org.apache.ambari.server.controller.internal.ResourceImpl >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r27 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r27 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r26.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r27)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r26.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r27) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r26.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/component_name", "NAMENODE")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r26.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/component_name", "NAMENODE") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r26.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/host_name", "testHost")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r26.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/host_name", "testHost") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r26.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/cluster_name", "testCluster")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r26.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/cluster_name", "testCluster") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r28 = new org.apache.ambari.server.controller.internal.ResourceImpl
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r28 = new org.apache.ambari.server.controller.internal.ResourceImpl >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r29 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r29 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r28.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r29)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r28.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r29) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r28.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/component_name", "DATANODE")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r28.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/component_name", "DATANODE") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r28.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/host_name", "testHost")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r28.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/host_name", "testHost") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r28.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/cluster_name", "testCluster")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r28.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/cluster_name", "testCluster") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r30 = new org.apache.ambari.server.controller.internal.ResourceImpl
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r30 = new org.apache.ambari.server.controller.internal.ResourceImpl >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r31 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r31 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r30.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r31)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r30.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r31) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/component_name", "JOBTRACKER")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/component_name", "JOBTRACKER") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/host_name", "testHost")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/host_name", "testHost") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/cluster_name", "testCluster")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/cluster_name", "testCluster") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r32 = new org.apache.ambari.server.controller.internal.ResourceImpl
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r32 = new org.apache.ambari.server.controller.internal.ResourceImpl >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r33 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r33 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponent> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r32.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r33)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r32.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r33) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r32.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/component_name", "TASKTRACKER")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r32.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/component_name", "TASKTRACKER") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/host_name", "testHost")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/host_name", "testHost") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/cluster_name", "testCluster")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r30.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("HostRoles/cluster_name", "testCluster") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r26, "HostComponent:1")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r26, "HostComponent:1") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r28, "HostComponent:2")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r28, "HostComponent:2") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r30, "HostComponent:3")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r30, "HostComponent:3") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r32, "HostComponent:4")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r7.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r32, "HostComponent:4") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r38 = new org.apache.ambari.server.controller.internal.ResourceImpl
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r38 = new org.apache.ambari.server.controller.internal.ResourceImpl >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r39 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r39 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r38.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r39)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r38.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r39) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r38.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/host_name", "testHost2")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r38.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/host_name", "testHost2") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r38.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/cluster_name", "testCluster")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r38.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/cluster_name", "testCluster") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r38.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("foo", "bar")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r38.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("foo", "bar") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r13 = interfaceinvoke r4.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r38, "Host:2")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r13 = interfaceinvoke r4.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r38, "Host:2") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r14 = interfaceinvoke r13.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>(null, "host_components")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r14 = interfaceinvoke r13.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>(null, "host_components") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r14.<org.apache.ambari.server.api.util.TreeNode: void setProperty(java.lang.String,java.lang.Object)>("isCollection", "true")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r14.<org.apache.ambari.server.api.util.TreeNode: void setProperty(java.lang.String,java.lang.Object)>("isCollection", "true") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r14.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r28, "HostComponent:1")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r14.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r28, "HostComponent:1") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r14.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r32, "HostComponent:2")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r14.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r32, "HostComponent:2") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r42 = new org.apache.ambari.server.controller.internal.ResourceImpl
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r42 = new org.apache.ambari.server.controller.internal.ResourceImpl >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r43 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host>
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : $r43 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host> >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r42.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r43)
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : specialinvoke $r42.<org.apache.ambari.server.controller.internal.ResourceImpl: void <init>(org.apache.ambari.server.controller.spi.Resource$Type)>($r43) >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r42.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/host_name", "testHost3")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r42.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/host_name", "testHost3") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r42.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/host_name", "testHost2")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r42.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("Hosts/host_name", "testHost2") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r42.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("foo", "bar")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke $r42.<org.apache.ambari.server.controller.spi.Resource: void setProperty(java.lang.String,java.lang.Object)>("foo", "bar") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r16 = interfaceinvoke r4.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r42, "Host:3")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r16 = interfaceinvoke r4.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r42, "Host:3") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r17 = interfaceinvoke r16.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>(null, "host_components")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : r17 = interfaceinvoke r16.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>(null, "host_components") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r17.<org.apache.ambari.server.api.util.TreeNode: void setProperty(java.lang.String,java.lang.Object)>("isCollection", "true")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r17.<org.apache.ambari.server.api.util.TreeNode: void setProperty(java.lang.String,java.lang.Object)>("isCollection", "true") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r17.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r28, "HostComponent:1")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r17.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r28, "HostComponent:1") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r17.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r32, "HostComponent:2")
org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : interfaceinvoke r17.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r32, "HostComponent:2") >>>>>>>> org.apache.ambari.server.api.query.render.MinimalRendererTest.createResultTree : return
