org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r2 = staticinvoke <org.easymock.EasyMock: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;") >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : r0 = (org.apache.ambari.server.configuration.Configuration) $r2
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : r0 = (org.apache.ambari.server.configuration.Configuration) $r2 >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.Boolean getGplLicenseAccepted()>()
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.Boolean getGplLicenseAccepted()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r4 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r4 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r6 = interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r6 = interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r8 = class "Lorg/apache/ambari/server/topology/BlueprintValidatorImpl;"
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r8 = class "Lorg/apache/ambari/server/topology/BlueprintValidatorImpl;" >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : r1 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("configuration")
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : r1 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("configuration") >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, r0)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, r0) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : return r0
