org.apache.ambari.server.state.PropertyValueEquals.isResolved : $z0 = specialinvoke r0.<org.apache.ambari.server.state.PropertyExists: boolean isResolved(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : if $z0 == 0
org.apache.ambari.server.state.PropertyValueEquals.isResolved : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r3 = r0.<org.apache.ambari.server.state.PropertyValueEquals: java.lang.String propertyValue>
org.apache.ambari.server.state.PropertyValueEquals.isResolved : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $z2 = 0
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $z2 = 0 >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : return $z2
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r3 = r0.<org.apache.ambari.server.state.PropertyValueEquals: java.lang.String propertyValue> >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r2 = r0.<org.apache.ambari.server.state.PropertyValueEquals: java.lang.String configType>
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r2 = r0.<org.apache.ambari.server.state.PropertyValueEquals: java.lang.String configType> >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2)
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r6 = (java.util.Map) $r4
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r6 = (java.util.Map) $r4 >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r5 = r0.<org.apache.ambari.server.state.PropertyValueEquals: java.lang.String property>
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r5 = r0.<org.apache.ambari.server.state.PropertyValueEquals: java.lang.String property> >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r7)
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : if $z1 == 0
org.apache.ambari.server.state.PropertyValueEquals.isResolved : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $z2 = 1
org.apache.ambari.server.state.PropertyValueEquals.isResolved : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : $z2 = 0
org.apache.ambari.server.state.PropertyValueEquals.isResolved : $z2 = 1 >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : goto [?= return $z2]
org.apache.ambari.server.state.PropertyValueEquals.isResolved : goto [?= return $z2] >>>>>>>> org.apache.ambari.server.state.PropertyValueEquals.isResolved : return $z2
