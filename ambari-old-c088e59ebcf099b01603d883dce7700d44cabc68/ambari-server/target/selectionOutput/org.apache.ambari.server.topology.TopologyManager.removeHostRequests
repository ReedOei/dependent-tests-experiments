org.apache.ambari.server.topology.TopologyManager.removeHostRequests : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void ensureInitialized()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r5 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map allRequests>
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r5 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map allRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z0 == 0
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : return
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : r3 = (org.apache.ambari.server.topology.LogicalRequest) $r7
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : r3 = (org.apache.ambari.server.topology.LogicalRequest) $r7 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : r4 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: java.util.Set removeHostRequestByHostName(java.lang.String)>(r1)
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : r4 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: java.util.Set removeHostRequestByHostName(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z1 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: boolean hasPendingHostRequests()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z1 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: boolean hasPendingHostRequests()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z1 != 0
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z1 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r10 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests>
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z1 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r8 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: java.util.Collection getHostRequests()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r8 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: java.util.Collection getHostRequests()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z2 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z2 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z2 == 0
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : interfaceinvoke r2.<java.util.Iterator: void remove()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z3 = interfaceinvoke r4.<java.util.Collection: boolean isEmpty()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z3 = interfaceinvoke r4.<java.util.Collection: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z3 != 0
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z3 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r9 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState persistedState>
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : if $z3 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r9 = r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState persistedState> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $l0 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $l0 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : interfaceinvoke $r9.<org.apache.ambari.server.topology.PersistedState: void removeHostRequests(long,java.util.Collection)>($l0, r4)
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : interfaceinvoke $r9.<org.apache.ambari.server.topology.PersistedState: void removeHostRequests(long,java.util.Collection)>($l0, r4) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : interfaceinvoke r2.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $z3 = interfaceinvoke r4.<java.util.Collection: boolean isEmpty()>()
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r10 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : interfaceinvoke $r10.<java.util.Collection: boolean remove(java.lang.Object)>(r3)
org.apache.ambari.server.topology.TopologyManager.removeHostRequests : interfaceinvoke $r10.<java.util.Collection: boolean remove(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.removeHostRequests : $r8 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: java.util.Collection getHostRequests()>()
