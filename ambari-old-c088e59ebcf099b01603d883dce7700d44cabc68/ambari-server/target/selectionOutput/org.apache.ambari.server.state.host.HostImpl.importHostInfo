org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r3 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r3 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r3 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r63 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r3 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setCpuCount(int)>($i7)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setCpuCount(int)>($i7) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setPhCpuCount(int)>($i8)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setPhCpuCount(int)>($i8) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: long getMemoryTotal()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: long getMemoryTotal()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setTotalMemBytes(long)>($l9)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setTotalMemBytes(long)>($l9) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l10 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: long getFreeMemory()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l10 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: long getFreeMemory()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setAvailableMemBytes(long)>($l10)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setAvailableMemBytes(long)>($l10) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r66 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r66 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r66 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r66 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r61 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r66 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r67 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r67 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r67 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r67 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r54 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r67 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r70 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r70 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r70 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r70 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r52 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r70 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r71 = new org.apache.ambari.server.state.AgentVersion
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r71 = new org.apache.ambari.server.state.AgentVersion >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r72 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getAgentUserId()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r72 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getAgentUserId()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r71.<org.apache.ambari.server.state.AgentVersion: void <init>(java.lang.String)>($r72)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r71.<org.apache.ambari.server.state.AgentVersion: void <init>(java.lang.String)>($r72) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setAgentVersion(org.apache.ambari.server.state.AgentVersion)>($r71)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setAgentVersion(org.apache.ambari.server.state.AgentVersion)>($r71) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r73 = new java.util.HashMap
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r73 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r73.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r73.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r75 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareIsa()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r75 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareIsa()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r75 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r75 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r50 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareIsa()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r75 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r4 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r4 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r48 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r4 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r5 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r5 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r46 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r5 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r6 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r6 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r6 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r6 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r44 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r6 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r7 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r7 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r42 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r7 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r8 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r8 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r40 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r8 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r9 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r9 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r38 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r9 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r10 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r10 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r10 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r10 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r36 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r10 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r11 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r11 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r11 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r11 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r34 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r11 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r12 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r12 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r12 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r12 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r32 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r12 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i0 == 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i0 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i0 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i1 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i1 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i1 == 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i1 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i2 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i1 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r13 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r13 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r13 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r13 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z1 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r13 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r14 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r14 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r14 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r14 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r24 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r14 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r15 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r15 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r15 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r15 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r22 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r15 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r16 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r16 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r16 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r16 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r20 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r16 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r17 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r17 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r17 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r17 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r18 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r17 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setHostAttributes(java.util.Map)>($r73)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setHostAttributes(java.util.Map)>($r73) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : return
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r18 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_release_version", $r18)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_release_version", $r18) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setHostAttributes(java.util.Map)>($r73)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r20 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("timezone", $r20)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("timezone", $r20) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r17 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r22 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swap_free", $r22)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swap_free", $r22) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r16 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r24 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swap_size", $r24)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swap_size", $r24) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r15 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z1 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r26 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z1)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r26 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z1) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("selinux_enabled", $r26)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("selinux_enabled", $r26) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r14 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i2 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l3 = (long) $i2
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l3 = (long) $i2 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r28 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l3)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r28 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l3) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("processors_count", $r28)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("processors_count", $r28) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l5 = (long) $i4
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l5 = (long) $i4 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r30 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l5)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r30 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l5) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("physicalprocessors_count", $r30)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("physicalprocessors_count", $r30) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i1 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r32 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_family", $r32)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_family", $r32) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r34 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("netmask", $r34)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("netmask", $r34) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r12 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r36 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mac_address", $r36)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mac_address", $r36) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r11 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r38 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_version", $r38)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_version", $r38) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r10 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r40 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_release", $r40)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_release", $r40) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r42 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_majorversion", $r42)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_majorversion", $r42) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r44 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel", $r44)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel", $r44) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r46 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("interfaces", $r46)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("interfaces", $r46) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r6 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r48 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hardware_model", $r48)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hardware_model", $r48) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r50 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareIsa()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hardware_isa", $r50)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hardware_isa", $r50) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r52 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z2 = interfaceinvoke $r52.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z2 = interfaceinvoke $r52.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z2 != 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r53 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r71 = new org.apache.ambari.server.state.AgentVersion
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r53 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setDisksInfo(java.util.List)>($r53)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setDisksInfo(java.util.List)>($r53) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r71 = new org.apache.ambari.server.state.AgentVersion
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r54 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z3 = virtualinvoke $r54.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z3 = virtualinvoke $r54.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z3 != 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : r68 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r70 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : r68 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r55 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r55 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r55 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r55 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r56 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r55 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r69 = virtualinvoke r68.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r69 = virtualinvoke r68.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setOsType(java.lang.String)>($r69)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setOsType(java.lang.String)>($r69) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r70 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r56 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : r2 = virtualinvoke $r56.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.")
org.apache.ambari.server.state.host.HostImpl.importHostInfo : r2 = virtualinvoke $r56.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i6 = lengthof r2
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i6 = lengthof r2 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i6 <= 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i6 <= 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r57 = new java.lang.StringBuilder
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i6 <= 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r69 = virtualinvoke r68.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r57 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r59 = r2[0]
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r59 = r2[0] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : r68 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : r68 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r69 = virtualinvoke r68.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r61 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z4 = virtualinvoke $r61.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z4 = virtualinvoke $r61.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z4 != 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z4 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r62 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z4 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r67 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r62 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setOsArch(java.lang.String)>($r62)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setOsArch(java.lang.String)>($r62) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r67 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r63 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z5 = virtualinvoke $r63.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z5 = virtualinvoke $r63.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z5 != 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z5 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r64 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z5 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r64 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setIPv4(java.lang.String)>($r64)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setIPv4(java.lang.String)>($r64) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r65 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r65 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setIPv6(java.lang.String)>($r65)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setIPv6(java.lang.String)>($r65) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
