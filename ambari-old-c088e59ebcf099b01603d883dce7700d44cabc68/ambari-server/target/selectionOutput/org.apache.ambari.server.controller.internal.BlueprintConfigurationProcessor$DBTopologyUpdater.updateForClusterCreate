org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater.updateForClusterCreate : $z0 = specialinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater: boolean isDatabaseManaged(java.util.Map)>(r3) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater.updateForClusterCreate : if $z0 == 0
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater.updateForClusterCreate : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater.updateForClusterCreate : $r5 = specialinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.lang.String updateForClusterCreate(java.lang.String,java.lang.String,java.util.Map,org.apache.ambari.server.topology.ClusterTopology)>(r1, r2, r3, r4)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater.updateForClusterCreate : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater.updateForClusterCreate : return r2
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater.updateForClusterCreate : $r5 = specialinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$SingleHostTopologyUpdater: java.lang.String updateForClusterCreate(java.lang.String,java.lang.String,java.util.Map,org.apache.ambari.server.topology.ClusterTopology)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$DBTopologyUpdater.updateForClusterCreate : return $r5
