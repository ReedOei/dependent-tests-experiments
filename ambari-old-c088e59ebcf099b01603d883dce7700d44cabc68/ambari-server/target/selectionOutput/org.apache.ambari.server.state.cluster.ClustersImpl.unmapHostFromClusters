org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z0 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : return
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : r3 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : r3 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r6 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.orm.dao.HostDAO hostDAO>
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r6 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.orm.dao.HostDAO hostDAO> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : r23 = virtualinvoke $r6.<org.apache.ambari.server.orm.dao.HostDAO: org.apache.ambari.server.orm.entities.HostEntity findByName(java.lang.String)>(r3)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : r23 = virtualinvoke $r6.<org.apache.ambari.server.orm.dao.HostDAO: org.apache.ambari.server.orm.entities.HostEntity findByName(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z1 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r7 = virtualinvoke r23.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.Long getHostId()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r7 = virtualinvoke r23.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.Long getHostId()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: void deleteConfigGroupHostMapping(java.lang.Long)>($r7)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: void deleteConfigGroupHostMapping(java.lang.Long)>($r7) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r8 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO kerberosKeytabPrincipalDAO>
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r8 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO kerberosKeytabPrincipalDAO> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r9 = virtualinvoke r23.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.Long getHostId()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r9 = virtualinvoke r23.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.Long getHostId()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : virtualinvoke $r8.<org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO: void removeByHost(java.lang.Long)>($r9)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : virtualinvoke $r8.<org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO: void removeByHost(java.lang.Long)>($r9) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : return
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : r5 = (org.apache.ambari.server.state.Cluster) $r10
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : r5 = (org.apache.ambari.server.state.Cluster) $r10 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : l0 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : l0 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r11 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r11 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $z2 = interfaceinvoke $r11.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $z2 = interfaceinvoke $r11.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z2 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r20 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $l1 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $l1 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: void unmapHostClusterEntities(java.lang.String,long)>(r3, $l1)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: void unmapHostClusterEntities(java.lang.String,long)>(r3, $l1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r12 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap>
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r12 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r13 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r3)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r13 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r14 = (java.util.Set) $r13
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r14 = (java.util.Set) $r13 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : interfaceinvoke $r14.<java.util.Set: boolean remove(java.lang.Object)>(r5)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : interfaceinvoke $r14.<java.util.Set: boolean remove(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r15 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap clusterHostMap>
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r15 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap clusterHostMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r16 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r16 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r17 = virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r16)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r17 = virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r18 = (java.util.Set) $r17
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r18 = (java.util.Set) $r17 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : interfaceinvoke $r18.<java.util.Set: boolean remove(java.lang.Object)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : interfaceinvoke $r18.<java.util.Set: boolean remove(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r20 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r19 = newarray (java.lang.Object)[3]
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r19 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r19[0] = r3
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r19[0] = r3 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r21 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>()
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r21 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r19[1] = $r21
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r19[1] = $r21 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r19[2] = $r22
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $r19[2] = $r22 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Unmapping host {} from cluster {} (id={})", $r19)
org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Unmapping host {} from cluster {} (id={})", $r19) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.unmapHostFromClusters : $l1 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
