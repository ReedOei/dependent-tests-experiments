org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i2 = i0 - 4 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2)
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i1 <= 0
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i1 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i3 = lengthof r1
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i1 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i5 = lengthof r1
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i5 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i1 = $i5 - 4
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i1 = $i5 - 4 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i6 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDType1Font: int findBinaryOffsetAfterExec(byte[],int)>(r1, i1)
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i6 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDType1Font: int findBinaryOffsetAfterExec(byte[],int)>(r1, i1) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i6 != 0
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i6 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i0 <= 0
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i6 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i9 = i0 - i6
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i9 = i0 - i6 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if $i9 == 0
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if $i9 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i6 <= 0
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if $i9 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : return i0
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i6 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r2 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i6 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : return i0
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r2 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isWarnEnabled()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isWarnEnabled()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if $z0 == 0
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r3 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : return i6
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r3 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r4 = new java.lang.StringBuilder
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignored invalid Length1 ")
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignored invalid Length1 ") >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Type 1 font ")
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Type 1 font ") >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r10)
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r10) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : return i6
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i0 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i7 = lengthof r1
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i0 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i9 = i0 - i6
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i7 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i8 = $i7 - 4
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i8 = $i7 - 4 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i6 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDType1Font: int findBinaryOffsetAfterExec(byte[],int)>(r1, $i8)
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i6 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDType1Font: int findBinaryOffsetAfterExec(byte[],int)>(r1, $i8) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i9 = i0 - i6
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i3 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i4 = $i3 - 4
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i4 = $i3 - 4 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i1 <= $i4
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i1 <= $i4 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : $i5 = lengthof r1
org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : if i1 <= $i4 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.repairLength1 : i6 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDType1Font: int findBinaryOffsetAfterExec(byte[],int)>(r1, i1)
