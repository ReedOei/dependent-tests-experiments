org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r2 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r3 = $r2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r3 = $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i6 != 2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i6 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : b0 = 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i6 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : b0 = 8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : b0 = 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i9 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i9 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i10 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i10 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i9 >= i10
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i9 >= i10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i11 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i9 >= i10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r16 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r16 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i15 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i15 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i16 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i16 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r8 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r8 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r17 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r16, $i15, $i16, b0, $r8)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r17 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r16, $i15, $i16, b0, $r8) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : return r17
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i11 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i12 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i12 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i11 >= i12
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i11 >= i12 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i13 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i9)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i11 >= i12 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i9 = i9 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i9 = i9 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i9 >= i10
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i13 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i9) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i14 = $i13 >>> 24
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i14 = $i13 >>> 24 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(int)>(i14)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(int)>(i14) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i11 = i11 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i11 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i11 >= i12
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : b0 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r9 = new javax.imageio.stream.MemoryCacheImageOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r9 = new javax.imageio.stream.MemoryCacheImageOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : specialinvoke $r9.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>(r3)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : specialinvoke $r9.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r4 = $r9
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r4 = $r9 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r5 = null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r5 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i1 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r5 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r6 = $r14 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r4 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r6 = $r14 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r14 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r5 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : throw r6
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r15 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r7 = $r15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r7)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= throw r6]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= throw r6] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : throw r6
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : throw r6
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= throw r6]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r15 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= throw r6] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : throw r6
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r13 = $r12 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r5 = r13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r13 = $r12 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r14 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r5 = r13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : throw r13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r5 = r13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r14 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : throw r13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r14 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i1 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i1 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i1 >= i2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i1 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i3 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i1 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i1 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r4 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r5 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $r16 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $r16 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r16 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r10 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r11 = $r10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r11)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r11) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $r16 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $r16 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r10 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $r16 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i3 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i3 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i3 >= i4
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i3 >= i4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i7 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i3, i1)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i3 >= i4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i8 = virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i3 >= i4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i8 = virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i8 == 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i8 = virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i8 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i8 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i1 = i1 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i8 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i1 >= i2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $i8 = virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $i8 = virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i8 = virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $i8 = virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i7 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i3, i1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i5 = $i7 >>> 24
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i7 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i3, i1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i5 = $i7 >>> 24 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i5)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i5 = $i7 >>> 24 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i3 = i3 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke r4.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i3 = i3 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i3 = i3 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i3 >= i4
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r12 := @caughtexception
