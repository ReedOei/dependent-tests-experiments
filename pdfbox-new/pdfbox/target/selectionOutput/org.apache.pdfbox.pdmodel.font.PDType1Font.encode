org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map codeToBytesMap> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r1 = (byte[]) $r6
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r1 = (byte[]) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if r1 == null
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : return r1
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.GlyphList getGlyphList()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.GlyphList getGlyphList()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r2 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.font.encoding.GlyphList: java.lang.String codePointToName(int)>(i0)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r2 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.font.encoding.GlyphList: java.lang.String codePointToName(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: boolean isStandard14()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: boolean isStandard14()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z0 == 0
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r22 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r22 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z3 = virtualinvoke $r22.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: boolean contains(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z3 = virtualinvoke $r22.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: boolean contains(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z3 != 0
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r23 = new java.lang.IllegalArgumentException
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getNameInFont(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getNameInFont(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r32 = ".notdef"
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r32 = ".notdef" >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z4 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>(r3)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z4 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z4 != 0
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z4 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r33 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.fontbox.FontBoxFont genericFont>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z4 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r34 = new java.lang.IllegalArgumentException
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r34 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r35 = newarray (java.lang.Object)[3]
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r35 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r35[0] = $r36
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r35[0] = $r36 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r37 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r37 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r35[1] = $r37
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r35[1] = $r37 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r38 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.fontbox.FontBoxFont genericFont>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r38 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.fontbox.FontBoxFont genericFont> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r39 = interfaceinvoke $r38.<org.apache.fontbox.FontBoxFont: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r39 = interfaceinvoke $r38.<org.apache.fontbox.FontBoxFont: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r35[2] = $r39
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r35[2] = $r39 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r40 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No glyph for U+%04X in font %s (generic: %s)", $r35)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r40 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No glyph for U+%04X in font %s (generic: %s)", $r35) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r40)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r40) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : throw $r34
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r33 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.fontbox.FontBoxFont genericFont> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z5 = interfaceinvoke $r33.<org.apache.fontbox.FontBoxFont: boolean hasGlyph(java.lang.String)>(r3)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z5 = interfaceinvoke $r33.<org.apache.fontbox.FontBoxFont: boolean hasGlyph(java.lang.String)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z5 != 0
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r34 = new java.lang.IllegalArgumentException
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r41 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r41 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r42 = virtualinvoke $r41.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: java.util.Map getNameToCodeMap()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r42 = virtualinvoke $r41.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: java.util.Map getNameToCodeMap()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r43 = interfaceinvoke r42.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r43 = interfaceinvoke r42.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r44 = (java.lang.Integer) $r43
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r44 = (java.lang.Integer) $r43 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : i1 = virtualinvoke $r44.<java.lang.Integer: int intValue()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : i1 = virtualinvoke $r44.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r45 = newarray (byte)[1]
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r45 = newarray (byte)[1] >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $b2 = (byte) i1
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $b2 = (byte) i1 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r45[0] = $b2
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r45[0] = $b2 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r46 = $r45
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : r46 = $r45 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r47 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map codeToBytesMap>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r47 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map codeToBytesMap> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, r46)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, r46) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : return r46
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r23 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24 = newarray (java.lang.Object)[5]
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24 = newarray (java.lang.Object)[5] >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[0] = $r25
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[0] = $r25 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[1] = r2
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[1] = r2 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r26 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r26 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[2] = $r26
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[2] = $r26 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r27 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.fontbox.FontBoxFont genericFont>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r27 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.fontbox.FontBoxFont genericFont> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r28 = interfaceinvoke $r27.<org.apache.fontbox.FontBoxFont: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r28 = interfaceinvoke $r27.<org.apache.fontbox.FontBoxFont: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[3] = $r28
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[3] = $r28 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r29 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r29 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r30 = virtualinvoke $r29.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: java.lang.String getEncodingName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r30 = virtualinvoke $r29.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: java.lang.String getEncodingName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[4] = $r30
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r24[4] = $r30 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("U+%04X (\'%s\') is not available in this font %s (generic: %s) encoding: %s", $r24)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("U+%04X (\'%s\') is not available in this font %s (generic: %s) encoding: %s", $r24) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : throw $r23
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z1 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: boolean contains(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z1 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: boolean contains(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z1 != 0
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r9 = new java.lang.IllegalArgumentException
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r16 = ".notdef"
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r16 = ".notdef" >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z2 == 0
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r17 = new java.lang.IllegalArgumentException
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r41 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r17 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r18 = newarray (java.lang.Object)[2]
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r18 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r18[0] = $r19
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r18[0] = $r19 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r20 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r20 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r18[1] = $r20
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r18[1] = $r20 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No glyph for U+%04X in font %s", $r18)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No glyph for U+%04X in font %s", $r18) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : throw $r17
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r9 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10 = newarray (java.lang.Object)[4]
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10[0] = $r11
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10[0] = $r11 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10[1] = r2
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10[2] = $r12
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10[2] = $r12 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r13 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding>
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r13 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.encoding.Encoding encoding> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r14 = virtualinvoke $r13.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: java.lang.String getEncodingName()>()
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r14 = virtualinvoke $r13.<org.apache.pdfbox.pdmodel.font.encoding.Encoding: java.lang.String getEncodingName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10[3] = $r14
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r10[3] = $r14 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("U+%04X (\'%s\') is not available in this font %s encoding: %s", $r10)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("U+%04X (\'%s\') is not available in this font %s encoding: %s", $r10) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode : specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1Font.encode : throw $r9
