org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r1 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontMappers: org.apache.pdfbox.pdmodel.font.FontMapper instance()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2: java.lang.String getBaseFont()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2: java.lang.String getBaseFont()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2: org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo getCIDSystemInfo()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2: org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo getCIDSystemInfo()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : r2 = interfaceinvoke $r1.<org.apache.pdfbox.pdmodel.font.FontMapper: org.apache.pdfbox.pdmodel.font.CIDFontMapping getCIDFont(java.lang.String,org.apache.pdfbox.pdmodel.font.PDFontDescriptor,org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo)>($r4, $r5, $r6)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : r2 = interfaceinvoke $r1.<org.apache.pdfbox.pdmodel.font.FontMapper: org.apache.pdfbox.pdmodel.font.CIDFontMapping getCIDFont(java.lang.String,org.apache.pdfbox.pdmodel.font.PDFontDescriptor,org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo)>($r4, $r5, $r6) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $z0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: boolean isCIDFont()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $z0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: boolean isCIDFont()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : if $z0 == 0
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r7 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: org.apache.fontbox.FontBoxFont getFont()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r8 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: org.apache.fontbox.FontBoxFont getTrueTypeFont()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r8 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: org.apache.fontbox.FontBoxFont getTrueTypeFont()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : r3 = (org.apache.fontbox.ttf.TrueTypeFont) $r8
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : r3 = (org.apache.fontbox.ttf.TrueTypeFont) $r8 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $z1 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: boolean isFallback()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $z1 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: boolean isFallback()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : if $z1 == 0
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r9 = <org.apache.pdfbox.pdmodel.font.PDCIDFontType2: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : return r3
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r9 = <org.apache.pdfbox.pdmodel.font.PDCIDFontType2: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r10 = new java.lang.StringBuilder
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using fallback font ")
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using fallback font ") >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r12 = virtualinvoke r3.<org.apache.fontbox.ttf.TrueTypeFont: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r12 = virtualinvoke r3.<org.apache.fontbox.ttf.TrueTypeFont: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for CID-keyed TrueType font ")
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for CID-keyed TrueType font ") >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2: java.lang.String getBaseFont()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2: java.lang.String getBaseFont()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r17)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r17) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : return r3
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $r7 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: org.apache.fontbox.FontBoxFont getFont()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : r3 = (org.apache.fontbox.ttf.TrueTypeFont) $r7
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : r3 = (org.apache.fontbox.ttf.TrueTypeFont) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : goto [?= $z1 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: boolean isFallback()>()]
org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : goto [?= $z1 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: boolean isFallback()>()] >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFontType2.findFontOrSubstitute : $z1 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.CIDFontMapping: boolean isFallback()>()
