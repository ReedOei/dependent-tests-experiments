org.apache.pdfbox.util.QuickSort.partition : i3 = i1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i4 = i2 - 2
org.apache.pdfbox.util.QuickSort.partition : i4 = i2 - 2 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.util.QuickSort.partition : r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i6 = i2 - 1
org.apache.pdfbox.util.QuickSort.partition : $i6 = i2 - 1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, i0, $i6)
org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, i0, $i6) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if i3 >= i4
org.apache.pdfbox.util.QuickSort.partition : if i3 >= i4 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3)
org.apache.pdfbox.util.QuickSort.partition : if i3 >= i4 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i5 = i4
org.apache.pdfbox.util.QuickSort.partition : i5 = i4 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4)
org.apache.pdfbox.util.QuickSort.partition : $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i9 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, r2)
org.apache.pdfbox.util.QuickSort.partition : $i9 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, r2) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if $i9 >= 0
org.apache.pdfbox.util.QuickSort.partition : if $i9 >= 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i5 = i5 + 1
org.apache.pdfbox.util.QuickSort.partition : if $i9 >= 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i10 = i2 - 1
org.apache.pdfbox.util.QuickSort.partition : $i10 = i2 - 1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, $i10, i5)
org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, $i10, i5) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : return i5
org.apache.pdfbox.util.QuickSort.partition : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i10 = i2 - 1
org.apache.pdfbox.util.QuickSort.partition : $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i7 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r2)
org.apache.pdfbox.util.QuickSort.partition : $i7 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r2) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if $i7 > 0
org.apache.pdfbox.util.QuickSort.partition : if $i7 > 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i3 = i3 + 1
org.apache.pdfbox.util.QuickSort.partition : if $i7 > 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4)
org.apache.pdfbox.util.QuickSort.partition : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i8 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r4)
org.apache.pdfbox.util.QuickSort.partition : $i8 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r4) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if $i8 > 0
org.apache.pdfbox.util.QuickSort.partition : if $i8 > 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i4 = i4 + -1
org.apache.pdfbox.util.QuickSort.partition : if $i8 > 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, i3, i4)
org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, i3, i4) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)]
org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if i3 >= i4
org.apache.pdfbox.util.QuickSort.partition : i4 = i4 + -1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)]
org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if i3 >= i4
org.apache.pdfbox.util.QuickSort.partition : i3 = i3 + 1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)]
org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if i3 >= i4
