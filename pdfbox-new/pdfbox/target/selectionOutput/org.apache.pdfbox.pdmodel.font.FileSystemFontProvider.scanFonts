org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z0 == 0
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : return
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : r3 = (java.io.File) $r5
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : r3 = (java.io.File) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r6 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : r3 = (java.io.File) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : r4 = $r16 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r17 = <org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r17 = <org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r18 = new java.lang.StringBuilder
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r18 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing font ")
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing font ") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r20 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r20 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : interfaceinvoke $r17.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r22, r4)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : interfaceinvoke $r17.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r22, r4) >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r6 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r6 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z1 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".ttf")
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z1 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".ttf") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z1 != 0
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z1 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".ttf") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r8 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addTrueTypeFont(java.io.File)>(r3)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addTrueTypeFont(java.io.File)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)]
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addTrueTypeFont(java.io.File)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)]
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r8 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r8 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z2 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(".otf")
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z2 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(".otf") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z2 == 0
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z2 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(".otf") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addTrueTypeFont(java.io.File)>(r3)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r10 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r10 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r10 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z3 = virtualinvoke $r11.<java.lang.String: boolean endsWith(java.lang.String)>(".ttc")
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z3 = virtualinvoke $r11.<java.lang.String: boolean endsWith(java.lang.String)>(".ttc") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z3 != 0
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z3 = virtualinvoke $r11.<java.lang.String: boolean endsWith(java.lang.String)>(".ttc") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r12 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addTrueTypeCollection(java.io.File)>(r3)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addTrueTypeCollection(java.io.File)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)]
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addTrueTypeCollection(java.io.File)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)]
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r12 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r12 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z4 = virtualinvoke $r13.<java.lang.String: boolean endsWith(java.lang.String)>(".otc")
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z4 = virtualinvoke $r13.<java.lang.String: boolean endsWith(java.lang.String)>(".otc") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z4 == 0
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z4 = virtualinvoke $r13.<java.lang.String: boolean endsWith(java.lang.String)>(".otc") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addTrueTypeCollection(java.io.File)>(r3)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r14 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r14 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r14 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z5 = virtualinvoke $r15.<java.lang.String: boolean endsWith(java.lang.String)>(".pfb")
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z5 = virtualinvoke $r15.<java.lang.String: boolean endsWith(java.lang.String)>(".pfb") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z5 == 0
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $z5 = virtualinvoke $r15.<java.lang.String: boolean endsWith(java.lang.String)>(".pfb") >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addType1Font(java.io.File)>(r3)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)]
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addType1Font(java.io.File)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : goto [?= (branch)]
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : specialinvoke r0.<org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: void addType1Font(java.io.File)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts : $r16 := @caughtexception
