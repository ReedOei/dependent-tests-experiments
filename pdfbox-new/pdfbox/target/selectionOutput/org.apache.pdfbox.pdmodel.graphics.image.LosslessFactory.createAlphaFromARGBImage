org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r10 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $z0 = virtualinvoke $r10.<java.awt.image.ColorModel: boolean hasAlpha()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $z0 = virtualinvoke $r10.<java.awt.image.ColorModel: boolean hasAlpha()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $z0 != 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getAlphaRaster()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getAlphaRaster()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r2 != null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r11 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createAlphaFromARGBImage2(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)>(r0, r1)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i6 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i6 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i7 = virtualinvoke r2.<java.awt.image.WritableRaster: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i7 = virtualinvoke r2.<java.awt.image.WritableRaster: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r12 = (int[]) null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r12 = (int[]) null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r3 = virtualinvoke r2.<java.awt.image.WritableRaster: int[] getPixels(int,int,int,int,int[])>(0, 0, $i6, $i7, $r12)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r3 = virtualinvoke r2.<java.awt.image.WritableRaster: int[] getPixels(int,int,int,int,int[])>(0, 0, $i6, $i7, $r12) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r13 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r13 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r13.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r13.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r4 = $r13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r4 = $r13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i8 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i8 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i8 != 2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i8 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b0 = 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i8 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b0 = 8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b0 = 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r21 = r3
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r21 = r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = lengthof r21
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = lengthof r21 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i11
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i11 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i13 = r21[i12]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i11 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r22 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r22 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i14 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i14 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i15 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i15 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r23 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r23 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r24 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r22, $i14, $i15, b0, $r23)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r24 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r22, $i14, $i15, b0, $r23) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return r24
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i13 = r21[i12] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r4.<java.io.ByteArrayOutputStream: void write(int)>(i13)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r4.<java.io.ByteArrayOutputStream: void write(int)>(i13) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = i12 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = i12 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i11
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b0 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r14 = new javax.imageio.stream.MemoryCacheImageOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r14 = new javax.imageio.stream.MemoryCacheImageOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r14.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>(r4)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r14.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r5 = $r14
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r5 = $r14 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r6 = null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r6 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i1 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r6 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r8 = $r19 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r5 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r8 = $r19 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r19 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r6 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : throw r8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r6 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r6 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r6 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r20 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r9 = $r20 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r9)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r9) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= throw r8]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= throw r8] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : throw r8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : throw r8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= throw r8]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r20 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= throw r8] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : throw r8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r18 = $r17 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r6 = r18
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r18 = $r17 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r19 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r6 = r18 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : throw r18
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r6 = r18 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r19 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : throw r18 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r19 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i1 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i2 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i1 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i2 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r7 = r3
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i2 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r7 = r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i3 = lengthof r7
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r7 = r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i3 = lengthof r7 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i4 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i3 = lengthof r7 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i4 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i4 >= i3
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i4 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i4 >= i3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i5 = r7[i4]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i4 >= i3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i4 >= i3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r5 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r6 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r22 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r22 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r22 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r6 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r6 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r6 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r15 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r16 = $r15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r16)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r16) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r22 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r22 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r15 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r22 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i5 = r7[i4] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i5)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i5 = r7[i4] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i2 = i2 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i2 = i2 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i9 = i2 % i1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i2 = i2 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i9 = i2 % i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i9 != 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i9 = i2 % i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i9 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i10 = virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i9 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i4 = i4 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i9 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i4 >= i3
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i10 = virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i10 == 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i10 = virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i10 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i10 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i4 = i4 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i10 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $i10 = virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $i10 = virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i10 = virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $i10 = virtualinvoke r5.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r17 := @caughtexception
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r11 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createAlphaFromARGBImage2(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)>(r0, r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return $r11
