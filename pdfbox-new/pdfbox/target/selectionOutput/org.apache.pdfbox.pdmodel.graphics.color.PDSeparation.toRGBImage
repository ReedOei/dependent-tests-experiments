org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r8 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $z0 = $r8 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDLab
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $z0 = $r8 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDLab >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r9 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: java.awt.image.BufferedImage toRGBImage2(java.awt.image.WritableRaster)>(r1)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i5 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i5 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i6 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i6 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r10 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r10 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i7 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i7 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r2 = new java.awt.Point
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r2 = new java.awt.Point >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : specialinvoke $r2.<java.awt.Point: void <init>(int,int)>(0, 0)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : specialinvoke $r2.<java.awt.Point: void <init>(int,int)>(0, 0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r3 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(int,int,int,int,java.awt.Point)>(0, $i5, $i6, $i7, $r2)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r3 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(int,int,int,int,java.awt.Point)>(0, $i5, $i6, $i7, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r11 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r11 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i0 = virtualinvoke $r11.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i0 = virtualinvoke $r11.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i1 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i1 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i2 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i2 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r4 = newarray (float)[1]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r4 = newarray (float)[1] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r12 = new java.util.HashMap
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r12 = new java.util.HashMap >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : specialinvoke $r12.<java.util.HashMap: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r5 = $r12
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r5 = $r12 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i3 = 0
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i3 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i3 >= i2
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i3 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i4 = 0
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i3 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r17 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r17 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r18 = virtualinvoke $r17.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.image.BufferedImage toRGBImage(java.awt.image.WritableRaster)>(r3)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r18 = virtualinvoke $r17.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.image.BufferedImage toRGBImage(java.awt.image.WritableRaster)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : return $r18
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i4 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i4 >= i1
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i4 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r1.<java.awt.image.WritableRaster: float[] getPixel(int,int,float[])>(i4, i3, r4)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i4 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i3 = i3 + 1
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i3 = i3 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i3 >= i2
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r1.<java.awt.image.WritableRaster: float[] getPixel(int,int,float[])>(i4, i3, r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $f0 = r4[0]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $f0 = r4[0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i8 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i8 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r6 = $r14
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r6 = $r14 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r15 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r15 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r7 = (int[]) $r15
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r7 = (int[]) $r15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if r7 != null
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if r7 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r7 = newarray (int)[i0]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if r7 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i4, i3, r7)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i4, i3, r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i4 = i4 + 1
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i4 >= i1
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r7 = newarray (int)[i0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: void tintTransform(float[],int[])>(r4, r7)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: void tintTransform(float[],int[])>(r4, r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i4, i3, r7)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r9 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: java.awt.image.BufferedImage toRGBImage2(java.awt.image.WritableRaster)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : return $r9
