org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : f0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: float popReal()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $b0 = f0 cmpg 0.0F
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $b0 = f0 cmpg 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : if $b0 >= 0
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : if $b0 >= 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r2 = new java.lang.IllegalArgumentException
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : if $b0 >= 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r3 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r3 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $d0 = (double) f0
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $d0 = (double) f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $f1 = (float) $d1
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $f1 = (float) $d1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : return
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("argument must be nonnegative")
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("argument must be nonnegative") >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : throw $r2
