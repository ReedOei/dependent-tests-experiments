org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r7 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r2 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSStream: java.io.InputStream createRawInputStream()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r2 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSStream: java.io.InputStream createRawInputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r8 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r8 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r3 = $r8
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r3 = $r8 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDStream: java.util.List getFilters()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDStream: java.util.List getFilters()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if r4 == null
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : i0 = 0
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : return r2
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : i0 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $i1 = interfaceinvoke r4.<java.util.List: int size()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $i1 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if i0 >= $i1
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if i0 >= $i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if i0 >= $i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : return r2
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r5 = (org.apache.pdfbox.cos.COSName) $r9
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r5 = (org.apache.pdfbox.cos.COSName) $r9 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if r1 == null
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r10 = virtualinvoke r5.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r11 = <org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.FilterFactory INSTANCE>
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r11 = <org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.FilterFactory INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r6 = virtualinvoke $r11.<org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.Filter getFilter(org.apache.pdfbox.cos.COSName)>(r5)
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r6 = virtualinvoke $r11.<org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.Filter getFilter(org.apache.pdfbox.cos.COSName)>(r5) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r12 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r12 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : virtualinvoke r6.<org.apache.pdfbox.filter.Filter: org.apache.pdfbox.filter.DecodeResult decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)>(r2, r3, $r12, i0)
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : virtualinvoke r6.<org.apache.pdfbox.filter.Filter: org.apache.pdfbox.filter.DecodeResult decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)>(r2, r3, $r12, i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>(r2)
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r14 = new java.io.ByteArrayInputStream
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r14 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r15 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r15 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : specialinvoke $r14.<java.io.ByteArrayInputStream: void <init>(byte[])>($r15)
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : specialinvoke $r14.<java.io.ByteArrayInputStream: void <init>(byte[])>($r15) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r2 = $r14
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : r2 = $r14 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : virtualinvoke r3.<java.io.ByteArrayOutputStream: void reset()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : virtualinvoke r3.<java.io.ByteArrayOutputStream: void reset()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : i0 = i0 + 1
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : i0 = i0 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : goto [?= $i1 = interfaceinvoke r4.<java.util.List: int size()>()]
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : goto [?= $i1 = interfaceinvoke r4.<java.util.List: int size()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $i1 = interfaceinvoke r4.<java.util.List: int size()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r10 = virtualinvoke r5.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r10)
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r10) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if $z0 == 0
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : goto [?= return r2]
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r11 = <org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.FilterFactory INSTANCE>
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : goto [?= return r2] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : return r2
