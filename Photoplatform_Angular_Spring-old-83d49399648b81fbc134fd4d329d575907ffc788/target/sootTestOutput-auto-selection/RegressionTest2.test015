de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.setClazz : r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: java.lang.Class clazz> = r1 >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.getEntityManager : $r1 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager>
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.getEntityManager : $r1 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager> >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.getEntityManager : return $r1
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.getEntityManager : return $r1 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.UserRoleDAOImpl.findByUserAndRoleId : r4 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.UserRoleDAOImpl: javax.persistence.Query createQuery(java.lang.String)>("SELECT DISTINCT(userRole) FROM UserRole userRole LEFT JOIN FETCH userRole.user user LEFT JOIN FETCH userRole.role role WHERE user.id = ?1 AND role.id = ?2")
de.htw.sdf.photoplatform.repository.impl.UserRoleDAOImpl.findByUserAndRoleId : r4 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.UserRoleDAOImpl: javax.persistence.Query createQuery(java.lang.String)>("SELECT DISTINCT(userRole) FROM UserRole userRole LEFT JOIN FETCH userRole.user user LEFT JOIN FETCH userRole.role role WHERE user.id = ?1 AND role.id = ?2") >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r2 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager>
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r2 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager> >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r3 = interfaceinvoke $r2.<javax.persistence.EntityManager: javax.persistence.Query createQuery(java.lang.String)>(r1)
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.setClazz : r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: java.lang.Class clazz> = r1 >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.getEntityManager : $r1 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager>
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.getEntityManager : $r1 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager> >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.getEntityManager : return $r1
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.getEntityManager : return $r1 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.UserRoleDAOImpl.findByUserAndRoleId : r4 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.UserRoleDAOImpl: javax.persistence.Query createQuery(java.lang.String)>("SELECT DISTINCT(userRole) FROM UserRole userRole LEFT JOIN FETCH userRole.user user LEFT JOIN FETCH userRole.role role WHERE user.id = ?1 AND role.id = ?2")
de.htw.sdf.photoplatform.repository.impl.UserRoleDAOImpl.findByUserAndRoleId : r4 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.UserRoleDAOImpl: javax.persistence.Query createQuery(java.lang.String)>("SELECT DISTINCT(userRole) FROM UserRole userRole LEFT JOIN FETCH userRole.user user LEFT JOIN FETCH userRole.role role WHERE user.id = ?1 AND role.id = ?2") >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r2 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager>
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r2 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager> >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r3 = interfaceinvoke $r2.<javax.persistence.EntityManager: javax.persistence.Query createQuery(java.lang.String)>(r1)
