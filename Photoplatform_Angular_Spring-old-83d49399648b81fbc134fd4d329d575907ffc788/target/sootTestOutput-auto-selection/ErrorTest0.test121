de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.setClazz : r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: java.lang.Class clazz> = r1 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r2 = specialinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: java.lang.StringBuilder initFullDataCollectionSelect()>()
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r2 = specialinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: java.lang.StringBuilder initFullDataCollectionSelect()>() >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : $r2 = new java.lang.StringBuilder
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : $r2 = new java.lang.StringBuilder >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT DISTINCT(collection) FROM Collection collection ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT DISTINCT(collection) FROM Collection collection ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.user owner ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.user owner ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.thumbnail thumbnail ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.thumbnail thumbnail ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.collectionImages collectionImages ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.collectionImages collectionImages ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collectionImages.image image ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collectionImages.image image ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.collectionCategories collectionCategories ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.collectionCategories collectionCategories ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : return $r2
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : return $r2 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE owner.id = :userId")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE owner.id = :userId") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND collection.isPublic = :isPublic")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND collection.isPublic = :isPublic") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r3 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: javax.persistence.Query createQuery(java.lang.String)>($r5)
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r3 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: javax.persistence.Query createQuery(java.lang.String)>($r5) >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r2 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager>
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r2 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager> >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r3 = interfaceinvoke $r2.<javax.persistence.EntityManager: javax.persistence.Query createQuery(java.lang.String)>(r1)
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.setClazz : r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: java.lang.Class clazz> = r1 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r2 = specialinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: java.lang.StringBuilder initFullDataCollectionSelect()>()
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r2 = specialinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: java.lang.StringBuilder initFullDataCollectionSelect()>() >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : $r2 = new java.lang.StringBuilder
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : $r2 = new java.lang.StringBuilder >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT DISTINCT(collection) FROM Collection collection ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT DISTINCT(collection) FROM Collection collection ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.user owner ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.user owner ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.thumbnail thumbnail ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.thumbnail thumbnail ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.collectionImages collectionImages ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.collectionImages collectionImages ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collectionImages.image image ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collectionImages.image image ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.collectionCategories collectionCategories ")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN FETCH collection.collectionCategories collectionCategories ") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : return $r2
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.initFullDataCollectionSelect : return $r2 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE owner.id = :userId")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE owner.id = :userId") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND collection.isPublic = :isPublic")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND collection.isPublic = :isPublic") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r3 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: javax.persistence.Query createQuery(java.lang.String)>($r5)
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r3 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: javax.persistence.Query createQuery(java.lang.String)>($r5) >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r2 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager>
de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r2 = r0.<de.htw.sdf.photoplatform.repository.common.GenericDAOImpl: javax.persistence.EntityManager entityManager> >>>>>>>> de.htw.sdf.photoplatform.repository.common.GenericDAOImpl.createQuery : $r3 = interfaceinvoke $r2.<javax.persistence.EntityManager: javax.persistence.Query createQuery(java.lang.String)>(r1)
