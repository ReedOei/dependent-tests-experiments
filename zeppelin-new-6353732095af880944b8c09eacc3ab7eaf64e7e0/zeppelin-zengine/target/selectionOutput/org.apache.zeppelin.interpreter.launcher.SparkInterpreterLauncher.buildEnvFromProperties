org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r7 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r8 = new java.util.Properties
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r8 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r8.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r8.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r9)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r10 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r10 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r10.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r10.<java.util.Properties: java.util.Set stringPropertyNames()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r61 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r61 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r51 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForPySpark(java.util.Properties)>($r8)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForPySpark(java.util.Properties)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForSparkR(java.util.Properties)>($r8)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForSparkR(java.util.Properties)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r49 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r63 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r63 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r63.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r63.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r4 == null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r44 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z2 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r35 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r65 = virtualinvoke $r8.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r65 = virtualinvoke $r8.<java.util.Properties: java.util.Set stringPropertyNames()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r66 = interfaceinvoke $r65.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r66 = interfaceinvoke $r65.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z10 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z10 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z10 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z10 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r26 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z10 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r68 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r68 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z3 = virtualinvoke $r12.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isUserImpersonate()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z3 = virtualinvoke $r12.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isUserImpersonate()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z3 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(r68)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r69 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r69 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_CONF", $r69)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_CONF", $r69) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r70 = newarray (java.lang.String)[3]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r70 = newarray (java.lang.String)[3] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r70[0] = "SPARK_HOME"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r70[0] = "SPARK_HOME" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r70[1] = "SPARK_CONF_DIR"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r70[1] = "SPARK_CONF_DIR" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r70[2] = "HADOOP_CONF_DIR"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r70[2] = "HADOOP_CONF_DIR" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i0 = lengthof $r70
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i0 = lengthof $r70 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r5 = $r70[i1]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r15 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r15 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r14 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r14 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buildEnvFromProperties: ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buildEnvFromProperties: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : return $r7
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r5 = $r70[i1] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>(r5)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r6 == null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r6 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r6 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = i1 + 1
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= (branch)]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = i1 + 1
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(r68) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z4 != 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z4 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z5 = virtualinvoke r68.<java.lang.String: boolean equals(java.lang.Object)>("false")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z4 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r20 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r20 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --proxy-user ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --proxy-user ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r22 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getUserName()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r22 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getUserName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r69 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z5 = virtualinvoke r68.<java.lang.String: boolean equals(java.lang.Object)>("false") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z5 != 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z5 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r20 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z5 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r69 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r26 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r67 = (java.lang.String) $r26
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r67 = (java.lang.String) $r26 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r27 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r27 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --conf ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --conf ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r31 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r67)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r31 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r67) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z10 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z10 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z10 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r35 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z6 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>("cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z6 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>("cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z6 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r36 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r65 = virtualinvoke $r8.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r36 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --files ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --files ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r38 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r38 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r39 = virtualinvoke $r38.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r39 = virtualinvoke $r38.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/log4j_yarn_cluster.properties")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/log4j_yarn_cluster.properties") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r65 = virtualinvoke $r8.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r44 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r44.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r44.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --master ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --master ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r49 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z7 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>("cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z7 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>("cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z7 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z7 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_YARN_CLUSTER", "true")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z7 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r63 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_YARN_CLUSTER", "true") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r63 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r51 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r62 = (java.lang.String) $r51
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r62 = (java.lang.String) $r51 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z8 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>(r62)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z8 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>(r62) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z8 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z8 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r58 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z8 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r52 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r52 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r53 = virtualinvoke $r52.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r62)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r53 = virtualinvoke $r52.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r62) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z9 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isSparkConf(java.lang.String,java.lang.String)>(r62, $r53)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z9 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isSparkConf(java.lang.String,java.lang.String)>(r62, $r53) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z9 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z9 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r54 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z9 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r54 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r55 = virtualinvoke $r54.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r62)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r55 = virtualinvoke $r54.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r62) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r56 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String toShellFormat(java.lang.String)>($r55)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r56 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String toShellFormat(java.lang.String)>($r55) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r8.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r62, $r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r8.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r62, $r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r58 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r58.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r62)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r58.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r62) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r62, $r59)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r62, $r59) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r52 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
