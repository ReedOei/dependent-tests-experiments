org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r9 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r9.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r9.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r10 = new org.apache.zeppelin.interpreter.ConfInterpreter
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r10 = new org.apache.zeppelin.interpreter.ConfInterpreter >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r11 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r11 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r10.<org.apache.zeppelin.interpreter.ConfInterpreter: void <init>(java.util.Properties,java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>($r11, r2, r0)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r10.<org.apache.zeppelin.interpreter.ConfInterpreter: void <init>(java.util.Properties,java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>($r11, r2, r0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : return $r9
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r7 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r12
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r7 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r14 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r14 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r15 = virtualinvoke r7.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r15 = virtualinvoke r7.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r13.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.LifecycleManager)>($r14, r3, $r15, r1, $r16)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r13.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.LifecycleManager)>($r14, r3, $r15, r1, $r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z2 = virtualinvoke r7.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean isDefaultInterpreter()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z2 = virtualinvoke r7.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean isDefaultInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z2 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r9.<java.util.List: void add(int,java.lang.Object)>(0, $r13)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r18 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r18 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r17 = newarray (java.lang.Object)[3]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r17 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r19 = virtualinvoke $r13.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r19 = virtualinvoke $r13.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r17[0] = $r19
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r17[0] = $r19 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r17[1] = r1
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r17[1] = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r17[2] = r3
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r17[2] = r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Interpreter {} created for user: {}, sessionId: {}", $r17)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Interpreter {} created for user: {}, sessionId: {}", $r17) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r9.<java.util.List: void add(int,java.lang.Object)>(0, $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $r18 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $r18 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r18 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>
