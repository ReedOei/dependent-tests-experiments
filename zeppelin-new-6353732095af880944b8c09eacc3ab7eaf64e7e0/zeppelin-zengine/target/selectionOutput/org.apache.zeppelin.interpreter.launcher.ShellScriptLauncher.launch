org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r7 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Launching Interpreter: ")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Launching Interpreter: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingGroup()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> = $r12
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> = $r12 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingGroup()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r5 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r5 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : i0 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : i0 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r49 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z1 = virtualinvoke $r15.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isRecoveryEnabled()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z1 = virtualinvoke $r15.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isRecoveryEnabled()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r30 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.interpreter.recovery.RecoveryStorage recoveryStorage>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r53 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r53 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r53.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r54 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r54 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r55 = virtualinvoke $r54.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r55 = virtualinvoke $r54.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r58 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingId()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r58 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingId()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r16 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r16 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r61 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String getPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r17 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r17 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r61 = virtualinvoke $r17.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterRemoteRunnerPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r61 = virtualinvoke $r17.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterRemoteRunnerPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r19 = virtualinvoke $r18.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getCallbackPortRange()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r19 = virtualinvoke $r18.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getCallbackPortRange()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r21 = virtualinvoke $r20.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterPortRange()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r21 = virtualinvoke $r20.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterPortRange()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r23 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r23 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterDir()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterDir()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r29 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties(org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext)>(r1)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r29 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties(org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z2 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isUserImpersonate()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z2 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isUserImpersonate()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r16.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,java.lang.String,boolean)>($r61, $r19, $r21, $r28, r60, $r29, i0, r5, $z2)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r16.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,java.lang.String,boolean)>($r61, $r19, $r21, $r28, r60, $r29, i0, r5, $z2) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return $r16
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r61 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : goto [?= $r18 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>]
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : goto [?= $r18 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>] >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r30 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.interpreter.recovery.RecoveryStorage recoveryStorage> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r31 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r31 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r52 = virtualinvoke $r30.<org.apache.zeppelin.interpreter.recovery.RecoveryStorage: org.apache.zeppelin.interpreter.launcher.InterpreterClient getInterpreterClient(java.lang.String)>($r31)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r52 = virtualinvoke $r30.<org.apache.zeppelin.interpreter.recovery.RecoveryStorage: org.apache.zeppelin.interpreter.launcher.InterpreterClient getInterpreterClient(java.lang.String)>($r31) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r52 == null
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r52 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z3 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: boolean isRunning()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r52 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r53 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z3 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: boolean isRunning()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z3 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r42 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r32 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r32 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot recover interpreter process: ")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot recover interpreter process: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r35 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: java.lang.String getHost()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r35 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: java.lang.String getHost()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $i1 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: int getPort()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $i1 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: int getPort()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", as it is already terminated.")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", as it is already terminated.") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r33.<org.slf4j.Logger: void warn(java.lang.String)>($r40)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r33.<org.slf4j.Logger: void warn(java.lang.String)>($r40) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r53 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r42 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r41 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r41 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r41.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r41.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recover interpreter process: ")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recover interpreter process: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r44 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: java.lang.String getHost()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r44 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: java.lang.String getHost()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $i2 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: int getPort()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $i2 = interfaceinvoke r52.<org.apache.zeppelin.interpreter.launcher.InterpreterClient: int getPort()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r42.<org.slf4j.Logger: void info(java.lang.String)>($r48)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r42.<org.slf4j.Logger: void info(java.lang.String)>($r48) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return r52
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r49 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r50 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r50 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterSettingName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r51 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String getHost()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r51 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String getHost()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $i3 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: int getPort()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $i3 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: int getPort()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r49.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess: void <init>(java.lang.String,int,java.lang.String,int)>($r50, i0, $r51, $i3)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r49.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess: void <init>(java.lang.String,int,java.lang.String,int)>($r50, i0, $r51, $i3) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return $r49
