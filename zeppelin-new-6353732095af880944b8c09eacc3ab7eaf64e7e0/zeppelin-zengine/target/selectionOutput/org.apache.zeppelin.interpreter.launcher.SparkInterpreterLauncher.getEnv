org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : $r2 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : if r3 != null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : if r3 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : if r3 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : return r3
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : return r3
