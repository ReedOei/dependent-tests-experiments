crystal.server.HgLogParser.parseLog : $r1 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint> >>>>>>>> crystal.server.HgLogParser.parseLog : $r2 = staticinvoke <crystal.server.HgLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1)
crystal.server.HgLogParser.parseLog : $r2 = staticinvoke <crystal.server.HgLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0)
crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0) >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : if r0 != null
crystal.util.ValidInputChecker.checkNullInput : if r0 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.util.HashMap
crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.util.HashMap >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.util.HashMap: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.util.HashMap: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r2 = $r15
crystal.server.AbstractLogParser.abstractParseLog : r2 = $r15 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.server.AbstractLogParser.abstractParseLog : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r3 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r3 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3)
crystal.server.AbstractLogParser.abstractParseLog : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r19 = (java.lang.String) $r18
crystal.server.AbstractLogParser.abstractParseLog : $r19 = (java.lang.String) $r18 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r4 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r21)
crystal.server.AbstractLogParser.abstractParseLog : r4 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r21) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r4
crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r4 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = 0
crystal.server.AbstractLogParser.abstractParseLog : i1 = 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0
crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r5 = r4[i1]
crystal.server.AbstractLogParser.abstractParseLog : r5 = r4[i1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>()
crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0
crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1
crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : return r2
crystal.server.AbstractLogParser.abstractParseLog : return r2 >>>>>>>> crystal.server.HgLogParser.parseLog : return $r2
