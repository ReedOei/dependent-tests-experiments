crystal.client.ConflictDaemon.getInstance : $r0 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : if $r0 != null
crystal.client.ConflictDaemon.getInstance : if $r0 != null >>>>>>>> crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance>
crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : return $r2
crystal.client.ConflictDaemon.getInstance : return $r2 >>>>>>>> crystal.client.ConflictDaemon.isEnabled : $z0 = r0.<crystal.client.ConflictDaemon: boolean _enabled>
crystal.client.ConflictDaemon.isEnabled : $z0 = r0.<crystal.client.ConflictDaemon: boolean _enabled> >>>>>>>> crystal.client.ConflictDaemon.isEnabled : return $z0
crystal.client.ConflictDaemon.isEnabled : return $z0 >>>>>>>> crystal.client.ConflictDaemon.getLocalStates : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.getLocalStates : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.getLocalStates : $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>()
crystal.client.ConflictDaemon.getLocalStates : $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>() >>>>>>>> crystal.client.ConflictDaemon.getLocalStates : return $r2
crystal.client.ConflictDaemon.getLocalStates : return $r2 >>>>>>>> crystal.client.ConflictDaemon.removeAllListeners : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Vector _listeners>
crystal.client.ConflictDaemon.removeAllListeners : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Vector _listeners> >>>>>>>> crystal.client.ConflictDaemon.removeAllListeners : virtualinvoke $r1.<java.util.Vector: void removeAllElements()>()
crystal.client.ConflictDaemon.removeAllListeners : virtualinvoke $r1.<java.util.Vector: void removeAllElements()>() >>>>>>>> crystal.client.ConflictDaemon.enable : r0.<crystal.client.ConflictDaemon: boolean _enabled> = z0
crystal.client.ConflictDaemon.enable : r0.<crystal.client.ConflictDaemon: boolean _enabled> = z0 >>>>>>>> crystal.client.ConflictDaemon.getRelationships : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _relationshipMap>
crystal.client.ConflictDaemon.getRelationships : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _relationshipMap> >>>>>>>> crystal.client.ConflictDaemon.getRelationships : $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>()
crystal.client.ConflictDaemon.getRelationships : $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>() >>>>>>>> crystal.client.ConflictDaemon.getRelationships : return $r2
crystal.client.ConflictDaemon.getRelationships : return $r2 >>>>>>>> crystal.model.Relationship.getDominant : r1 = null
crystal.model.Relationship.getDominant : r1 = null >>>>>>>> crystal.model.Relationship.getDominant : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
crystal.model.Relationship.getDominant : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> crystal.model.Relationship.getDominant : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.model.Relationship.getDominant : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.model.Relationship.getDominant : if $z0 == 0
crystal.model.Relationship.getDominant : if $z0 == 0 >>>>>>>> crystal.model.Relationship.getDominant : $r5 = virtualinvoke r1.<crystal.model.Relationship: java.awt.Image getImage()>()
