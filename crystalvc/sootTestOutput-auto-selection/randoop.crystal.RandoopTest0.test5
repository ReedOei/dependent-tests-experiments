crystal.server.GitLogParser.parseLog : $r1 = <crystal.server.GitLogParser: java.util.Map gitCheckpoint> >>>>>>>> crystal.server.GitLogParser.parseLog : $r2 = staticinvoke <crystal.server.GitLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1)
crystal.server.GitLogParser.parseLog : $r2 = staticinvoke <crystal.server.GitLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0)
crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0) >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : if r0 != null
crystal.util.ValidInputChecker.checkNullInput : if r0 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.util.HashMap
crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.util.HashMap >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.util.HashMap: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.util.HashMap: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r2 = $r15
crystal.server.AbstractLogParser.abstractParseLog : r2 = $r15 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.server.AbstractLogParser.abstractParseLog : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r3 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r3 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3)
crystal.server.AbstractLogParser.abstractParseLog : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r19 = (java.lang.String) $r18
crystal.server.AbstractLogParser.abstractParseLog : $r19 = (java.lang.String) $r18 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r4 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r21)
crystal.server.AbstractLogParser.abstractParseLog : r4 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r21) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r4
crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r4 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = 0
crystal.server.AbstractLogParser.abstractParseLog : i1 = 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0
crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r5 = r4[i1]
crystal.server.AbstractLogParser.abstractParseLog : r5 = r4[i1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>()
crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0
crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r23 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r23 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r24 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r24 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r25 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24)
crystal.server.AbstractLogParser.abstractParseLog : $r25 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r26 = (java.lang.String) $r25
crystal.server.AbstractLogParser.abstractParseLog : $r26 = (java.lang.String) $r25 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)
crystal.server.AbstractLogParser.abstractParseLog : $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractLogParser.abstractParseLog : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r30 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.abstractParseLog : $r30 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r30.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r29, "\n")
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r30.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r29, "\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r6 = $r30
crystal.server.AbstractLogParser.abstractParseLog : r6 = $r30 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r7 = null
crystal.server.AbstractLogParser.abstractParseLog : r7 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = null
crystal.server.AbstractLogParser.abstractParseLog : r8 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = null
crystal.server.AbstractLogParser.abstractParseLog : r9 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = null
crystal.server.AbstractLogParser.abstractParseLog : r10 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r31 = new java.util.ArrayList
crystal.server.AbstractLogParser.abstractParseLog : $r31 = new java.util.ArrayList >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r31.<java.util.ArrayList: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r31.<java.util.ArrayList: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r11 = $r31
crystal.server.AbstractLogParser.abstractParseLog : r11 = $r31 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r32 = virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.abstractParseLog : $r32 = virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r12 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : r12 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r33 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r33 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r34 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33)
crystal.server.AbstractLogParser.abstractParseLog : $r34 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r35 = (java.lang.String) $r34
crystal.server.AbstractLogParser.abstractParseLog : $r35 = (java.lang.String) $r34 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r35)
crystal.server.AbstractLogParser.abstractParseLog : $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r35) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r36 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : $r36 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r1 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.clipFront : $r1 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.clipFront : specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String)>(r0)
crystal.server.AbstractLogParser.clipFront : specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String)>(r0) >>>>>>>> crystal.server.AbstractLogParser.clipFront : r2 = $r1
crystal.server.AbstractLogParser.clipFront : r2 = $r1 >>>>>>>> crystal.server.AbstractLogParser.clipFront : virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.clipFront : virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : r3 = ""
crystal.server.AbstractLogParser.clipFront : r3 = "" >>>>>>>> crystal.server.AbstractLogParser.clipFront : $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.clipFront : $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : if $z0 == 0
crystal.server.AbstractLogParser.clipFront : if $z0 == 0 >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r10 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.clipFront : $r10 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : return $r10
crystal.server.AbstractLogParser.clipFront : return $r10 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z3 = virtualinvoke $r36.<java.lang.String: boolean contains(java.lang.CharSequence)>(":")
crystal.server.AbstractLogParser.abstractParseLog : $z3 = virtualinvoke $r36.<java.lang.String: boolean contains(java.lang.CharSequence)>(":") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r7 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : r7 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r10 != null
crystal.server.AbstractLogParser.abstractParseLog : if r10 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = ""
crystal.server.AbstractLogParser.abstractParseLog : r10 = "" >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r8 != null
crystal.server.AbstractLogParser.abstractParseLog : if r8 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = ""
crystal.server.AbstractLogParser.abstractParseLog : r8 = "" >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r9 != null
crystal.server.AbstractLogParser.abstractParseLog : if r9 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = ""
crystal.server.AbstractLogParser.abstractParseLog : r9 = "" >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r7 == null
crystal.server.AbstractLogParser.abstractParseLog : if r7 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r89 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r89 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r90 = new crystal.server.AbstractLogParser$Checkpoint
crystal.server.AbstractLogParser.abstractParseLog : $r90 = new crystal.server.AbstractLogParser$Checkpoint >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r91 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r91 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r92 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r92 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r93 = virtualinvoke r9.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r93 = virtualinvoke r9.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r94 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r94 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r90.<crystal.server.AbstractLogParser$Checkpoint: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r91, $r92, $r93, $r94, r11)
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r90.<crystal.server.AbstractLogParser$Checkpoint: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r91, $r92, $r93, $r94, r11) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r89, $r90)
crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r89, $r90) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= i1 = i1 + 1]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= i1 = i1 + 1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1
crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : return r2
crystal.server.AbstractLogParser.abstractParseLog : return r2 >>>>>>>> crystal.server.GitLogParser.parseLog : return $r2
