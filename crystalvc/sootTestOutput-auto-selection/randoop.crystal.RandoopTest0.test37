crystal.client.ConflictSystemTray.startLogging : $r0 = <crystal.Constants: org.apache.log4j.Level LOG_LEVEL> >>>>>>>> crystal.client.ConflictSystemTray.startLogging : $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home")
crystal.client.ConflictSystemTray.startLogging : $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home") >>>>>>>> crystal.client.ConflictSystemTray.startLogging : staticinvoke <crystal.util.LSMRLogger: void startLog4J(boolean,boolean,org.apache.log4j.Level,java.lang.String,java.lang.String)>(1, 1, $r0, $r1, ".conflictClientLog")
crystal.client.ConflictSystemTray.startLogging : staticinvoke <crystal.util.LSMRLogger: void startLog4J(boolean,boolean,org.apache.log4j.Level,java.lang.String,java.lang.String)>(1, 1, $r0, $r1, ".conflictClientLog") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r3.<org.apache.log4j.Logger: void removeAllAppenders()>()
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r3.<org.apache.log4j.Logger: void removeAllAppenders()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : staticinvoke <org.apache.log4j.BasicConfigurator: void configure()>()
crystal.util.LSMRLogger.startLog4J : staticinvoke <org.apache.log4j.BasicConfigurator: void configure()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r10 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r10 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r11 = virtualinvoke $r10.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>()
crystal.util.LSMRLogger.startLog4J : $r11 = virtualinvoke $r10.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r12 = interfaceinvoke $r11.<java.util.Enumeration: java.lang.Object nextElement()>()
crystal.util.LSMRLogger.startLog4J : $r12 = interfaceinvoke $r11.<java.util.Enumeration: java.lang.Object nextElement()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r4 = (org.apache.log4j.ConsoleAppender) $r12
crystal.util.LSMRLogger.startLog4J : r4 = (org.apache.log4j.ConsoleAppender) $r12 >>>>>>>> crystal.util.LSMRLogger.startLog4J : if z0 == 0
crystal.util.LSMRLogger.startLog4J : if z0 == 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>
crystal.util.LSMRLogger.startLog4J : $r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR> >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setThreshold(org.apache.log4j.Priority)>($r5)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setThreshold(org.apache.log4j.Priority)>($r5) >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r1 == null
crystal.util.LSMRLogger.startLog4J : if r1 == null >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r13 = <java.io.File: java.lang.String separator>
crystal.util.LSMRLogger.startLog4J : $r13 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.util.LSMRLogger.startLog4J : $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r13)
crystal.util.LSMRLogger.startLog4J : $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r13) >>>>>>>> crystal.util.LSMRLogger.startLog4J : if $z2 != 0
crystal.util.LSMRLogger.startLog4J : if $z2 != 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r14 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r14 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r16 = <java.io.File: java.lang.String separator>
crystal.util.LSMRLogger.startLog4J : $r16 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
crystal.util.LSMRLogger.startLog4J : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r18 = new java.io.File
crystal.util.LSMRLogger.startLog4J : $r18 = new java.io.File >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r6 = $r18
crystal.util.LSMRLogger.startLog4J : r6 = $r18 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $z3 = virtualinvoke r6.<java.io.File: boolean exists()>()
crystal.util.LSMRLogger.startLog4J : $z3 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : if $z3 != 0
crystal.util.LSMRLogger.startLog4J : if $z3 != 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r2 != null
crystal.util.LSMRLogger.startLog4J : if r2 != null >>>>>>>> crystal.util.LSMRLogger.startLog4J : r25 = null
crystal.util.LSMRLogger.startLog4J : r25 = null >>>>>>>> crystal.util.LSMRLogger.startLog4J : n0 = null
crystal.util.LSMRLogger.startLog4J : n0 = null >>>>>>>> crystal.util.LSMRLogger.startLog4J : if z1 == 0
crystal.util.LSMRLogger.startLog4J : if z1 == 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r26 = new org.apache.log4j.xml.XMLLayout
crystal.util.LSMRLogger.startLog4J : $r26 = new org.apache.log4j.xml.XMLLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r26.<org.apache.log4j.xml.XMLLayout: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r26.<org.apache.log4j.xml.XMLLayout: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r27 = $r26
crystal.util.LSMRLogger.startLog4J : r27 = $r26 >>>>>>>> crystal.util.LSMRLogger.startLog4J : goto [?= (branch)]
crystal.util.LSMRLogger.startLog4J : goto [?= (branch)] >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r4 == null
crystal.util.LSMRLogger.startLog4J : if r4 == null >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r29 = new org.apache.log4j.PatternLayout
crystal.util.LSMRLogger.startLog4J : $r29 = new org.apache.log4j.PatternLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r7 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE>
crystal.util.LSMRLogger.startLog4J : $r7 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE> >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r29.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r7)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r29.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r7) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setLayout(org.apache.log4j.Layout)>($r29)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setLayout(org.apache.log4j.Layout)>($r29) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r30 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r30 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r31 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r31 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
crystal.util.LSMRLogger.startLog4J : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r30.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r27, $r35)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r30.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r27, $r35) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r25 = $r30
crystal.util.LSMRLogger.startLog4J : r25 = $r30 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r44 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r44 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r44.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r25)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r44.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r25) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r45 = new org.apache.log4j.xml.XMLLayout
crystal.util.LSMRLogger.startLog4J : $r45 = new org.apache.log4j.xml.XMLLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r45.<org.apache.log4j.xml.XMLLayout: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r45.<org.apache.log4j.xml.XMLLayout: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r8 = $r45
crystal.util.LSMRLogger.startLog4J : r8 = $r45 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r8.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r8.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r46 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r46 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r47 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r47 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r47.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r47.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
crystal.util.LSMRLogger.startLog4J : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r46.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r8, $r51)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r46.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r8, $r51) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r52 = $r46
crystal.util.LSMRLogger.startLog4J : r52 = $r46 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r53 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r53 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r53.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r52)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r53.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r52) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r54 = new org.apache.log4j.PatternLayout
crystal.util.LSMRLogger.startLog4J : $r54 = new org.apache.log4j.PatternLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r55 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE>
crystal.util.LSMRLogger.startLog4J : $r55 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE> >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r54.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r55)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r54.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r55) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r9 = $r54
crystal.util.LSMRLogger.startLog4J : r9 = $r54 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r56 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r56 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r57 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r57 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log")
crystal.util.LSMRLogger.startLog4J : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r56.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r9, $r61)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r56.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r9, $r61) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r62 = $r56
crystal.util.LSMRLogger.startLog4J : r62 = $r56 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r63 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r63 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r63.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r62)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r63.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r62) >>>>>>>> crystal.util.LSMRLogger.startLog4J : goto [?= $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()]
crystal.util.LSMRLogger.startLog4J : goto [?= $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()] >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r66.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(r0)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r66.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(r0) >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : if r0 == null
crystal.util.ValidInputChecker.checkValidStringInput : if r0 == null >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
crystal.util.ValidInputChecker.checkValidStringInput : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.util.ValidInputChecker.checkValidStringInput : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : if $z0 == 0
crystal.util.ValidInputChecker.checkValidStringInput : if $z0 == 0 >>>>>>>> crystal.model.DataSource.setParent : if r1 == null
crystal.model.DataSource.setParent : if r1 == null >>>>>>>> crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.model.DataSource.setParent : if $z0 == 0
crystal.model.DataSource.setParent : if $z0 == 0 >>>>>>>> crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1
crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1 >>>>>>>> crystal.client.ProjectPreferences.addDataSource : $r5 = r0.<crystal.client.ProjectPreferences: java.util.Vector _dataSources>
crystal.client.ProjectPreferences.addDataSource : $r5 = r0.<crystal.client.ProjectPreferences: java.util.Vector _dataSources> >>>>>>>> crystal.client.ProjectPreferences.addDataSource : r2 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>()
crystal.client.ProjectPreferences.addDataSource : r2 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>() >>>>>>>> crystal.client.ProjectPreferences.addDataSource : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.client.ProjectPreferences.addDataSource : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.client.ProjectPreferences.addDataSource : if $z0 == 0
crystal.client.ProjectPreferences.addDataSource : if $z0 == 0 >>>>>>>> crystal.client.ProjectPreferences.addDataSource : $r18 = r0.<crystal.client.ProjectPreferences: java.util.Vector _dataSources>
crystal.client.ProjectPreferences.addDataSource : $r18 = r0.<crystal.client.ProjectPreferences: java.util.Vector _dataSources> >>>>>>>> crystal.client.ProjectPreferences.addDataSource : virtualinvoke $r18.<java.util.Vector: boolean add(java.lang.Object)>(r1)
crystal.client.ProjectPreferences.addDataSource : virtualinvoke $r18.<java.util.Vector: boolean add(java.lang.Object)>(r1) >>>>>>>> crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = null
crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = null >>>>>>>> crystal.model.DataSource.setParent : goto [?= return]
crystal.model.DataSource.setParent : goto [?= return] >>>>>>>> crystal.client.ProjectPreferences.addDataSource : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
crystal.client.ProjectPreferences.addDataSource : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> crystal.client.ProjectPreferences.addDataSource : r3 = (crystal.model.DataSource) $r6
crystal.client.ProjectPreferences.addDataSource : r3 = (crystal.model.DataSource) $r6 >>>>>>>> crystal.client.ProjectPreferences.addDataSource : $r7 = virtualinvoke r3.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.client.ProjectPreferences.addDataSource : $r7 = virtualinvoke r3.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.model.DataSource.getShortName : $r1 = r0.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.getShortName : $r1 = r0.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.getShortName : return $r1
crystal.model.DataSource.getShortName : return $r1 >>>>>>>> crystal.client.ProjectPreferences.addDataSource : $r8 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.client.ProjectPreferences.addDataSource : $r8 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.client.ProjectPreferences.addDataSource : $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8)
crystal.client.ProjectPreferences.addDataSource : $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8) >>>>>>>> crystal.client.ProjectPreferences.addDataSource : if $z1 == 0
crystal.client.ProjectPreferences.addDataSource : if $z1 == 0 >>>>>>>> crystal.client.ProjectPreferences.addDataSource : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
crystal.client.ProjectPreferences.addDataSource : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $r5 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.addProjectPreferences : $r5 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : r2 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>()
crystal.client.ClientPreferences.addProjectPreferences : r2 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>() >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.client.ClientPreferences.addProjectPreferences : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : if $z0 == 0
crystal.client.ClientPreferences.addProjectPreferences : if $z0 == 0 >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $r17 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.addProjectPreferences : $r17 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : virtualinvoke $r17.<java.util.Vector: boolean add(java.lang.Object)>(r1)
crystal.client.ClientPreferences.addProjectPreferences : virtualinvoke $r17.<java.util.Vector: boolean add(java.lang.Object)>(r1) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : r2 = staticinvoke <crystal.util.XMLTools: org.jdom.Document newXMLDocument()>()
crystal.client.ClientPreferences.savePreferencesToXML : r2 = staticinvoke <crystal.util.XMLTools: org.jdom.Document newXMLDocument()>() >>>>>>>> crystal.util.XMLTools.newXMLDocument : $r0 = new org.jdom.Document
crystal.util.XMLTools.newXMLDocument : $r0 = new org.jdom.Document >>>>>>>> crystal.util.XMLTools.newXMLDocument : specialinvoke $r0.<org.jdom.Document: void <init>()>()
crystal.util.XMLTools.newXMLDocument : specialinvoke $r0.<org.jdom.Document: void <init>()>() >>>>>>>> crystal.util.XMLTools.newXMLDocument : return $r0
crystal.util.XMLTools.newXMLDocument : return $r0 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r14 = new org.jdom.Element
crystal.client.ClientPreferences.savePreferencesToXML : $r14 = new org.jdom.Element >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r3 = <crystal.client.ClientPreferences$IPrefXML: java.lang.String[] ROOT>
crystal.client.ClientPreferences.savePreferencesToXML : $r3 = <crystal.client.ClientPreferences$IPrefXML: java.lang.String[] ROOT> >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r15 = $r3[0]
crystal.client.ClientPreferences.savePreferencesToXML : $r15 = $r3[0] >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : specialinvoke $r14.<org.jdom.Element: void <init>(java.lang.String)>($r15)
crystal.client.ClientPreferences.savePreferencesToXML : specialinvoke $r14.<org.jdom.Element: void <init>(java.lang.String)>($r15) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : r4 = $r14
crystal.client.ClientPreferences.savePreferencesToXML : r4 = $r14 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r16 = new org.jdom.Comment
crystal.client.ClientPreferences.savePreferencesToXML : $r16 = new org.jdom.Comment >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : specialinvoke $r16.<org.jdom.Comment: void <init>(java.lang.String)>(" Configuration file for Crystal conflict client. See documentation at ")
crystal.client.ClientPreferences.savePreferencesToXML : specialinvoke $r16.<org.jdom.Comment: void <init>(java.lang.String)>(" Configuration file for Crystal conflict client. See documentation at ") >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : r5 = $r16
crystal.client.ClientPreferences.savePreferencesToXML : r5 = $r16 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r17 = new org.jdom.Comment
crystal.client.ClientPreferences.savePreferencesToXML : $r17 = new org.jdom.Comment >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : specialinvoke $r17.<org.jdom.Comment: void <init>(java.lang.String)>(" http://www.cs.washington.edu/homes/brun/research/crystal/ . ")
crystal.client.ClientPreferences.savePreferencesToXML : specialinvoke $r17.<org.jdom.Comment: void <init>(java.lang.String)>(" http://www.cs.washington.edu/homes/brun/research/crystal/ . ") >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : r6 = $r17
crystal.client.ClientPreferences.savePreferencesToXML : r6 = $r17 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r18 = new org.jdom.Comment
crystal.client.ClientPreferences.savePreferencesToXML : $r18 = new org.jdom.Comment >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : specialinvoke $r18.<org.jdom.Comment: void <init>(java.lang.String)>(" Example:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ccConfig tempDirectory=\"C:/temp/conflictClient/\" refresh=\"60\">\n  <project Kind=\"HG\" ShortName=\"MyFirstProject\" Clone=\"C:/projects/myLocalFirstProjectRepo/\">\n    <source ShortName=\"MASTER\" Clone=\"ssh://user@host/path/to/repo/\" />\n    <source ShortName=\"Friend\" Clone=\"ssh://user@host/path/to/friend/repo/\" />\n  </project>\n  <project Kind=\"HG\" ShortName=\"MySecondProject\" Clone=\"C:/projects/myLocalSecondProjectRepo/\">\n    <source ShortName=\"MASTER\" Clone=\"ssh://user@host/path/to/socond/project/repo/\" />\n    <source ShortName=\"Friend\" Clone=\"https://user@host/path/to/friend/second/repo/\" />\n  </project>\n</ccConfig>\n")
crystal.client.ClientPreferences.savePreferencesToXML : specialinvoke $r18.<org.jdom.Comment: void <init>(java.lang.String)>(" Example:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ccConfig tempDirectory=\"C:/temp/conflictClient/\" refresh=\"60\">\n  <project Kind=\"HG\" ShortName=\"MyFirstProject\" Clone=\"C:/projects/myLocalFirstProjectRepo/\">\n    <source ShortName=\"MASTER\" Clone=\"ssh://user@host/path/to/repo/\" />\n    <source ShortName=\"Friend\" Clone=\"ssh://user@host/path/to/friend/repo/\" />\n  </project>\n  <project Kind=\"HG\" ShortName=\"MySecondProject\" Clone=\"C:/projects/myLocalSecondProjectRepo/\">\n    <source ShortName=\"MASTER\" Clone=\"ssh://user@host/path/to/socond/project/repo/\" />\n    <source ShortName=\"Friend\" Clone=\"https://user@host/path/to/friend/second/repo/\" />\n  </project>\n</ccConfig>\n") >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : r7 = $r18
crystal.client.ClientPreferences.savePreferencesToXML : r7 = $r18 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r2.<org.jdom.Document: org.jdom.Document addContent(org.jdom.Content)>(r5)
crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r2.<org.jdom.Document: org.jdom.Document addContent(org.jdom.Content)>(r5) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r2.<org.jdom.Document: org.jdom.Document addContent(org.jdom.Content)>(r6)
crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r2.<org.jdom.Document: org.jdom.Document addContent(org.jdom.Content)>(r6) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r2.<org.jdom.Document: org.jdom.Document addContent(org.jdom.Content)>(r7)
crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r2.<org.jdom.Document: org.jdom.Document addContent(org.jdom.Content)>(r7) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r22 = <crystal.client.ClientPreferences$IPrefXML: java.lang.String[] TMP_DIR>
crystal.client.ClientPreferences.savePreferencesToXML : $r22 = <crystal.client.ClientPreferences$IPrefXML: java.lang.String[] TMP_DIR> >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r23 = $r22[0]
crystal.client.ClientPreferences.savePreferencesToXML : $r23 = $r22[0] >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r24 = virtualinvoke r0.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>()
crystal.client.ClientPreferences.savePreferencesToXML : $r24 = virtualinvoke r0.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>() >>>>>>>> crystal.client.ClientPreferences.getTempDirectory : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _tempDirectory>
crystal.client.ClientPreferences.getTempDirectory : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _tempDirectory> >>>>>>>> crystal.client.ClientPreferences.getTempDirectory : return $r1
crystal.client.ClientPreferences.getTempDirectory : return $r1 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r4.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>($r23, $r24)
crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r4.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>($r23, $r24) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r26 = <crystal.client.ClientPreferences$IPrefXML: java.lang.String[] REFRESH>
crystal.client.ClientPreferences.savePreferencesToXML : $r26 = <crystal.client.ClientPreferences$IPrefXML: java.lang.String[] REFRESH> >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r27 = $r26[0]
crystal.client.ClientPreferences.savePreferencesToXML : $r27 = $r26[0] >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $l0 = virtualinvoke r0.<crystal.client.ClientPreferences: long getRefresh()>()
crystal.client.ClientPreferences.savePreferencesToXML : $l0 = virtualinvoke r0.<crystal.client.ClientPreferences: long getRefresh()>() >>>>>>>> crystal.client.ClientPreferences.getRefresh : $l0 = r0.<crystal.client.ClientPreferences: long _refresh>
crystal.client.ClientPreferences.getRefresh : $l0 = r0.<crystal.client.ClientPreferences: long _refresh> >>>>>>>> crystal.client.ClientPreferences.getRefresh : return $l0
crystal.client.ClientPreferences.getRefresh : return $l0 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r28 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0)
crystal.client.ClientPreferences.savePreferencesToXML : $r28 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r4.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>($r27, $r28)
crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r4.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>($r27, $r28) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r2.<org.jdom.Document: org.jdom.Document setRootElement(org.jdom.Element)>(r4)
crystal.client.ClientPreferences.savePreferencesToXML : virtualinvoke r2.<org.jdom.Document: org.jdom.Document setRootElement(org.jdom.Element)>(r4) >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $r31 = virtualinvoke r0.<crystal.client.ClientPreferences: java.util.Collection getProjectPreference()>()
crystal.client.ClientPreferences.savePreferencesToXML : $r31 = virtualinvoke r0.<crystal.client.ClientPreferences: java.util.Collection getProjectPreference()>() >>>>>>>> crystal.client.ClientPreferences.getProjectPreference : $r1 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.getProjectPreference : $r1 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.getProjectPreference : return $r1
crystal.client.ClientPreferences.getProjectPreference : return $r1 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : r8 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>()
crystal.client.ClientPreferences.savePreferencesToXML : r8 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()
crystal.client.ClientPreferences.savePreferencesToXML : $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : if $z0 == 0
crystal.client.ClientPreferences.savePreferencesToXML : if $z0 == 0 >>>>>>>> crystal.client.ClientPreferences.savePreferencesToXML : staticinvoke <crystal.util.XMLTools: boolean writeXMLDocument(org.jdom.Document,java.lang.String)>(r2, r1)
crystal.client.ClientPreferences.savePreferencesToXML : staticinvoke <crystal.util.XMLTools: boolean writeXMLDocument(org.jdom.Document,java.lang.String)>(r2, r1) >>>>>>>> crystal.util.XMLTools.writeXMLDocument : if r0 != null
crystal.util.XMLTools.writeXMLDocument : if r0 != null >>>>>>>> crystal.util.XMLTools.writeXMLDocument : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
crystal.util.XMLTools.writeXMLDocument : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> crystal.util.XMLTools.writeXMLDocument : $r5 = new java.io.FileOutputStream
crystal.util.XMLTools.writeXMLDocument : $r5 = new java.io.FileOutputStream >>>>>>>> crystal.util.XMLTools.writeXMLDocument : specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1)
