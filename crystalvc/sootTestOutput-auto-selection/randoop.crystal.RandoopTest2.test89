crystal.server.HgStateChecker.isHgRepository : $r3 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.HgStateChecker.isHgRepository : $z0 = staticinvoke <crystal.server.HgStateChecker: boolean isCorrectRepository(java.lang.String,java.lang.String,java.lang.String,crystal.model.DataSource$RepoKind)>(r0, r1, r2, $r3)
crystal.server.HgStateChecker.isHgRepository : $z0 = staticinvoke <crystal.server.HgStateChecker: boolean isCorrectRepository(java.lang.String,java.lang.String,java.lang.String,crystal.model.DataSource$RepoKind)>(r0, r1, r2, $r3) >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0)
crystal.server.AbstractStateChecker.isCorrectRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.isCorrectRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2)
crystal.server.AbstractStateChecker.isCorrectRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : $r6 = newarray (java.lang.String)[2]
crystal.server.AbstractStateChecker.isCorrectRepository : $r6 = newarray (java.lang.String)[2] >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : $r6[0] = "clone"
crystal.server.AbstractStateChecker.isCorrectRepository : $r6[0] = "clone" >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : $r6[1] = r1
crystal.server.AbstractStateChecker.isCorrectRepository : $r6[1] = r1 >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : r4 = $r6
crystal.server.AbstractStateChecker.isCorrectRepository : r4 = $r6 >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : $r7 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.isCorrectRepository : $r7 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.isCorrectRepository : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.server.AbstractStateChecker.isCorrectRepository : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("status_check")
crystal.server.AbstractStateChecker.isCorrectRepository : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("status_check") >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.isCorrectRepository : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.isCorrectRepository : $r11 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r0, r4, $r10, 0)
crystal.server.AbstractStateChecker.isCorrectRepository : $r11 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r0, r4, $r10, 0) >>>>>>>> crystal.util.RunIt.execute : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
crystal.util.RunIt.execute : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> crystal.util.RunIt.execute : $r13 = new java.lang.ProcessBuilder
crystal.util.RunIt.execute : $r13 = new java.lang.ProcessBuilder >>>>>>>> crystal.util.RunIt.execute : $r14 = newarray (java.lang.String)[0]
crystal.util.RunIt.execute : $r14 = newarray (java.lang.String)[0] >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r13.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r14)
crystal.util.RunIt.execute : specialinvoke $r13.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r14) >>>>>>>> crystal.util.RunIt.execute : r3 = $r13
crystal.util.RunIt.execute : r3 = $r13 >>>>>>>> crystal.util.RunIt.execute : $r15 = new java.io.File
crystal.util.RunIt.execute : $r15 = new java.io.File >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r2)
crystal.util.RunIt.execute : specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> crystal.util.RunIt.execute : r4 = $r15
crystal.util.RunIt.execute : r4 = $r15 >>>>>>>> crystal.util.RunIt.execute : $z1 = <crystal.util.RunIt: boolean $assertionsDisabled>
crystal.util.RunIt.execute : $z1 = <crystal.util.RunIt: boolean $assertionsDisabled> >>>>>>>> crystal.util.RunIt.execute : if $z1 != 0
crystal.util.RunIt.execute : if $z1 != 0 >>>>>>>> crystal.util.RunIt.execute : $z3 = <crystal.util.RunIt: boolean $assertionsDisabled>
crystal.util.RunIt.execute : $z3 = <crystal.util.RunIt: boolean $assertionsDisabled> >>>>>>>> crystal.util.RunIt.execute : if $z3 != 0
crystal.util.RunIt.execute : if $z3 != 0 >>>>>>>> crystal.util.RunIt.execute : $r18 = new java.io.File
crystal.util.RunIt.execute : $r18 = new java.io.File >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r2)
crystal.util.RunIt.execute : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>($r18)
crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>($r18) >>>>>>>> crystal.util.RunIt.execute : if r1 == null
crystal.util.RunIt.execute : if r1 == null >>>>>>>> crystal.util.RunIt.execute : $i4 = lengthof r1
crystal.util.RunIt.execute : $i4 = lengthof r1 >>>>>>>> crystal.util.RunIt.execute : if $i4 != 0
crystal.util.RunIt.execute : if $i4 != 0 >>>>>>>> crystal.util.RunIt.execute : $r22 = new java.util.Vector
crystal.util.RunIt.execute : $r22 = new java.util.Vector >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r22.<java.util.Vector: void <init>()>()
crystal.util.RunIt.execute : specialinvoke $r22.<java.util.Vector: void <init>()>() >>>>>>>> crystal.util.RunIt.execute : r5 = $r22
crystal.util.RunIt.execute : r5 = $r22 >>>>>>>> crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r0)
crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r0) >>>>>>>> crystal.util.RunIt.execute : r6 = r1
crystal.util.RunIt.execute : r6 = r1 >>>>>>>> crystal.util.RunIt.execute : i1 = lengthof r6
crystal.util.RunIt.execute : i1 = lengthof r6 >>>>>>>> crystal.util.RunIt.execute : i2 = 0
crystal.util.RunIt.execute : i2 = 0 >>>>>>>> crystal.util.RunIt.execute : if i2 >= i1
crystal.util.RunIt.execute : if i2 >= i1 >>>>>>>> crystal.util.RunIt.execute : r7 = r6[i2]
crystal.util.RunIt.execute : r7 = r6[i2] >>>>>>>> crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7)
crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> crystal.util.RunIt.execute : i2 = i2 + 1
crystal.util.RunIt.execute : i2 = i2 + 1 >>>>>>>> crystal.util.RunIt.execute : goto [?= (branch)]
crystal.util.RunIt.execute : goto [?= (branch)] >>>>>>>> crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>(r5)
crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>(r5) >>>>>>>> crystal.util.RunIt.execute : $r24 = <crystal.util.RunIt: org.apache.log4j.Logger _log>
crystal.util.RunIt.execute : $r24 = <crystal.util.RunIt: org.apache.log4j.Logger _log> >>>>>>>> crystal.util.RunIt.execute : $r25 = new java.lang.StringBuilder
crystal.util.RunIt.execute : $r25 = new java.lang.StringBuilder >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
crystal.util.RunIt.execute : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.RunIt.execute : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tRunIt::execute(..) - command: ")
crystal.util.RunIt.execute : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tRunIt::execute(..) - command: ") >>>>>>>> crystal.util.RunIt.execute : $r27 = virtualinvoke r3.<java.lang.ProcessBuilder: java.util.List command()>()
crystal.util.RunIt.execute : $r27 = virtualinvoke r3.<java.lang.ProcessBuilder: java.util.List command()>() >>>>>>>> crystal.util.RunIt.execute : $r28 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>()
crystal.util.RunIt.execute : $r28 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>() >>>>>>>> crystal.util.RunIt.execute : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)
crystal.util.RunIt.execute : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> crystal.util.RunIt.execute : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; in path: ")
crystal.util.RunIt.execute : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; in path: ") >>>>>>>> crystal.util.RunIt.execute : $r31 = virtualinvoke r3.<java.lang.ProcessBuilder: java.io.File directory()>()
crystal.util.RunIt.execute : $r31 = virtualinvoke r3.<java.lang.ProcessBuilder: java.io.File directory()>() >>>>>>>> crystal.util.RunIt.execute : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31)
crystal.util.RunIt.execute : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31) >>>>>>>> crystal.util.RunIt.execute : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.RunIt.execute : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.RunIt.execute : virtualinvoke $r24.<org.apache.log4j.Logger: void info(java.lang.Object)>($r33)
crystal.util.RunIt.execute : virtualinvoke $r24.<org.apache.log4j.Logger: void info(java.lang.Object)>($r33) >>>>>>>> crystal.util.RunIt.execute : r34 = virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.Process start()>()
