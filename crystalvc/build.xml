<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project xmlns:jacoco="antlib:org.jacoco.ant" basedir="." default="build" name="CrystalVC">
    <property environment="env"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
    <path id="CrystalVC.classpath">
        <pathelement location="bin"/>
        <pathelement location="lib/commons-io-1.4.jar"/>
        <pathelement location="lib/jdom-1.1.jar"/>
        <pathelement location="lib/log4j-1.2.15.jar"/>
        <pathelement location="lib/hgKit-279.jar"/>
        <pathelement location="../impact-tools/junit.jar"/>
        <pathelement location="../impact-tools/org.hamcrest.core_1.3.0.v201303031735.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="tests">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <src path="tests"/>
            <classpath refid="CrystalVC.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
	<target name="test" depends="build">
	  <junit forkMode="once">
	    <classpath>
	        <pathelement location="bin"/>
	        <pathelement location="lib/commons-io-1.4.jar"/>
	        <pathelement location="lib/jdom-1.1.jar"/>
	        <pathelement location="lib/log4j-1.2.15.jar"/>
	        <pathelement location="lib/hgKit-279.jar"/>
	        <pathelement location="../impact-tools/junit.jar"/>
	        <pathelement location="../impact-tools/org.hamcrest.core_1.3.0.v201303031735.jar"/>
		    <pathelement path="ant-mvn-formatter.jar" />
		    <pathelement location="vmvm.jar"/>
	    </classpath>
	    <batchtest>
	       <fileset dir="tests">
	            <include name="**/*Test*" />
	       </fileset>
	    </batchtest>
	    <formatter type="brief" />
		<jvmarg value="-Xbootclasspath/a:vmvm.jar"/>
		<jvmarg value="-javaagent:vmvm.jar"/>
	  </junit>
	</target>

<!-- Jacoco stuff -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="../impact-tools/jacocoant.jar"/>
	</taskdef>

	<path id="Crystal.classpath">
		<pathelement location="lib/commons-io-1.4.jar"/>
		<pathelement location="lib/jdom-1.1.jar"/>
		<pathelement location="lib/log4j-1.2.15.jar"/>
		<pathelement location="lib/hgKit-279.jar"/>
		<pathelement location="impact-tools/junit.jar"/>
		<pathelement location="impact-tools/org.hamcrest.core_1.3.0.v201303031735.jar"/>
	</path>

	<property name="src.dir" location="./src"/>
	<property name="tests.dir" location="./tests"/>
	<property name="result.dir" location="./target"/>
	<property name="result.classes.dir" location="${result.dir}/classes"/>
	<property name="result.tests.dir" location="${result.dir}/test-classes"/>
	<property name="result.classes.instr.dir" location="${result.dir}/classes-instr"/>
	<property name="result.report.w.dt.dir" location="${result.dir}/site-w-dt/jacoco"/>
    <property name="result.report.no.dt.dir" location="${result.dir}/site-no-dt/jacoco"/>

	<target name="jclean">
		<delete file="jacoco.exec"/>
		<delete file="-1 ms"/>
		<delete file="0 ms"/>
		<delete file="1 ms"/>
		<delete file="10 ms"/>
		<delete file="100 ms"/>
		<delete file="2013-08-28T20-44-41.156-0700"/>
		<delete file="382707 hours 44 min"/>
		<delete file="hi!"/>
		<delete file="tmpfile.txt"/>
		<delete file="tmptestfiles.txt"/>
	</target>

	<target name="compile">
		<mkdir dir="${result.classes.dir}"/>
		<javac debug="true" debuglevel="${debuglevel}" includeantruntime="false" source="${source}" target="${target}" destdir="${result.classes.dir}">
		    <src path="src"/>
		    <src path="tests"/>
		    <classpath refid="Crystal.classpath"/>
		</javac>
	</target>

	<target name="instrument" depends="compile">
		<!--  Step 2: Instrument class files  -->
		<jacoco:instrument destdir="${result.classes.instr.dir}">
			<fileset dir="${result.classes.dir}"/>
		</jacoco:instrument>
	</target>

	<target name="jtest-w-dt" depends="instrument">
		<!--  Step 3: Run tests with instrumented classes  -->
		<java classname="edu.washington.cs.dt.main.ImpactMain" fork="true">
			<classpath>
				<pathelement location="${result.classes.instr.dir}"/>
				<pathelement location="lib/commons-io-1.4.jar"/>
				<pathelement location="lib/jdom-1.1.jar"/>
				<pathelement location="lib/log4j-1.2.15.jar"/>
				<pathelement location="lib/hgKit-279.jar"/>
				<pathelement location="../impact-tools/jacocoagent.jar"/>
				<pathelement location="../impact-tools/impact.jar"/>
				<pathelement location="../impact-tools/dt-detector.jar"/>
				<pathelement location="../impact-tools/sootclasses-2.5.0.jar"/>
				<pathelement location="../impact-tools/plume.jar"/>
				<pathelement location="../impact-tools/guava-14.0.1.jar"/>
				<pathelement location="../impact-tools/asm-all-3.1.jar"/>
				<pathelement location="../impact-tools/junit.jar"/>
				<pathelement location="../impact-tools/org.hamcrest.core_1.3.0.v201303031735.jar"/>
			</classpath>
			<!--  Agent is configured with system properties  -->
			<sysproperty key="jacoco-agent.destfile" file="./jacoco.w.dt.exec"/>
			<arg value="-inputTests"/>
			<!-- Change below this line -->
			<arg value="crystal-auto-order"/>
		</java>
	</target>
	<target name="report-w-dt" depends="jtest-w-dt">
		<!--  Step 4: Create coverage report  -->
		<jacoco:report>
			<!--
			 This task needs the collected execution data and ...
			-->
			<executiondata>
				<file file="./jacoco.exec"/>
			</executiondata>
			<!--  the class files and optional source files ...  -->
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${result.classes.dir}"/>
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}"/>
				</sourcefiles>
			</structure>
			<!--  to produce reports in different formats.  -->
			<html destdir="${result.report.w.dt.dir}"/>
		</jacoco:report>
		<antcall target="jclean"/>
	</target>

    <target name="jtest-no-dt" depends="instrument">
        <!--  Step 3: Run tests with instrumented classes  -->
        <java classname="edu.washington.cs.dt.main.ImpactMain" fork="true">
            <classpath>
				<pathelement location="${result.classes.instr.dir}"/>
				<pathelement location="lib/commons-io-1.4.jar"/>
				<pathelement location="lib/jdom-1.1.jar"/>
				<pathelement location="lib/log4j-1.2.15.jar"/>
				<pathelement location="lib/hgKit-279.jar"/>
				<pathelement location="../impact-tools/jacocoagent.jar"/>
				<pathelement location="../impact-tools/impact.jar"/>
				<pathelement location="../impact-tools/dt-detector.jar"/>
				<pathelement location="../impact-tools/sootclasses-2.5.0.jar"/>
				<pathelement location="../impact-tools/plume.jar"/>
				<pathelement location="../impact-tools/guava-14.0.1.jar"/>
				<pathelement location="../impact-tools/asm-all-3.1.jar"/>
				<pathelement location="../impact-tools/junit.jar"/>
				<pathelement location="../impact-tools/org.hamcrest.core_1.3.0.v201303031735.jar"/>
            </classpath>
            <!--  Agent is configured with system properties  -->
            <sysproperty key="jacoco-agent.destfile" file="./jacoco.no.dt.exec"/>
            <arg value="-inputTests"/>
            <!-- Change below this line -->
            <arg value="crystal-auto-order-no-dt-w-pt"/>
        </java>
    </target>
    <target name="report-no-dt" depends="jtest-no-dt">
        <!--  Step 4: Create coverage report  -->
        <jacoco:report>
            <!--
             This task needs the collected execution data and ...
            -->
            <executiondata>
                <file file="./jacoco.exec"/>
            </executiondata>
            <!--  the class files and optional source files ...  -->
            <structure name="JaCoCo Ant Example">
                <classfiles>
                    <fileset dir="${result.classes.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <!--  to produce reports in different formats.  -->
            <html destdir="${result.report.no.dt.dir}"/>
        </jacoco:report>
      <antcall target="jclean"/>
    </target>

    <target name="getCoverage" depends="report-w-dt,report-no-dt">
		<delete dir="${result.classes.instr.dir}"/>
		<delete dir="${result.tests.dir}"/>
		<delete dir="${result.classes.dir}"/>
    </target>
</project>
