crystal.server.TestHgStateChecker.copyInputStream : r2 = newarray (byte)[1024] >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)
crystal.server.TestHgStateChecker.copyInputStream : $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2) >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : i0 = $i1
crystal.server.TestHgStateChecker.copyInputStream : i0 = $i1 >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : if $i1 < 0
crystal.server.TestHgStateChecker.copyInputStream : if $i1 < 0 >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0)
crystal.server.TestHgStateChecker.copyInputStream : if $i1 < 0 >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : virtualinvoke r0.<java.io.InputStream: void close()>()
crystal.server.TestHgStateChecker.copyInputStream : virtualinvoke r0.<java.io.InputStream: void close()>() >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : virtualinvoke r1.<java.io.OutputStream: void close()>()
crystal.server.TestHgStateChecker.copyInputStream : virtualinvoke r1.<java.io.OutputStream: void close()>() >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : return
crystal.server.TestHgStateChecker.copyInputStream : virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0) >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : goto [?= $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)]
crystal.server.TestHgStateChecker.copyInputStream : goto [?= $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)] >>>>>>>> crystal.server.TestHgStateChecker.copyInputStream : $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)
