crystal.server.AbstractStateChecker.getLocalState : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r10 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r10 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z0 = virtualinvoke $r10.<crystal.model.DataSource: boolean isEnabled()>()
crystal.server.AbstractStateChecker.getLocalState : $z0 = virtualinvoke $r10.<crystal.model.DataSource: boolean isEnabled()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0
crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return null
crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n0 = null
crystal.server.AbstractStateChecker.getLocalState : n0 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r1 = virtualinvoke $r11.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>()
crystal.server.AbstractStateChecker.getLocalState : r1 = virtualinvoke $r11.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r2 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r2 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z1 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r2)
crystal.server.AbstractStateChecker.getLocalState : $z1 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r2) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r12 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint>
crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r13 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r13 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z2 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r13)
crystal.server.AbstractStateChecker.getLocalState : $z2 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r13) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z2 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z2 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r12 = <crystal.server.GitLogParser: java.util.Map gitCheckpoint>
crystal.server.AbstractStateChecker.getLocalState : if $z2 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return null
crystal.server.AbstractStateChecker.getLocalState : r12 = <crystal.server.GitLogParser: java.util.Map gitCheckpoint> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null]
crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n1 = null
crystal.server.AbstractStateChecker.getLocalState : n1 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r14 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r14 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z3 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r14)
crystal.server.AbstractStateChecker.getLocalState : $z3 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r14) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r15 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r17 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r17 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z4 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r17)
crystal.server.AbstractStateChecker.getLocalState : $z4 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r17) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z4 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r18 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : if $z4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return null
crystal.server.AbstractStateChecker.getLocalState : $r18 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r16 = virtualinvoke $r18.<crystal.client.ClientPreferences: java.lang.String getGitPath()>()
crystal.server.AbstractStateChecker.getLocalState : r16 = virtualinvoke $r18.<crystal.client.ClientPreferences: java.lang.String getGitPath()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r3 = virtualinvoke $r19.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>()
crystal.server.AbstractStateChecker.getLocalState : r3 = virtualinvoke $r19.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r20)
crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r20) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r20) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r34 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r20) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r21 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r21 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r21 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r34 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r21 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r34 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke $r22.<crystal.model.DataSource: java.lang.String getRemoteCmd()>()
crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke $r22.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke $r22.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r34 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke $r22.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r34 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke $r24.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke $r24.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke $r24.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r34 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke $r24.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r21, r16, r4, r3, $r23, "your own", $r25)
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r21, r16, r4, r3, $r23, "your own", $r25) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r21, r16, r4, r3, $r23, "your own", $r25) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r34 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r21, r16, r4, r3, $r23, "your own", $r25) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r43 = newarray (java.lang.String)[1]]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r43 = newarray (java.lang.String)[1]] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r43 = newarray (java.lang.String)[1]
crystal.server.AbstractStateChecker.getLocalState : $r43 = newarray (java.lang.String)[1] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r43[0] = "log"
crystal.server.AbstractStateChecker.getLocalState : $r43[0] = "log" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r44 = $r43
crystal.server.AbstractStateChecker.getLocalState : r44 = $r43 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r6 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r16, r44, r4, 0)
crystal.server.AbstractStateChecker.getLocalState : r6 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r16, r44, r4, 0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r45 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r45 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r46 = new crystal.model.RevisionHistory
crystal.server.AbstractStateChecker.getLocalState : $r46 = new crystal.model.RevisionHistory >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r47 = virtualinvoke r6.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getLocalState : $r47 = virtualinvoke r6.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r46.<crystal.model.RevisionHistory: void <init>(java.lang.String,crystal.model.DataSource$RepoKind)>($r47, r1)
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r46.<crystal.model.RevisionHistory: void <init>(java.lang.String,crystal.model.DataSource$RepoKind)>($r47, r1) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r45.<crystal.model.DataSource: void setHistory(crystal.model.RevisionHistory)>($r46)
crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r45.<crystal.model.DataSource: void setHistory(crystal.model.RevisionHistory)>($r46) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r48 = new java.io.File
crystal.server.AbstractStateChecker.getLocalState : $r48 = new java.io.File >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r49 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r49 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r50 = virtualinvoke $r49.<crystal.model.DataSource: java.lang.String getCloneString()>()
crystal.server.AbstractStateChecker.getLocalState : $r50 = virtualinvoke $r49.<crystal.model.DataSource: java.lang.String getCloneString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r48.<java.io.File: void <init>(java.lang.String)>($r50)
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r48.<java.io.File: void <init>(java.lang.String)>($r50) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z5 = virtualinvoke $r48.<java.io.File: boolean exists()>()
crystal.server.AbstractStateChecker.getLocalState : $z5 = virtualinvoke $r48.<java.io.File: boolean exists()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z5 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r51 = newarray (java.lang.String)[1]
crystal.server.AbstractStateChecker.getLocalState : if $z5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r62 = newarray (java.lang.String)[1]
crystal.server.AbstractStateChecker.getLocalState : $r62 = newarray (java.lang.String)[1] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r62[0] = "heads"
crystal.server.AbstractStateChecker.getLocalState : $r62[0] = "heads" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r63 = $r62
crystal.server.AbstractStateChecker.getLocalState : r63 = $r62 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r64 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r16, r63, r4, 0)
crystal.server.AbstractStateChecker.getLocalState : r64 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r16, r63, r4, 0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z10 = staticinvoke <crystal.server.AbstractStateChecker: boolean hasTwoHeads(crystal.util.RunIt$Output,java.util.Map)>(r64, r12)
crystal.server.AbstractStateChecker.getLocalState : $z10 = staticinvoke <crystal.server.AbstractStateChecker: boolean hasTwoHeads(crystal.util.RunIt$Output,java.util.Map)>(r64, r12) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z10 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z10 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r65 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : if $z10 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r69 = <crystal.model.LocalStateResult: java.lang.String ALL_CLEAR>
crystal.server.AbstractStateChecker.getLocalState : $r69 = <crystal.model.LocalStateResult: java.lang.String ALL_CLEAR> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r69
crystal.server.AbstractStateChecker.getLocalState : $r65 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z11 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r65)
crystal.server.AbstractStateChecker.getLocalState : $z11 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r65) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z11 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z11 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r66 = <crystal.model.LocalStateResult: java.lang.String HG_MUST_RESOLVE>
crystal.server.AbstractStateChecker.getLocalState : if $z11 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r67 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r67 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z12 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r67)
crystal.server.AbstractStateChecker.getLocalState : $z12 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r67) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z12 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z12 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r68 = <crystal.model.LocalStateResult: java.lang.String GIT_MUST_RESOLVE>
crystal.server.AbstractStateChecker.getLocalState : if $z12 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r69 = <crystal.model.LocalStateResult: java.lang.String ALL_CLEAR>
crystal.server.AbstractStateChecker.getLocalState : $r68 = <crystal.model.LocalStateResult: java.lang.String GIT_MUST_RESOLVE> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r68
crystal.server.AbstractStateChecker.getLocalState : $r66 = <crystal.model.LocalStateResult: java.lang.String HG_MUST_RESOLVE> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r66
crystal.server.AbstractStateChecker.getLocalState : $r51 = newarray (java.lang.String)[1] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r51[0] = "status"
crystal.server.AbstractStateChecker.getLocalState : $r51[0] = "status" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r7 = $r51
crystal.server.AbstractStateChecker.getLocalState : r7 = $r51 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r52 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r52 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r53 = virtualinvoke $r52.<crystal.model.DataSource: java.lang.String getCloneString()>()
crystal.server.AbstractStateChecker.getLocalState : $r53 = virtualinvoke $r52.<crystal.model.DataSource: java.lang.String getCloneString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r54 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r16, r7, $r53, 0)
crystal.server.AbstractStateChecker.getLocalState : r54 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r16, r7, $r53, 0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r55 = new java.util.StringTokenizer
crystal.server.AbstractStateChecker.getLocalState : $r55 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r56 = virtualinvoke r54.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getLocalState : $r56 = virtualinvoke r54.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r57 = virtualinvoke $r56.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractStateChecker.getLocalState : $r57 = virtualinvoke $r56.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r55.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r57, "\n")
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r55.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r57, "\n") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r8 = $r55
crystal.server.AbstractStateChecker.getLocalState : r8 = $r55 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z6 = virtualinvoke r8.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractStateChecker.getLocalState : $z6 = virtualinvoke r8.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z6 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z6 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r9 = virtualinvoke r8.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractStateChecker.getLocalState : if $z6 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r62 = newarray (java.lang.String)[1]
crystal.server.AbstractStateChecker.getLocalState : r9 = virtualinvoke r8.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z7 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("?")
crystal.server.AbstractStateChecker.getLocalState : $z7 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("?") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z7 != 0
crystal.server.AbstractStateChecker.getLocalState : if $z7 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r58 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : if $z7 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $z6 = virtualinvoke r8.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $z6 = virtualinvoke r8.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z6 = virtualinvoke r8.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractStateChecker.getLocalState : $r58 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z8 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r58)
crystal.server.AbstractStateChecker.getLocalState : $z8 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r58) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z8 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z8 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r59 = <crystal.model.LocalStateResult: java.lang.String HG_UNCHECKPOINTED>
crystal.server.AbstractStateChecker.getLocalState : if $z8 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r60 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r60 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z9 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r60)
crystal.server.AbstractStateChecker.getLocalState : $z9 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r60) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z9 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z9 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r61 = <crystal.model.LocalStateResult: java.lang.String GIT_UNCHECKPOINTED>
crystal.server.AbstractStateChecker.getLocalState : if $z9 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return null
crystal.server.AbstractStateChecker.getLocalState : $r61 = <crystal.model.LocalStateResult: java.lang.String GIT_UNCHECKPOINTED> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r61
crystal.server.AbstractStateChecker.getLocalState : $r59 = <crystal.model.LocalStateResult: java.lang.String HG_UNCHECKPOINTED> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r59
crystal.server.AbstractStateChecker.getLocalState : r35 = $r34 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r36 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getLocalState : $r36 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r37 = <crystal.model.LocalStateResult: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getLocalState : $r37 = <crystal.model.LocalStateResult: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37)
crystal.server.AbstractStateChecker.getLocalState : $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getLocalState : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r40 = virtualinvoke r35.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getLocalState : $r40 = virtualinvoke r35.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)
crystal.server.AbstractStateChecker.getLocalState : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getLocalState : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r42
crystal.server.AbstractStateChecker.getLocalState : r5 = $r26 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r27 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getLocalState : $r27 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r28 = <crystal.model.LocalStateResult: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getLocalState : $r28 = <crystal.model.LocalStateResult: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)
crystal.server.AbstractStateChecker.getLocalState : $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getLocalState : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r31 = virtualinvoke r5.<crystal.server.AbstractStateChecker$OperationException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getLocalState : $r31 = virtualinvoke r5.<crystal.server.AbstractStateChecker$OperationException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31)
crystal.server.AbstractStateChecker.getLocalState : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getLocalState : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r33
crystal.server.AbstractStateChecker.getLocalState : $r15 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r16 = virtualinvoke $r15.<crystal.client.ClientPreferences: java.lang.String getHgPath()>()
crystal.server.AbstractStateChecker.getLocalState : r16 = virtualinvoke $r15.<crystal.client.ClientPreferences: java.lang.String getHgPath()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : r12 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null]
crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n1 = null
