crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $r3 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.util.Collection getDataSources()>() >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : r2 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>()
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : r2 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : i0 = 0
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : i0 = 0 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if $z0 == 0
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if $z0 == 0 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if $z0 == 0 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if i0 >= 2
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if i0 >= 2 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z2 = 1
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if i0 >= 2 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z2 = 0
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z2 = 0 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : return $z2
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z2 = 1 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : goto [?= return $z2]
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : goto [?= return $z2] >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : return $z2
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $r5 = (crystal.model.DataSource) $r4
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $r5 = (crystal.model.DataSource) $r4 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z1 = virtualinvoke $r5.<crystal.model.DataSource: boolean equals(java.lang.Object)>(r1)
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z1 = virtualinvoke $r5.<crystal.model.DataSource: boolean equals(java.lang.Object)>(r1) >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if $z1 == 0
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if $z1 == 0 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : i0 = i0 + 1
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : if $z1 == 0 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : i0 = i0 + 1 >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> crystal.util.ValidInputChecker.checkDataSourceNameDuplicate : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
