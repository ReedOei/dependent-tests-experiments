crystal.server.HgLogParser.parseLog : $r1 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint> >>>>>>>> crystal.server.HgLogParser.parseLog : $r2 = staticinvoke <crystal.server.HgLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1)
crystal.server.HgLogParser.parseLog : $r2 = staticinvoke <crystal.server.HgLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0)
crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0) >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : if r0 != null
crystal.util.ValidInputChecker.checkNullInput : if r0 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.util.HashMap
crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.util.HashMap >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.util.HashMap: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.util.HashMap: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r2 = $r15
crystal.server.AbstractLogParser.abstractParseLog : r2 = $r15 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.server.AbstractLogParser.abstractParseLog : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r3 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r3 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3)
crystal.server.AbstractLogParser.abstractParseLog : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r19 = (java.lang.String) $r18
crystal.server.AbstractLogParser.abstractParseLog : $r19 = (java.lang.String) $r18 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r4 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r21)
crystal.server.AbstractLogParser.abstractParseLog : r4 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r21) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r4
crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r4 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = 0
crystal.server.AbstractLogParser.abstractParseLog : i1 = 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0
crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r5 = r4[i1]
crystal.server.AbstractLogParser.abstractParseLog : r5 = r4[i1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>()
crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0
crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r23 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r23 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r24 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r24 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r25 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24)
crystal.server.AbstractLogParser.abstractParseLog : $r25 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r26 = (java.lang.String) $r25
crystal.server.AbstractLogParser.abstractParseLog : $r26 = (java.lang.String) $r25 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)
crystal.server.AbstractLogParser.abstractParseLog : $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractLogParser.abstractParseLog : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r30 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.abstractParseLog : $r30 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r30.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r29, "\n")
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r30.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r29, "\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r6 = $r30
crystal.server.AbstractLogParser.abstractParseLog : r6 = $r30 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r7 = null
crystal.server.AbstractLogParser.abstractParseLog : r7 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = null
crystal.server.AbstractLogParser.abstractParseLog : r8 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = null
crystal.server.AbstractLogParser.abstractParseLog : r9 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = null
crystal.server.AbstractLogParser.abstractParseLog : r10 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r31 = new java.util.ArrayList
crystal.server.AbstractLogParser.abstractParseLog : $r31 = new java.util.ArrayList >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r31.<java.util.ArrayList: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r31.<java.util.ArrayList: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r11 = $r31
crystal.server.AbstractLogParser.abstractParseLog : r11 = $r31 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r32 = virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.abstractParseLog : $r32 = virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r12 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : r12 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r33 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r33 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r34 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33)
crystal.server.AbstractLogParser.abstractParseLog : $r34 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r35 = (java.lang.String) $r34
crystal.server.AbstractLogParser.abstractParseLog : $r35 = (java.lang.String) $r34 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r35)
crystal.server.AbstractLogParser.abstractParseLog : $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r35) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r36 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : $r36 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r1 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.clipFront : $r1 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.clipFront : specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String)>(r0)
crystal.server.AbstractLogParser.clipFront : specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String)>(r0) >>>>>>>> crystal.server.AbstractLogParser.clipFront : r2 = $r1
crystal.server.AbstractLogParser.clipFront : r2 = $r1 >>>>>>>> crystal.server.AbstractLogParser.clipFront : virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.clipFront : virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : r3 = ""
crystal.server.AbstractLogParser.clipFront : r3 = "" >>>>>>>> crystal.server.AbstractLogParser.clipFront : $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.clipFront : $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : if $z0 == 0
crystal.server.AbstractLogParser.clipFront : if $z0 == 0 >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r5 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.clipFront : $r5 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.clipFront : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.clipFront : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
crystal.server.AbstractLogParser.clipFront : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r7 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.clipFront : $r7 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
crystal.server.AbstractLogParser.clipFront : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractLogParser.clipFront : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractLogParser.clipFront : r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.clipFront : r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : goto [?= $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.clipFront : goto [?= $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r10 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.clipFront : $r10 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : return $r10
crystal.server.AbstractLogParser.clipFront : return $r10 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z3 = virtualinvoke $r36.<java.lang.String: boolean contains(java.lang.CharSequence)>(":")
crystal.server.AbstractLogParser.abstractParseLog : $z3 = virtualinvoke $r36.<java.lang.String: boolean contains(java.lang.CharSequence)>(":") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r37 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : $r37 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r38 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : $r38 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $i2 = virtualinvoke $r38.<java.lang.String: int indexOf(java.lang.String)>(":")
crystal.server.AbstractLogParser.abstractParseLog : $i2 = virtualinvoke $r38.<java.lang.String: int indexOf(java.lang.String)>(":") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $i3 = $i2 + 1
crystal.server.AbstractLogParser.abstractParseLog : $i3 = $i2 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r7 = virtualinvoke $r37.<java.lang.String: java.lang.String substring(int)>($i3)
crystal.server.AbstractLogParser.abstractParseLog : r7 = virtualinvoke $r37.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r39 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG>
crystal.server.AbstractLogParser.abstractParseLog : $r39 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r40 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r39)
crystal.server.AbstractLogParser.abstractParseLog : $r40 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r39) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r40 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r40 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r41 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG>
crystal.server.AbstractLogParser.abstractParseLog : $r41 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r42 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41)
crystal.server.AbstractLogParser.abstractParseLog : $r42 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r43 = (java.lang.String) $r42
crystal.server.AbstractLogParser.abstractParseLog : $r43 = (java.lang.String) $r42 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z4 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r43)
crystal.server.AbstractLogParser.abstractParseLog : $z4 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r43) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z4 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z4 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r44 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT>
crystal.server.AbstractLogParser.abstractParseLog : $r44 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r45 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44)
crystal.server.AbstractLogParser.abstractParseLog : $r45 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r45 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r45 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r46 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT>
crystal.server.AbstractLogParser.abstractParseLog : $r46 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r47 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r46)
crystal.server.AbstractLogParser.abstractParseLog : $r47 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r46) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r48 = (java.lang.String) $r47
crystal.server.AbstractLogParser.abstractParseLog : $r48 = (java.lang.String) $r47 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z5 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r48)
crystal.server.AbstractLogParser.abstractParseLog : $z5 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r48) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z5 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z5 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r52 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER>
crystal.server.AbstractLogParser.abstractParseLog : $r52 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r53 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r52)
crystal.server.AbstractLogParser.abstractParseLog : $r53 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r52) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r53 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r53 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r54 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER>
crystal.server.AbstractLogParser.abstractParseLog : $r54 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r55 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r54)
crystal.server.AbstractLogParser.abstractParseLog : $r55 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r54) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r56 = (java.lang.String) $r55
crystal.server.AbstractLogParser.abstractParseLog : $r56 = (java.lang.String) $r55 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z8 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r56)
crystal.server.AbstractLogParser.abstractParseLog : $z8 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r56) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z8 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z8 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : r8 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r57 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE>
crystal.server.AbstractLogParser.abstractParseLog : $r57 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r58 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r57)
crystal.server.AbstractLogParser.abstractParseLog : $r58 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r57) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r58 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r58 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r59 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE>
crystal.server.AbstractLogParser.abstractParseLog : $r59 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r60 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r59)
crystal.server.AbstractLogParser.abstractParseLog : $r60 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r59) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r61 = (java.lang.String) $r60
crystal.server.AbstractLogParser.abstractParseLog : $r61 = (java.lang.String) $r60 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z9 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r61)
crystal.server.AbstractLogParser.abstractParseLog : $z9 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r61) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z9 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z9 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : r9 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r62 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : $r62 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r63 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r62)
crystal.server.AbstractLogParser.abstractParseLog : $r63 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r62) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r63 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r63 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r64 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : $r64 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r65 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r64)
crystal.server.AbstractLogParser.abstractParseLog : $r65 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r64) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r66 = (java.lang.String) $r65
crystal.server.AbstractLogParser.abstractParseLog : $r66 = (java.lang.String) $r65 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z10 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r66)
crystal.server.AbstractLogParser.abstractParseLog : $z10 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r66) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z10 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z10 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : r10 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r10 != null
crystal.server.AbstractLogParser.abstractParseLog : if r10 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r8 != null
crystal.server.AbstractLogParser.abstractParseLog : if r8 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r9 != null
crystal.server.AbstractLogParser.abstractParseLog : if r9 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r7 == null
crystal.server.AbstractLogParser.abstractParseLog : if r7 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r89 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r89 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r90 = new crystal.server.AbstractLogParser$Checkpoint
crystal.server.AbstractLogParser.abstractParseLog : $r90 = new crystal.server.AbstractLogParser$Checkpoint >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r91 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r91 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r92 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r92 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r93 = virtualinvoke r9.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r93 = virtualinvoke r9.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r94 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r94 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r90.<crystal.server.AbstractLogParser$Checkpoint: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r91, $r92, $r93, $r94, r11)
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r90.<crystal.server.AbstractLogParser$Checkpoint: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r91, $r92, $r93, $r94, r11) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r89, $r90)
crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r89, $r90) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= i1 = i1 + 1]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= i1 = i1 + 1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1
crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r49 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.abstractParseLog : $r49 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r50 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : $r50 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r51 = virtualinvoke $r50.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r51 = virtualinvoke $r50.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r49.<java.util.StringTokenizer: void <init>(java.lang.String)>($r51)
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r49.<java.util.StringTokenizer: void <init>(java.lang.String)>($r51) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r13 = $r49
crystal.server.AbstractLogParser.abstractParseLog : r13 = $r49 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z6 = virtualinvoke r13.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.abstractParseLog : $z6 = virtualinvoke r13.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z6 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z6 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r14 = virtualinvoke r13.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.abstractParseLog : r14 = virtualinvoke r13.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r14)
crystal.server.AbstractLogParser.abstractParseLog : interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r14) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z6 = virtualinvoke r13.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z6 = virtualinvoke r13.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : return r2
crystal.server.AbstractLogParser.abstractParseLog : return r2 >>>>>>>> crystal.server.HgLogParser.parseLog : return $r2
crystal.server.HgLogParser.parseLog : return $r2 >>>>>>>> crystal.model.RevisionHistory.getCommitters : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r1)
crystal.model.RevisionHistory.getCommitters : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r1) >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r6 = new java.util.HashSet
crystal.model.RevisionHistory.getCommitters : $r6 = new java.util.HashSet >>>>>>>> crystal.model.RevisionHistory.getCommitters : specialinvoke $r6.<java.util.HashSet: void <init>()>()
crystal.model.RevisionHistory.getCommitters : specialinvoke $r6.<java.util.HashSet: void <init>()>() >>>>>>>> crystal.model.RevisionHistory.getCommitters : r2 = $r6
crystal.model.RevisionHistory.getCommitters : r2 = $r6 >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r7 = r0.<crystal.model.RevisionHistory: java.util.HashMap _changesets>
crystal.model.RevisionHistory.getCommitters : $r7 = r0.<crystal.model.RevisionHistory: java.util.HashMap _changesets> >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>()
crystal.model.RevisionHistory.getCommitters : $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>() >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r9 = r1.<crystal.model.RevisionHistory: java.util.HashMap _changesets>
crystal.model.RevisionHistory.getCommitters : $r9 = r1.<crystal.model.RevisionHistory: java.util.HashMap _changesets> >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r10 = virtualinvoke $r9.<java.util.HashMap: java.util.Set keySet()>()
crystal.model.RevisionHistory.getCommitters : $r10 = virtualinvoke $r9.<java.util.HashMap: java.util.Set keySet()>() >>>>>>>> crystal.model.RevisionHistory.getCommitters : r11 = staticinvoke <crystal.util.SetOperations: java.util.Set xor(java.util.Set,java.util.Set)>($r8, $r10)
crystal.model.RevisionHistory.getCommitters : r11 = staticinvoke <crystal.util.SetOperations: java.util.Set xor(java.util.Set,java.util.Set)>($r8, $r10) >>>>>>>> crystal.util.SetOperations.xor : $r2 = new java.util.HashSet
crystal.util.SetOperations.xor : $r2 = new java.util.HashSet >>>>>>>> crystal.util.SetOperations.xor : specialinvoke $r2.<java.util.HashSet: void <init>()>()
crystal.util.SetOperations.xor : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> crystal.util.SetOperations.xor : r3 = $r2
crystal.util.SetOperations.xor : r3 = $r2 >>>>>>>> crystal.util.SetOperations.xor : $r4 = staticinvoke <crystal.util.SetOperations: java.util.Set setDifference(java.util.Set,java.util.Set)>(r0, r1)
crystal.util.SetOperations.xor : $r4 = staticinvoke <crystal.util.SetOperations: java.util.Set setDifference(java.util.Set,java.util.Set)>(r0, r1) >>>>>>>> crystal.util.SetOperations.setDifference : $r2 = new java.util.HashSet
crystal.util.SetOperations.setDifference : $r2 = new java.util.HashSet >>>>>>>> crystal.util.SetOperations.setDifference : specialinvoke $r2.<java.util.HashSet: void <init>()>()
crystal.util.SetOperations.setDifference : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> crystal.util.SetOperations.setDifference : r3 = $r2
crystal.util.SetOperations.setDifference : r3 = $r2 >>>>>>>> crystal.util.SetOperations.setDifference : interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>(r0)
crystal.util.SetOperations.setDifference : interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>(r0) >>>>>>>> crystal.util.SetOperations.setDifference : interfaceinvoke r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1)
crystal.util.SetOperations.setDifference : interfaceinvoke r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1) >>>>>>>> crystal.util.SetOperations.setDifference : return r3
crystal.util.SetOperations.setDifference : return r3 >>>>>>>> crystal.util.SetOperations.xor : interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4)
crystal.util.SetOperations.xor : interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4) >>>>>>>> crystal.util.SetOperations.xor : $r5 = staticinvoke <crystal.util.SetOperations: java.util.Set setDifference(java.util.Set,java.util.Set)>(r1, r0)
crystal.util.SetOperations.xor : $r5 = staticinvoke <crystal.util.SetOperations: java.util.Set setDifference(java.util.Set,java.util.Set)>(r1, r0) >>>>>>>> crystal.util.SetOperations.xor : interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>($r5)
crystal.util.SetOperations.xor : interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>($r5) >>>>>>>> crystal.util.SetOperations.xor : return r3
crystal.util.SetOperations.xor : return r3 >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r12 = new java.util.HashSet
crystal.model.RevisionHistory.getCommitters : $r12 = new java.util.HashSet >>>>>>>> crystal.model.RevisionHistory.getCommitters : specialinvoke $r12.<java.util.HashSet: void <init>()>()
crystal.model.RevisionHistory.getCommitters : specialinvoke $r12.<java.util.HashSet: void <init>()>() >>>>>>>> crystal.model.RevisionHistory.getCommitters : r3 = $r12
crystal.model.RevisionHistory.getCommitters : r3 = $r12 >>>>>>>> crystal.model.RevisionHistory.getCommitters : r4 = interfaceinvoke r11.<java.util.Set: java.util.Iterator iterator()>()
crystal.model.RevisionHistory.getCommitters : r4 = interfaceinvoke r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> crystal.model.RevisionHistory.getCommitters : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
crystal.model.RevisionHistory.getCommitters : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.model.RevisionHistory.getCommitters : if $z0 == 0
crystal.model.RevisionHistory.getCommitters : if $z0 == 0 >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
crystal.model.RevisionHistory.getCommitters : $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> crystal.model.RevisionHistory.getCommitters : r5 = (java.lang.String) $r13
crystal.model.RevisionHistory.getCommitters : r5 = (java.lang.String) $r13 >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r14 = r0.<crystal.model.RevisionHistory: java.util.HashMap _changesets>
crystal.model.RevisionHistory.getCommitters : $r14 = r0.<crystal.model.RevisionHistory: java.util.HashMap _changesets> >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5)
crystal.model.RevisionHistory.getCommitters : $r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> crystal.model.RevisionHistory.getCommitters : if $r15 == null
crystal.model.RevisionHistory.getCommitters : if $r15 == null >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r16 = r0.<crystal.model.RevisionHistory: java.util.HashMap _changesets>
crystal.model.RevisionHistory.getCommitters : $r16 = r0.<crystal.model.RevisionHistory: java.util.HashMap _changesets> >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r17 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5)
crystal.model.RevisionHistory.getCommitters : $r17 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> crystal.model.RevisionHistory.getCommitters : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r17)
crystal.model.RevisionHistory.getCommitters : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r17) >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.hashCode : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _changeset>
crystal.server.AbstractLogParser$Checkpoint.hashCode : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _changeset> >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
crystal.server.AbstractLogParser$Checkpoint.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.hashCode : return $i0
crystal.server.AbstractLogParser$Checkpoint.hashCode : return $i0 >>>>>>>> crystal.model.RevisionHistory.getCommitters : goto [?= (branch)]
crystal.model.RevisionHistory.getCommitters : goto [?= (branch)] >>>>>>>> crystal.model.RevisionHistory.getCommitters : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
crystal.model.RevisionHistory.getCommitters : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> crystal.model.RevisionHistory.getCommitters : $r20 = staticinvoke <crystal.server.GuidanceChecker: java.lang.String getCommitters(java.util.Set)>(r3)
crystal.model.RevisionHistory.getCommitters : $r20 = staticinvoke <crystal.server.GuidanceChecker: java.lang.String getCommitters(java.util.Set)>(r3) >>>>>>>> crystal.server.GuidanceChecker.getCommitters : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0)
crystal.server.GuidanceChecker.getCommitters : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0) >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r5 = new java.util.HashSet
crystal.server.GuidanceChecker.getCommitters : $r5 = new java.util.HashSet >>>>>>>> crystal.server.GuidanceChecker.getCommitters : specialinvoke $r5.<java.util.HashSet: void <init>()>()
crystal.server.GuidanceChecker.getCommitters : specialinvoke $r5.<java.util.HashSet: void <init>()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : r1 = $r5
crystal.server.GuidanceChecker.getCommitters : r1 = $r5 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : r2 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>()
crystal.server.GuidanceChecker.getCommitters : r2 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.server.GuidanceChecker.getCommitters : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : if $z0 == 0
crystal.server.GuidanceChecker.getCommitters : if $z0 == 0 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
crystal.server.GuidanceChecker.getCommitters : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : r3 = (crystal.server.AbstractLogParser$Checkpoint) $r6
crystal.server.GuidanceChecker.getCommitters : r3 = (crystal.server.AbstractLogParser$Checkpoint) $r6 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r7 = virtualinvoke r3.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String getCommitter()>()
crystal.server.GuidanceChecker.getCommitters : $r7 = virtualinvoke r3.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String getCommitter()>() >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getCommitter : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _user>
crystal.server.AbstractLogParser$Checkpoint.getCommitter : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _user> >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getCommitter : return $r1
crystal.server.AbstractLogParser$Checkpoint.getCommitter : return $r1 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r7)
crystal.server.GuidanceChecker.getCommitters : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r7) >>>>>>>> crystal.server.GuidanceChecker.getCommitters : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
crystal.server.GuidanceChecker.getCommitters : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $i0 = interfaceinvoke r1.<java.util.Set: int size()>()
crystal.server.GuidanceChecker.getCommitters : $i0 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : if $i0 != 0
crystal.server.GuidanceChecker.getCommitters : if $i0 != 0 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $i1 = interfaceinvoke r1.<java.util.Set: int size()>()
crystal.server.GuidanceChecker.getCommitters : $i1 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : if $i1 != 1
crystal.server.GuidanceChecker.getCommitters : if $i1 != 1 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
crystal.server.GuidanceChecker.getCommitters : $i2 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : if $i2 != 2
crystal.server.GuidanceChecker.getCommitters : if $i2 != 2 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : r11 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
crystal.server.GuidanceChecker.getCommitters : r11 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r12 = new java.lang.StringBuilder
crystal.server.GuidanceChecker.getCommitters : $r12 = new java.lang.StringBuilder >>>>>>>> crystal.server.GuidanceChecker.getCommitters : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
crystal.server.GuidanceChecker.getCommitters : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r13 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>()
crystal.server.GuidanceChecker.getCommitters : $r13 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r14 = (java.lang.String) $r13
crystal.server.GuidanceChecker.getCommitters : $r14 = (java.lang.String) $r13 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
crystal.server.GuidanceChecker.getCommitters : $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ")
crystal.server.GuidanceChecker.getCommitters : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r17 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>()
crystal.server.GuidanceChecker.getCommitters : $r17 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r18 = (java.lang.String) $r17
crystal.server.GuidanceChecker.getCommitters : $r18 = (java.lang.String) $r17 >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18)
crystal.server.GuidanceChecker.getCommitters : $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) >>>>>>>> crystal.server.GuidanceChecker.getCommitters : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.GuidanceChecker.getCommitters : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.GuidanceChecker.getCommitters : return $r20
crystal.server.GuidanceChecker.getCommitters : return $r20 >>>>>>>> crystal.model.RevisionHistory.getCommitters : return $r20
