crystal.client.ConflictDaemon.getInstance : $r0 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : if $r0 != null
crystal.client.ConflictDaemon.getInstance : if $r0 != null >>>>>>>> crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance>
crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : return $r2
crystal.client.ConflictDaemon.getInstance : return $r2 >>>>>>>> crystal.model.DataSource.setParent : if r1 == null
crystal.model.DataSource.setParent : if r1 == null >>>>>>>> crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.model.DataSource.setParent : if $z0 == 0
crystal.model.DataSource.setParent : if $z0 == 0 >>>>>>>> crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1
crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1 >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r4 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.getLocalState : $r4 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1)
crystal.client.ConflictDaemon.getLocalState : $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> crystal.client.ConflictDaemon.getLocalState : r2 = (crystal.model.LocalStateResult) $r5
crystal.client.ConflictDaemon.getLocalState : r2 = (crystal.model.LocalStateResult) $r5 >>>>>>>> crystal.client.ConflictDaemon.getLocalState : if r2 != null
crystal.client.ConflictDaemon.getLocalState : if r2 != null >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r6 = new crystal.model.LocalStateResult
crystal.client.ConflictDaemon.getLocalState : $r6 = new crystal.model.LocalStateResult >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r3 = <crystal.model.LocalStateResult: java.lang.String PENDING>
crystal.client.ConflictDaemon.getLocalState : $r3 = <crystal.model.LocalStateResult: java.lang.String PENDING> >>>>>>>> crystal.client.ConflictDaemon.getLocalState : specialinvoke $r6.<crystal.model.LocalStateResult: void <init>(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r3, null, null, null)
crystal.client.ConflictDaemon.getLocalState : specialinvoke $r6.<crystal.model.LocalStateResult: void <init>(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r3, null, null, null) >>>>>>>> crystal.client.ConflictDaemon.getLocalState : r2 = $r6
crystal.client.ConflictDaemon.getLocalState : r2 = $r6 >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r7 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.getLocalState : $r7 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.getLocalState : virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
crystal.client.ConflictDaemon.getLocalState : virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> crystal.client.ConflictDaemon.getLocalState : return r2
crystal.client.ConflictDaemon.getLocalState : return r2 >>>>>>>> crystal.client.ConflictDaemon.getLocalStates : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.getLocalStates : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.getLocalStates : $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>()
crystal.client.ConflictDaemon.getLocalStates : $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>() >>>>>>>> crystal.client.ConflictDaemon.getLocalStates : return $r2
crystal.client.ConflictDaemon.getLocalStates : return $r2 >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : if r0 == null
crystal.util.ValidInputChecker.checkValidStringInput : if r0 == null >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
crystal.util.ValidInputChecker.checkValidStringInput : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.util.ValidInputChecker.checkValidStringInput : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : if $z0 == 0
crystal.util.ValidInputChecker.checkValidStringInput : if $z0 == 0 >>>>>>>> crystal.server.HgStateChecker.getLocalState : $r1 = staticinvoke <crystal.server.AbstractStateChecker: java.lang.String getLocalState(crystal.client.ProjectPreferences)>(r0)
crystal.server.HgStateChecker.getLocalState : $r1 = staticinvoke <crystal.server.AbstractStateChecker: java.lang.String getLocalState(crystal.client.ProjectPreferences)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0)
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r10 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r10 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ProjectPreferences.getEnvironment : $r1 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment>
crystal.client.ProjectPreferences.getEnvironment : $r1 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment> >>>>>>>> crystal.client.ProjectPreferences.getEnvironment : return $r1
crystal.client.ProjectPreferences.getEnvironment : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z0 = virtualinvoke $r10.<crystal.model.DataSource: boolean isEnabled()>()
crystal.server.AbstractStateChecker.getLocalState : $z0 = virtualinvoke $r10.<crystal.model.DataSource: boolean isEnabled()>() >>>>>>>> crystal.model.DataSource.isEnabled : $z0 = r0.<crystal.model.DataSource: boolean _enabled>
crystal.model.DataSource.isEnabled : $z0 = r0.<crystal.model.DataSource: boolean _enabled> >>>>>>>> crystal.model.DataSource.isEnabled : return $z0
crystal.model.DataSource.isEnabled : return $z0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0
crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n0 = null
crystal.server.AbstractStateChecker.getLocalState : n0 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r1 = virtualinvoke $r11.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>()
crystal.server.AbstractStateChecker.getLocalState : r1 = virtualinvoke $r11.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>() >>>>>>>> crystal.model.DataSource.getKind : $r1 = r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind _repoKind>
crystal.model.DataSource.getKind : $r1 = r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind _repoKind> >>>>>>>> crystal.model.DataSource.getKind : return $r1
crystal.model.DataSource.getKind : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r2 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r2 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z1 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r2)
crystal.server.AbstractStateChecker.getLocalState : $z1 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r2) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r12 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint>
crystal.server.AbstractStateChecker.getLocalState : r12 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null]
crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n1 = null
crystal.server.AbstractStateChecker.getLocalState : n1 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r14 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r14 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z3 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r14)
crystal.server.AbstractStateChecker.getLocalState : $z3 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r14) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r15 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : $r15 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.client.ProjectPreferences.getClientPreferences : $r1 = r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences>
crystal.client.ProjectPreferences.getClientPreferences : $r1 = r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences> >>>>>>>> crystal.client.ProjectPreferences.getClientPreferences : return $r1
crystal.client.ProjectPreferences.getClientPreferences : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r16 = virtualinvoke $r15.<crystal.client.ClientPreferences: java.lang.String getHgPath()>()
crystal.server.AbstractStateChecker.getLocalState : r16 = virtualinvoke $r15.<crystal.client.ClientPreferences: java.lang.String getHgPath()>() >>>>>>>> crystal.client.ClientPreferences.getHgPath : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _hgPath>
crystal.client.ClientPreferences.getHgPath : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _hgPath> >>>>>>>> crystal.client.ClientPreferences.getHgPath : return $r1
crystal.client.ClientPreferences.getHgPath : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r3 = virtualinvoke $r19.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>()
crystal.server.AbstractStateChecker.getLocalState : r3 = virtualinvoke $r19.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>() >>>>>>>> crystal.client.ClientPreferences.getTempDirectory : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _tempDirectory>
crystal.client.ClientPreferences.getTempDirectory : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _tempDirectory> >>>>>>>> crystal.client.ClientPreferences.getTempDirectory : return $r1
crystal.client.ClientPreferences.getTempDirectory : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r20)
crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r20) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : r2 = virtualinvoke $r4.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : r2 = virtualinvoke $r4.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r3 = <java.io.File: java.lang.String separator>
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r3 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r3)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r3) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : if $z0 != 0
crystal.client.ProjectPreferences.getProjectCheckoutLocation : if $z0 != 0 >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r5 = new java.lang.StringBuilder
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r5 = new java.lang.StringBuilder >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r7 = <java.io.File: java.lang.String separator>
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r7 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r9 = new java.lang.StringBuilder
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r9 = new java.lang.StringBuilder >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r12 = virtualinvoke $r11.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r12 = virtualinvoke $r11.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.model.DataSource.getShortName : $r1 = r0.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.getShortName : $r1 = r0.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.getShortName : return $r1
crystal.model.DataSource.getShortName : return $r1 >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r15 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r15 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : return $r17
crystal.client.ProjectPreferences.getProjectCheckoutLocation : return $r17 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r21 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r21 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke $r22.<crystal.model.DataSource: java.lang.String getRemoteCmd()>()
crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke $r22.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.model.DataSource.getRemoteCmd : $r1 = r0.<crystal.model.DataSource: java.lang.String _remoteCmd>
crystal.model.DataSource.getRemoteCmd : $r1 = r0.<crystal.model.DataSource: java.lang.String _remoteCmd> >>>>>>>> crystal.model.DataSource.getRemoteCmd : return $r1
crystal.model.DataSource.getRemoteCmd : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke $r24.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke $r24.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r21, r16, r4, r3, $r23, "your own", $r25)
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r21, r16, r4, r3, $r23, "your own", $r25) >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : r7 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "crystal/server/AbstractStateChecker")
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : r7 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "crystal/server/AbstractStateChecker") >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $r10 = new java.io.File
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $r10 = new java.io.File >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r2)
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>()
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>() >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : if $z0 == 0
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : if $z0 == 0 >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $r35 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getCloneString()>()
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $r35 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getCloneString()>() >>>>>>>> crystal.model.DataSource.getCloneString : $r1 = r0.<crystal.model.DataSource: java.lang.String _cloneString>
crystal.model.DataSource.getCloneString : $r1 = r0.<crystal.model.DataSource: java.lang.String _cloneString> >>>>>>>> crystal.model.DataSource.getCloneString : return $r1
crystal.model.DataSource.getCloneString : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : staticinvoke <crystal.server.AbstractStateChecker: void createLocalRepository(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r35, r2, r3, r4)
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : staticinvoke <crystal.server.AbstractStateChecker: void createLocalRepository(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r35, r2, r3, r4) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r3)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r3) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r9 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r9 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
crystal.server.AbstractStateChecker.createLocalRepository : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clone")
crystal.server.AbstractStateChecker.createLocalRepository : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clone") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r12 = new java.util.ArrayList
crystal.server.AbstractStateChecker.createLocalRepository : $r12 = new java.util.ArrayList >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r12.<java.util.ArrayList: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r12.<java.util.ArrayList: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r6 = $r12
crystal.server.AbstractStateChecker.createLocalRepository : r6 = $r12 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("clone")
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("clone") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : if r4 == null
crystal.server.AbstractStateChecker.createLocalRepository : if r4 == null >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r17 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r17 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.createLocalRepository : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.createLocalRepository : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.createLocalRepository : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r24 = newarray (java.lang.String)[0]
crystal.server.AbstractStateChecker.createLocalRepository : $r24 = newarray (java.lang.String)[0] >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r25 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24)
crystal.server.AbstractStateChecker.createLocalRepository : $r25 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r26 = (java.lang.String[]) $r25
crystal.server.AbstractStateChecker.createLocalRepository : $r26 = (java.lang.String[]) $r25 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r0, $r26, r3, 0)
crystal.server.AbstractStateChecker.createLocalRepository : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r0, $r26, r3, 0) >>>>>>>> crystal.util.RunIt.execute : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
crystal.util.RunIt.execute : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> crystal.util.RunIt.execute : $r13 = new java.lang.ProcessBuilder
crystal.util.RunIt.execute : $r13 = new java.lang.ProcessBuilder >>>>>>>> crystal.util.RunIt.execute : $r14 = newarray (java.lang.String)[0]
crystal.util.RunIt.execute : $r14 = newarray (java.lang.String)[0] >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r13.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r14)
crystal.util.RunIt.execute : specialinvoke $r13.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r14) >>>>>>>> crystal.util.RunIt.execute : r3 = $r13
crystal.util.RunIt.execute : r3 = $r13 >>>>>>>> crystal.util.RunIt.execute : $r15 = new java.io.File
crystal.util.RunIt.execute : $r15 = new java.io.File >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r2)
crystal.util.RunIt.execute : specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> crystal.util.RunIt.execute : r4 = $r15
crystal.util.RunIt.execute : r4 = $r15 >>>>>>>> crystal.util.RunIt.execute : $z1 = <crystal.util.RunIt: boolean $assertionsDisabled>
crystal.util.RunIt.execute : $z1 = <crystal.util.RunIt: boolean $assertionsDisabled> >>>>>>>> crystal.util.RunIt.execute : if $z1 != 0
crystal.util.RunIt.execute : if $z1 != 0 >>>>>>>> crystal.util.RunIt.execute : $z3 = <crystal.util.RunIt: boolean $assertionsDisabled>
crystal.util.RunIt.execute : $z3 = <crystal.util.RunIt: boolean $assertionsDisabled> >>>>>>>> crystal.util.RunIt.execute : if $z3 != 0
crystal.util.RunIt.execute : if $z3 != 0 >>>>>>>> crystal.util.RunIt.execute : $r18 = new java.io.File
crystal.util.RunIt.execute : $r18 = new java.io.File >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r2)
crystal.util.RunIt.execute : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>($r18)
crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>($r18) >>>>>>>> crystal.util.RunIt.execute : if r1 == null
crystal.util.RunIt.execute : if r1 == null >>>>>>>> crystal.util.RunIt.execute : $i4 = lengthof r1
crystal.util.RunIt.execute : $i4 = lengthof r1 >>>>>>>> crystal.util.RunIt.execute : if $i4 != 0
crystal.util.RunIt.execute : if $i4 != 0 >>>>>>>> crystal.util.RunIt.execute : $r22 = new java.util.Vector
crystal.util.RunIt.execute : $r22 = new java.util.Vector >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r22.<java.util.Vector: void <init>()>()
crystal.util.RunIt.execute : specialinvoke $r22.<java.util.Vector: void <init>()>() >>>>>>>> crystal.util.RunIt.execute : r5 = $r22
crystal.util.RunIt.execute : r5 = $r22 >>>>>>>> crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r0)
crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r0) >>>>>>>> crystal.util.RunIt.execute : r6 = r1
crystal.util.RunIt.execute : r6 = r1 >>>>>>>> crystal.util.RunIt.execute : i1 = lengthof r6
crystal.util.RunIt.execute : i1 = lengthof r6 >>>>>>>> crystal.util.RunIt.execute : i2 = 0
crystal.util.RunIt.execute : i2 = 0 >>>>>>>> crystal.util.RunIt.execute : if i2 >= i1
crystal.util.RunIt.execute : if i2 >= i1 >>>>>>>> crystal.util.RunIt.execute : r7 = r6[i2]
crystal.util.RunIt.execute : r7 = r6[i2] >>>>>>>> crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7)
crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> crystal.util.RunIt.execute : i2 = i2 + 1
crystal.util.RunIt.execute : i2 = i2 + 1 >>>>>>>> crystal.util.RunIt.execute : goto [?= (branch)]
crystal.util.RunIt.execute : goto [?= (branch)] >>>>>>>> crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>(r5)
crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>(r5) >>>>>>>> crystal.util.RunIt.execute : $r24 = <crystal.util.RunIt: org.apache.log4j.Logger _log>
crystal.util.RunIt.execute : $r24 = <crystal.util.RunIt: org.apache.log4j.Logger _log> >>>>>>>> crystal.util.RunIt.execute : $r25 = new java.lang.StringBuilder
crystal.util.RunIt.execute : $r25 = new java.lang.StringBuilder >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
crystal.util.RunIt.execute : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.RunIt.execute : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tRunIt::execute(..) - command: ")
crystal.util.RunIt.execute : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tRunIt::execute(..) - command: ") >>>>>>>> crystal.util.RunIt.execute : $r27 = virtualinvoke r3.<java.lang.ProcessBuilder: java.util.List command()>()
crystal.util.RunIt.execute : $r27 = virtualinvoke r3.<java.lang.ProcessBuilder: java.util.List command()>() >>>>>>>> crystal.util.RunIt.execute : $r28 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>()
crystal.util.RunIt.execute : $r28 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>() >>>>>>>> crystal.util.RunIt.execute : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)
crystal.util.RunIt.execute : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> crystal.util.RunIt.execute : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; in path: ")
crystal.util.RunIt.execute : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; in path: ") >>>>>>>> crystal.util.RunIt.execute : $r31 = virtualinvoke r3.<java.lang.ProcessBuilder: java.io.File directory()>()
crystal.util.RunIt.execute : $r31 = virtualinvoke r3.<java.lang.ProcessBuilder: java.io.File directory()>() >>>>>>>> crystal.util.RunIt.execute : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31)
crystal.util.RunIt.execute : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31) >>>>>>>> crystal.util.RunIt.execute : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.RunIt.execute : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.RunIt.execute : virtualinvoke $r24.<org.apache.log4j.Logger: void info(java.lang.Object)>($r33)
crystal.util.RunIt.execute : virtualinvoke $r24.<org.apache.log4j.Logger: void info(java.lang.Object)>($r33) >>>>>>>> crystal.util.RunIt.execute : r34 = virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.Process start()>()
crystal.util.RunIt.execute : r34 = virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r35 = $r34
crystal.server.AbstractStateChecker.getLocalState : r35 = $r34 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r36 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getLocalState : $r36 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r37 = <crystal.model.LocalStateResult: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getLocalState : $r37 = <crystal.model.LocalStateResult: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37)
crystal.server.AbstractStateChecker.getLocalState : $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getLocalState : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r40 = virtualinvoke r35.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getLocalState : $r40 = virtualinvoke r35.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)
crystal.server.AbstractStateChecker.getLocalState : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getLocalState : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r42
crystal.server.AbstractStateChecker.getLocalState : return $r42 >>>>>>>> crystal.server.HgStateChecker.getLocalState : return $r1
crystal.server.HgStateChecker.getLocalState : return $r1 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $z0 = r0.<crystal.client.ConflictDaemon: boolean _enabled>
crystal.client.ConflictDaemon.calculateLocalState : $z0 = r0.<crystal.client.ConflictDaemon: boolean _enabled> >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : if $z0 != 0
crystal.client.ConflictDaemon.calculateLocalState : if $z0 != 0 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : r2 = null
crystal.client.ConflictDaemon.calculateLocalState : r2 = null >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
crystal.client.ConflictDaemon.calculateLocalState : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : r3 = virtualinvoke r1.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.client.ConflictDaemon.calculateLocalState : r3 = virtualinvoke r1.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r8 = virtualinvoke r3.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>()
crystal.client.ConflictDaemon.calculateLocalState : $r8 = virtualinvoke r3.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r4 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.client.ConflictDaemon.calculateLocalState : $r4 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $z1 = virtualinvoke $r8.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r4)
crystal.client.ConflictDaemon.calculateLocalState : $z1 = virtualinvoke $r8.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r4) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : if $z1 == 0
crystal.client.ConflictDaemon.calculateLocalState : if $z1 == 0 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r9 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log>
crystal.client.ConflictDaemon.calculateLocalState : $r9 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log> >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r10 = new java.lang.StringBuilder
crystal.client.ConflictDaemon.calculateLocalState : $r10 = new java.lang.StringBuilder >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConflictDaemon::calculateLocalState( ")
crystal.client.ConflictDaemon.calculateLocalState : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConflictDaemon::calculateLocalState( ") >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
crystal.client.ConflictDaemon.calculateLocalState : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> crystal.model.DataSource.toString : $r1 = new java.lang.StringBuilder
crystal.model.DataSource.toString : $r1 = new java.lang.StringBuilder >>>>>>>> crystal.model.DataSource.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
crystal.model.DataSource.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.model.DataSource.toString : $r2 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.model.DataSource.toString : $r2 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.model.DataSource.toString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)
crystal.model.DataSource.toString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) >>>>>>>> crystal.model.DataSource.toString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
crystal.model.DataSource.toString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> crystal.model.DataSource.toString : $r5 = virtualinvoke r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>()
crystal.model.DataSource.toString : $r5 = virtualinvoke r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>() >>>>>>>> crystal.model.DataSource.toString : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5)
crystal.model.DataSource.toString : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) >>>>>>>> crystal.model.DataSource.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
crystal.model.DataSource.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> crystal.model.DataSource.toString : $r8 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getCloneString()>()
crystal.model.DataSource.toString : $r8 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getCloneString()>() >>>>>>>> crystal.model.DataSource.toString : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
crystal.model.DataSource.toString : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> crystal.model.DataSource.toString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.model.DataSource.toString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.model.DataSource.toString : return $r10
crystal.model.DataSource.toString : return $r10 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ...)")
crystal.client.ConflictDaemon.calculateLocalState : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ...)") >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ConflictDaemon.calculateLocalState : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r9.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r14)
crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r9.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r14) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : r2 = staticinvoke <crystal.server.HgStateChecker: java.lang.String getLocalState(crystal.client.ProjectPreferences)>(r1)
crystal.client.ConflictDaemon.calculateLocalState : r2 = staticinvoke <crystal.server.HgStateChecker: java.lang.String getLocalState(crystal.client.ProjectPreferences)>(r1) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : if r2 != null
crystal.client.ConflictDaemon.calculateLocalState : if r2 != null >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r15 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log>
crystal.client.ConflictDaemon.calculateLocalState : $r15 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log> >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r16 = new java.lang.StringBuilder
crystal.client.ConflictDaemon.calculateLocalState : $r16 = new java.lang.StringBuilder >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local State calculated::")
crystal.client.ConflictDaemon.calculateLocalState : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local State calculated::") >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
crystal.client.ConflictDaemon.calculateLocalState : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::")
crystal.client.ConflictDaemon.calculateLocalState : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::") >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.client.ConflictDaemon.calculateLocalState : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ConflictDaemon.calculateLocalState : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r15.<org.apache.log4j.Logger: void info(java.lang.Object)>($r21)
crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r15.<org.apache.log4j.Logger: void info(java.lang.Object)>($r21) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : goto [?= $r43 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log>]
crystal.client.ConflictDaemon.calculateLocalState : goto [?= $r43 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log>] >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r43 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log>
crystal.client.ConflictDaemon.calculateLocalState : $r43 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log> >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r44 = new java.lang.StringBuilder
crystal.client.ConflictDaemon.calculateLocalState : $r44 = new java.lang.StringBuilder >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r44.<java.lang.StringBuilder: void <init>()>()
crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r44.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Computed local state for: ")
crystal.client.ConflictDaemon.calculateLocalState : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Computed local state for: ") >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
crystal.client.ConflictDaemon.calculateLocalState : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in: ")
crystal.client.ConflictDaemon.calculateLocalState : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in: ") >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r48 = staticinvoke <crystal.util.TimeUtility: java.lang.String msToHumanReadableDelta(long)>(l0)
crystal.client.ConflictDaemon.calculateLocalState : $r48 = staticinvoke <crystal.util.TimeUtility: java.lang.String msToHumanReadableDelta(long)>(l0) >>>>>>>> crystal.util.TimeUtility.msToHumanReadableDelta : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
crystal.util.TimeUtility.msToHumanReadableDelta : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> crystal.util.TimeUtility.msToHumanReadableDelta : $l2 = l1 - l0
crystal.util.TimeUtility.msToHumanReadableDelta : $l2 = l1 - l0 >>>>>>>> crystal.util.TimeUtility.msToHumanReadableDelta : $r0 = staticinvoke <crystal.util.TimeUtility: java.lang.String msToHumanReadable(long)>($l2)
crystal.util.TimeUtility.msToHumanReadableDelta : $r0 = staticinvoke <crystal.util.TimeUtility: java.lang.String msToHumanReadable(long)>($l2) >>>>>>>> crystal.util.TimeUtility.msToHumanReadable : $b3 = l0 cmp 1000L
crystal.util.TimeUtility.msToHumanReadable : $b3 = l0 cmp 1000L >>>>>>>> crystal.util.TimeUtility.msToHumanReadable : if $b3 >= 0
crystal.util.TimeUtility.msToHumanReadable : if $b3 >= 0 >>>>>>>> crystal.util.TimeUtility.msToHumanReadable : $r0 = new java.lang.StringBuilder
crystal.util.TimeUtility.msToHumanReadable : $r0 = new java.lang.StringBuilder >>>>>>>> crystal.util.TimeUtility.msToHumanReadable : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
crystal.util.TimeUtility.msToHumanReadable : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.TimeUtility.msToHumanReadable : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
crystal.util.TimeUtility.msToHumanReadable : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> crystal.util.TimeUtility.msToHumanReadable : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms")
crystal.util.TimeUtility.msToHumanReadable : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms") >>>>>>>> crystal.util.TimeUtility.msToHumanReadable : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.TimeUtility.msToHumanReadable : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.TimeUtility.msToHumanReadable : return $r3
crystal.util.TimeUtility.msToHumanReadable : return $r3 >>>>>>>> crystal.util.TimeUtility.msToHumanReadableDelta : return $r0
crystal.util.TimeUtility.msToHumanReadableDelta : return $r0 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48)
crystal.client.ConflictDaemon.calculateLocalState : $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ConflictDaemon.calculateLocalState : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r43.<org.apache.log4j.Logger: void info(java.lang.Object)>($r50)
crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r43.<org.apache.log4j.Logger: void info(java.lang.Object)>($r50) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : r5 = virtualinvoke r0.<crystal.client.ConflictDaemon: crystal.model.LocalStateResult getLocalState(crystal.model.DataSource)>(r3)
crystal.client.ConflictDaemon.calculateLocalState : r5 = virtualinvoke r0.<crystal.client.ConflictDaemon: crystal.model.LocalStateResult getLocalState(crystal.model.DataSource)>(r3) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : if r5 == null
crystal.client.ConflictDaemon.calculateLocalState : if r5 == null >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r51 = new crystal.model.LocalStateResult
crystal.client.ConflictDaemon.calculateLocalState : $r51 = new crystal.model.LocalStateResult >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r52 = virtualinvoke r1.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.client.ConflictDaemon.calculateLocalState : $r52 = virtualinvoke r1.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r53 = virtualinvoke r5.<crystal.model.LocalStateResult: java.lang.String getLastLocalState()>()
crystal.client.ConflictDaemon.calculateLocalState : $r53 = virtualinvoke r5.<crystal.model.LocalStateResult: java.lang.String getLastLocalState()>() >>>>>>>> crystal.model.LocalStateResult.getLastLocalState : $r1 = r0.<crystal.model.LocalStateResult: java.lang.String _lastState>
crystal.model.LocalStateResult.getLastLocalState : $r1 = r0.<crystal.model.LocalStateResult: java.lang.String _lastState> >>>>>>>> crystal.model.LocalStateResult.getLastLocalState : return $r1
crystal.model.LocalStateResult.getLastLocalState : return $r1 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r54 = virtualinvoke r5.<crystal.model.LocalStateResult: java.lang.String getLastAction()>()
crystal.client.ConflictDaemon.calculateLocalState : $r54 = virtualinvoke r5.<crystal.model.LocalStateResult: java.lang.String getLastAction()>() >>>>>>>> crystal.model.LocalStateResult.getLastAction : $r1 = r0.<crystal.model.LocalStateResult: java.lang.String _lastAction>
crystal.model.LocalStateResult.getLastAction : $r1 = r0.<crystal.model.LocalStateResult: java.lang.String _lastAction> >>>>>>>> crystal.model.LocalStateResult.getLastAction : return $r1
crystal.model.LocalStateResult.getLastAction : return $r1 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r55 = virtualinvoke r5.<crystal.model.LocalStateResult: java.lang.String getLastErrorMessage()>()
crystal.client.ConflictDaemon.calculateLocalState : $r55 = virtualinvoke r5.<crystal.model.LocalStateResult: java.lang.String getLastErrorMessage()>() >>>>>>>> crystal.model.LocalStateResult.getLastErrorMessage : $r1 = r0.<crystal.model.LocalStateResult: java.lang.String _lastErrorMessage>
crystal.model.LocalStateResult.getLastErrorMessage : $r1 = r0.<crystal.model.LocalStateResult: java.lang.String _lastErrorMessage> >>>>>>>> crystal.model.LocalStateResult.getLastErrorMessage : return $r1
crystal.model.LocalStateResult.getLastErrorMessage : return $r1 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r51.<crystal.model.LocalStateResult: void <init>(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r52, r2, $r53, $r54, $r55)
crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r51.<crystal.model.LocalStateResult: void <init>(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r52, r2, $r53, $r54, $r55) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : r56 = $r51
crystal.client.ConflictDaemon.calculateLocalState : r56 = $r51 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : goto [?= $r59 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>]
crystal.client.ConflictDaemon.calculateLocalState : goto [?= $r59 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>] >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r59 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.calculateLocalState : $r59 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r60 = virtualinvoke r1.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.client.ConflictDaemon.calculateLocalState : $r60 = virtualinvoke r1.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r59.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, r56)
crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r59.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, r56) >>>>>>>> crystal.model.DataSource.equals : if r1 == null
crystal.model.DataSource.equals : if r1 == null >>>>>>>> crystal.model.DataSource.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
crystal.model.DataSource.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.model.DataSource.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
crystal.model.DataSource.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.model.DataSource.equals : if $r3 != $r4
crystal.model.DataSource.equals : if $r3 != $r4 >>>>>>>> crystal.model.DataSource.equals : r2 = (crystal.model.DataSource) r1
crystal.model.DataSource.equals : r2 = (crystal.model.DataSource) r1 >>>>>>>> crystal.model.DataSource.equals : $r5 = r0.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.equals : $r5 = r0.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.equals : if $r5 != null
crystal.model.DataSource.equals : if $r5 != null >>>>>>>> crystal.model.DataSource.equals : $r7 = r0.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.equals : $r7 = r0.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.equals : $r8 = r2.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.equals : $r8 = r2.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.equals : $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8)
crystal.model.DataSource.equals : $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8) >>>>>>>> crystal.model.DataSource.equals : if $z0 == 0
crystal.model.DataSource.equals : if $z0 == 0 >>>>>>>> crystal.model.DataSource.equals : $z1 = 1
crystal.model.DataSource.equals : $z1 = 1 >>>>>>>> crystal.model.DataSource.equals : goto [?= return $z1]
crystal.model.DataSource.equals : goto [?= return $z1] >>>>>>>> crystal.model.DataSource.equals : return $z1
crystal.model.DataSource.equals : return $z1 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r62 = r0.<crystal.client.ConflictDaemon: java.util.Vector _listeners>
crystal.client.ConflictDaemon.calculateLocalState : $r62 = r0.<crystal.client.ConflictDaemon: java.util.Vector _listeners> >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : r6 = virtualinvoke $r62.<java.util.Vector: java.util.Iterator iterator()>()
crystal.client.ConflictDaemon.calculateLocalState : r6 = virtualinvoke $r62.<java.util.Vector: java.util.Iterator iterator()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
crystal.client.ConflictDaemon.calculateLocalState : $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : if $z3 == 0
crystal.client.ConflictDaemon.calculateLocalState : if $z3 == 0 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r63 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
crystal.client.ConflictDaemon.calculateLocalState : $r63 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : r7 = (crystal.client.ConflictDaemon$ComputationListener) $r63
crystal.client.ConflictDaemon.calculateLocalState : r7 = (crystal.client.ConflictDaemon$ComputationListener) $r63 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : interfaceinvoke r7.<crystal.client.ConflictDaemon$ComputationListener: void update()>()
crystal.client.ConflictDaemon.calculateLocalState : interfaceinvoke r7.<crystal.client.ConflictDaemon$ComputationListener: void update()>() >>>>>>>> crystal.client.ConflictClient.update : $r1 = r0.<crystal.client.ConflictClient: org.apache.log4j.Logger _log>
crystal.client.ConflictClient.update : $r1 = r0.<crystal.client.ConflictClient: org.apache.log4j.Logger _log> >>>>>>>> crystal.client.ConflictClient.update : virtualinvoke $r1.<org.apache.log4j.Logger: void trace(java.lang.Object)>("ConflictClient::update()")
crystal.client.ConflictClient.update : virtualinvoke $r1.<org.apache.log4j.Logger: void trace(java.lang.Object)>("ConflictClient::update()") >>>>>>>> crystal.client.ConflictClient.update : specialinvoke r0.<crystal.client.ConflictClient: void refresh()>()
crystal.client.ConflictClient.update : specialinvoke r0.<crystal.client.ConflictClient: void refresh()>() >>>>>>>> crystal.client.ConflictClient.refresh : $r13 = r0.<crystal.client.ConflictClient: crystal.client.ClientPreferences _preferences>
crystal.client.ConflictClient.refresh : $r13 = r0.<crystal.client.ConflictClient: crystal.client.ClientPreferences _preferences> >>>>>>>> crystal.client.ConflictClient.refresh : $r14 = virtualinvoke $r13.<crystal.client.ClientPreferences: java.util.Collection getProjectPreference()>()
crystal.client.ConflictClient.refresh : $r14 = virtualinvoke $r13.<crystal.client.ClientPreferences: java.util.Collection getProjectPreference()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : r69 = $r68
crystal.client.ConflictDaemon.calculateLocalState : r69 = $r68 >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r70 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log>
crystal.client.ConflictDaemon.calculateLocalState : $r70 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log> >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r71 = new java.lang.StringBuilder
crystal.client.ConflictDaemon.calculateLocalState : $r71 = new java.lang.StringBuilder >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r71.<java.lang.StringBuilder: void <init>()>()
crystal.client.ConflictDaemon.calculateLocalState : specialinvoke $r71.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Runtime Exception caught while getting state for: ")
crystal.client.ConflictDaemon.calculateLocalState : $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Runtime Exception caught while getting state for: ") >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
crystal.client.ConflictDaemon.calculateLocalState : $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.client.ConflictDaemon.calculateLocalState : $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r75 = virtualinvoke r69.<java.lang.RuntimeException: java.lang.String getMessage()>()
crystal.client.ConflictDaemon.calculateLocalState : $r75 = virtualinvoke r69.<java.lang.RuntimeException: java.lang.String getMessage()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75)
crystal.client.ConflictDaemon.calculateLocalState : $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ConflictDaemon.calculateLocalState : $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r70.<org.apache.log4j.Logger: void error(java.lang.Object)>($r77)
crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke $r70.<org.apache.log4j.Logger: void error(java.lang.Object)>($r77) >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke r69.<java.lang.RuntimeException: void printStackTrace()>()
crystal.client.ConflictDaemon.calculateLocalState : virtualinvoke r69.<java.lang.RuntimeException: void printStackTrace()>() >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : goto [?= return null]
crystal.client.ConflictDaemon.calculateLocalState : goto [?= return null] >>>>>>>> crystal.client.ConflictDaemon.calculateLocalState : return null
crystal.client.ConflictDaemon.calculateLocalState : return null >>>>>>>> crystal.model.LocalStateResult.equals : if r1 == null
crystal.model.LocalStateResult.equals : if r1 == null >>>>>>>> crystal.model.LocalStateResult.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
crystal.model.LocalStateResult.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.model.LocalStateResult.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
crystal.model.LocalStateResult.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.model.LocalStateResult.equals : if $r3 != $r4
crystal.model.LocalStateResult.equals : if $r3 != $r4 >>>>>>>> crystal.model.LocalStateResult.equals : r2 = (crystal.model.LocalStateResult) r1
crystal.model.LocalStateResult.equals : r2 = (crystal.model.LocalStateResult) r1 >>>>>>>> crystal.model.LocalStateResult.equals : $r5 = r0.<crystal.model.LocalStateResult: crystal.model.DataSource _source>
crystal.model.LocalStateResult.equals : $r5 = r0.<crystal.model.LocalStateResult: crystal.model.DataSource _source> >>>>>>>> crystal.model.LocalStateResult.equals : $r6 = r2.<crystal.model.LocalStateResult: crystal.model.DataSource _source>
crystal.model.LocalStateResult.equals : $r6 = r2.<crystal.model.LocalStateResult: crystal.model.DataSource _source> >>>>>>>> crystal.model.LocalStateResult.equals : $z0 = virtualinvoke $r5.<crystal.model.DataSource: boolean equals(java.lang.Object)>($r6)
crystal.model.LocalStateResult.equals : $z0 = virtualinvoke $r5.<crystal.model.DataSource: boolean equals(java.lang.Object)>($r6) >>>>>>>> crystal.model.LocalStateResult.equals : if $z0 == 0
crystal.model.LocalStateResult.equals : if $z0 == 0 >>>>>>>> crystal.model.LocalStateResult.equals : $r7 = r0.<crystal.model.LocalStateResult: java.lang.String _name>
crystal.model.LocalStateResult.equals : $r7 = r0.<crystal.model.LocalStateResult: java.lang.String _name> >>>>>>>> crystal.model.LocalStateResult.equals : if $r7 != null
crystal.model.LocalStateResult.equals : if $r7 != null >>>>>>>> crystal.model.LocalStateResult.equals : $r9 = r0.<crystal.model.LocalStateResult: java.lang.String _name>
crystal.model.LocalStateResult.equals : $r9 = r0.<crystal.model.LocalStateResult: java.lang.String _name> >>>>>>>> crystal.model.LocalStateResult.equals : $r10 = r2.<crystal.model.LocalStateResult: java.lang.String _name>
crystal.model.LocalStateResult.equals : $r10 = r2.<crystal.model.LocalStateResult: java.lang.String _name> >>>>>>>> crystal.model.LocalStateResult.equals : $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10)
crystal.model.LocalStateResult.equals : $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10) >>>>>>>> crystal.model.LocalStateResult.equals : if $z1 == 0
crystal.model.LocalStateResult.equals : if $z1 == 0 >>>>>>>> crystal.model.LocalStateResult.equals : $z2 = 1
crystal.model.LocalStateResult.equals : $z2 = 1 >>>>>>>> crystal.model.LocalStateResult.equals : goto [?= return $z2]
crystal.model.LocalStateResult.equals : goto [?= return $z2] >>>>>>>> crystal.model.LocalStateResult.equals : return $z2
