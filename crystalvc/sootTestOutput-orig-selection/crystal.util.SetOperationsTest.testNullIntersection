crystal.server.TestHgStateChecker.ensureEnvironment : r0 = <crystal.server.TestConstants: java.lang.String PROJECT_PATH> >>>>>>>> crystal.client.ConflictSystemTray.startLogging : $r0 = <crystal.Constants: org.apache.log4j.Level LOG_LEVEL>
crystal.client.ConflictSystemTray.startLogging : $r0 = <crystal.Constants: org.apache.log4j.Level LOG_LEVEL> >>>>>>>> crystal.client.ConflictSystemTray.startLogging : $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home")
crystal.client.ConflictSystemTray.startLogging : $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home") >>>>>>>> crystal.client.ConflictSystemTray.startLogging : staticinvoke <crystal.util.LSMRLogger: void startLog4J(boolean,boolean,org.apache.log4j.Level,java.lang.String,java.lang.String)>(1, 1, $r0, $r1, ".conflictClientLog")
crystal.client.ConflictSystemTray.startLogging : staticinvoke <crystal.util.LSMRLogger: void startLog4J(boolean,boolean,org.apache.log4j.Level,java.lang.String,java.lang.String)>(1, 1, $r0, $r1, ".conflictClientLog") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r3.<org.apache.log4j.Logger: void removeAllAppenders()>()
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r3.<org.apache.log4j.Logger: void removeAllAppenders()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : staticinvoke <org.apache.log4j.BasicConfigurator: void configure()>()
crystal.util.LSMRLogger.startLog4J : staticinvoke <org.apache.log4j.BasicConfigurator: void configure()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r10 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r10 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r11 = virtualinvoke $r10.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>()
crystal.util.LSMRLogger.startLog4J : $r11 = virtualinvoke $r10.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r12 = interfaceinvoke $r11.<java.util.Enumeration: java.lang.Object nextElement()>()
crystal.util.LSMRLogger.startLog4J : $r12 = interfaceinvoke $r11.<java.util.Enumeration: java.lang.Object nextElement()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r4 = (org.apache.log4j.ConsoleAppender) $r12
crystal.util.LSMRLogger.startLog4J : r4 = (org.apache.log4j.ConsoleAppender) $r12 >>>>>>>> crystal.util.LSMRLogger.startLog4J : if z0 == 0
crystal.util.LSMRLogger.startLog4J : if z0 == 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>
crystal.util.LSMRLogger.startLog4J : $r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR> >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setThreshold(org.apache.log4j.Priority)>($r5)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setThreshold(org.apache.log4j.Priority)>($r5) >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r1 == null
crystal.util.LSMRLogger.startLog4J : if r1 == null >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r13 = <java.io.File: java.lang.String separator>
crystal.util.LSMRLogger.startLog4J : $r13 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.util.LSMRLogger.startLog4J : $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r13)
crystal.util.LSMRLogger.startLog4J : $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r13) >>>>>>>> crystal.util.LSMRLogger.startLog4J : if $z2 != 0
crystal.util.LSMRLogger.startLog4J : if $z2 != 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r14 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r14 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r16 = <java.io.File: java.lang.String separator>
crystal.util.LSMRLogger.startLog4J : $r16 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
crystal.util.LSMRLogger.startLog4J : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r18 = new java.io.File
crystal.util.LSMRLogger.startLog4J : $r18 = new java.io.File >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r6 = $r18
crystal.util.LSMRLogger.startLog4J : r6 = $r18 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $z3 = virtualinvoke r6.<java.io.File: boolean exists()>()
crystal.util.LSMRLogger.startLog4J : $z3 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : if $z3 != 0
crystal.util.LSMRLogger.startLog4J : if $z3 != 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r2 != null
crystal.util.LSMRLogger.startLog4J : if r2 != null >>>>>>>> crystal.util.LSMRLogger.startLog4J : r25 = null
crystal.util.LSMRLogger.startLog4J : r25 = null >>>>>>>> crystal.util.LSMRLogger.startLog4J : n0 = null
crystal.util.LSMRLogger.startLog4J : n0 = null >>>>>>>> crystal.util.LSMRLogger.startLog4J : if z1 == 0
crystal.util.LSMRLogger.startLog4J : if z1 == 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r26 = new org.apache.log4j.xml.XMLLayout
crystal.util.LSMRLogger.startLog4J : $r26 = new org.apache.log4j.xml.XMLLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r26.<org.apache.log4j.xml.XMLLayout: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r26.<org.apache.log4j.xml.XMLLayout: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r27 = $r26
crystal.util.LSMRLogger.startLog4J : r27 = $r26 >>>>>>>> crystal.util.LSMRLogger.startLog4J : goto [?= (branch)]
crystal.util.LSMRLogger.startLog4J : goto [?= (branch)] >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r4 == null
crystal.util.LSMRLogger.startLog4J : if r4 == null >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r29 = new org.apache.log4j.PatternLayout
crystal.util.LSMRLogger.startLog4J : $r29 = new org.apache.log4j.PatternLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r7 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE>
crystal.util.LSMRLogger.startLog4J : $r7 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE> >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r29.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r7)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r29.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r7) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setLayout(org.apache.log4j.Layout)>($r29)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setLayout(org.apache.log4j.Layout)>($r29) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r30 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r30 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r31 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r31 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
crystal.util.LSMRLogger.startLog4J : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r30.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r27, $r35)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r30.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r27, $r35) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r25 = $r30
crystal.util.LSMRLogger.startLog4J : r25 = $r30 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r44 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r44 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r44.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r25)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r44.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r25) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r45 = new org.apache.log4j.xml.XMLLayout
crystal.util.LSMRLogger.startLog4J : $r45 = new org.apache.log4j.xml.XMLLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r45.<org.apache.log4j.xml.XMLLayout: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r45.<org.apache.log4j.xml.XMLLayout: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r8 = $r45
crystal.util.LSMRLogger.startLog4J : r8 = $r45 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r8.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r8.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r46 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r46 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r47 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r47 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r47.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r47.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
crystal.util.LSMRLogger.startLog4J : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r46.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r8, $r51)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r46.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r8, $r51) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r52 = $r46
crystal.util.LSMRLogger.startLog4J : r52 = $r46 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r53 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r53 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r53.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r52)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r53.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r52) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r54 = new org.apache.log4j.PatternLayout
crystal.util.LSMRLogger.startLog4J : $r54 = new org.apache.log4j.PatternLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r55 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE>
crystal.util.LSMRLogger.startLog4J : $r55 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE> >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r54.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r55)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r54.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r55) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r9 = $r54
crystal.util.LSMRLogger.startLog4J : r9 = $r54 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r56 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r56 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r57 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r57 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log")
crystal.util.LSMRLogger.startLog4J : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r56.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r9, $r61)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r56.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r9, $r61) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r62 = $r56
crystal.util.LSMRLogger.startLog4J : r62 = $r56 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r63 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r63 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r63.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r62)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r63.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r62) >>>>>>>> crystal.util.LSMRLogger.startLog4J : goto [?= $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()]
crystal.util.LSMRLogger.startLog4J : goto [?= $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()] >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r66.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(r0)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r66.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(r0) >>>>>>>> crystal.server.TestHgStateChecker.cleanEnvironment : r0 = <crystal.server.TestConstants: java.lang.String PROJECT_PATH>
crystal.server.TestHgStateChecker.cleanEnvironment : r0 = <crystal.server.TestConstants: java.lang.String PROJECT_PATH> >>>>>>>> crystal.util.SetOperations.intersection : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0)
crystal.util.SetOperations.intersection : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0) >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : if r0 != null
crystal.util.ValidInputChecker.checkNullInput : if r0 != null >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : $r1 = new java.lang.IllegalArgumentException
crystal.util.ValidInputChecker.checkNullInput : $r1 = new java.lang.IllegalArgumentException >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null input")
crystal.util.ValidInputChecker.checkNullInput : specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null input") >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : throw $r1
