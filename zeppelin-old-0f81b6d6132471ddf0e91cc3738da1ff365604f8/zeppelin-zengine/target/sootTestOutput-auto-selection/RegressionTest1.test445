org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener access$1202(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener access$1202(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String className>
org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : return $r1
org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List access$302(org.apache.zeppelin.interpreter.InterpreterSetting,java.util.List)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List access$302(org.apache.zeppelin.interpreter.InterpreterSetting,java.util.List)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$202(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$202(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$102(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$102(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void postProcessing()>()
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void postProcessing()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r1 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r1 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = $r1
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : if $r2 != null
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : if $r2 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r3 = new org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r3 = new org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : specialinvoke $r3.<org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r4)
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : specialinvoke $r3.<org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> = $r3
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> = $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : return $r2
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterGroupId(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterGroupId(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $z0 = $r3.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $z0 = $r3.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $z1 = virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isProcess()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $z1 = virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : r11 = "shared_process"
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : r11 = "shared_process" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r14 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r14 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : return $r19
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : return $r19 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r11 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r11 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10 = newarray (java.lang.Object)[3]
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[0] = r3
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[0] = r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[1] = r1
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[1] = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[2] = r2
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[2] = r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Create InterpreterGroup with groupId: {} for user: {} and note: {}", $r10)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Create InterpreterGroup with groupId: {} for user: {} and note: {}", $r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r16 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.ManagedInterpreterGroup createInterpreterGroup(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r16 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.ManagedInterpreterGroup createInterpreterGroup(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r4 = new org.apache.zeppelin.interpreter.ManagedInterpreterGroup
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r4 = new org.apache.zeppelin.interpreter.ManagedInterpreterGroup >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : specialinvoke $r4.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void <init>(java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>(r1, r0)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : specialinvoke $r4.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void <init>(java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>(r1, r0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.display.AngularObjectRegistryListener angularObjectRegistryListener>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.display.AngularObjectRegistryListener angularObjectRegistryListener> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: void <init>(java.lang.String,org.apache.zeppelin.display.AngularObjectRegistryListener,org.apache.zeppelin.interpreter.ManagedInterpreterGroup)>(r1, $r6, $r4)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: void <init>(java.lang.String,org.apache.zeppelin.display.AngularObjectRegistryListener,org.apache.zeppelin.interpreter.ManagedInterpreterGroup)>(r1, $r6, $r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : virtualinvoke $r4.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void setAngularObjectRegistry(org.apache.zeppelin.display.AngularObjectRegistry)>($r5)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : virtualinvoke $r4.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void setAngularObjectRegistry(org.apache.zeppelin.display.AngularObjectRegistry)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : return $r4
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r16)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r17 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r8
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r17 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : return r17
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : return r17 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterGroup: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterGroup: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObject
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObject >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.interpreter.ManagedInterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.interpreter.ManagedInterpreterGroup interpreterGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener getAngularObjectListener()>()
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener getAngularObjectListener()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteAngularObject: void <init>(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.ManagedInterpreterGroup,org.apache.zeppelin.display.AngularObjectListener)>(r1, r2, r3, r4, $r6, $r7)
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteAngularObject: void <init>(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.ManagedInterpreterGroup,org.apache.zeppelin.display.AngularObjectListener)>(r1, r2, r3, r4, $r6, $r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : return $r5
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : return $r5 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1
org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2
org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r2
org.apache.zeppelin.notebook.Note.getConfig : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.notebook.Note.getUserNote : $r5 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : specialinvoke $r5.<org.apache.zeppelin.notebook.Note: void <init>()>()
org.apache.zeppelin.notebook.Note.getUserNote : specialinvoke $r5.<org.apache.zeppelin.notebook.Note: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r6
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r7
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r7 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map config> = $r8
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map config> = $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getAngularObjects()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getAngularObjects()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getAngularObjects : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.getAngularObjects : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.getAngularObjects : return $r1
org.apache.zeppelin.notebook.Note.getAngularObjects : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r9
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r9 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getUserNote : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.getUserNote : r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.getUserNote : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : if $z0 == 0
org.apache.zeppelin.notebook.Note.getUserNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : return $r5
org.apache.zeppelin.notebook.Note.getUserNote : return $r5 >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.getNotebook : $r1 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: org.apache.zeppelin.notebook.Notebook notebook>
org.apache.zeppelin.helium.HeliumApplicationFactory.getNotebook : $r1 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: org.apache.zeppelin.notebook.Notebook notebook> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.getNotebook : return $r1
org.apache.zeppelin.helium.HeliumApplicationFactory.getNotebook : return $r1 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r3 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r3 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $r3 == null
org.apache.zeppelin.helium.Helium.loadConf : if $r3 == null >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z0 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.helium.Helium.loadConf : $z0 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z0 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z0 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r16 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.zeppelin.helium.Helium.loadConf : r16 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i0 = lengthof r16
org.apache.zeppelin.helium.Helium.loadConf : i0 = lengthof r16 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i1 = 0
org.apache.zeppelin.helium.Helium.loadConf : i1 = 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if i1 >= i0
org.apache.zeppelin.helium.Helium.loadConf : if i1 >= i0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r2 = r16[i1]
org.apache.zeppelin.helium.Helium.loadConf : r2 = r16[i1] >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("http://")
org.apache.zeppelin.helium.Helium.loadConf : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("http://") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z1 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z1 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("https://")
org.apache.zeppelin.helium.Helium.loadConf : $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("https://") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z3 == 0
org.apache.zeppelin.helium.Helium.loadConf : if $z3 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r13 = r0.<org.apache.zeppelin.helium.Helium: org.slf4j.Logger logger>
org.apache.zeppelin.helium.Helium.loadConf : $r13 = r0.<org.apache.zeppelin.helium.Helium: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Add helium local registry {}", r2)
org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Add helium local registry {}", r2) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r15 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.loadConf : $r15 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r14 = new org.apache.zeppelin.helium.HeliumLocalRegistry
org.apache.zeppelin.helium.Helium.loadConf : $r14 = new org.apache.zeppelin.helium.HeliumLocalRegistry >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r14.<org.apache.zeppelin.helium.HeliumLocalRegistry: void <init>(java.lang.String,java.lang.String)>(r2, r2)
org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r14.<org.apache.zeppelin.helium.HeliumLocalRegistry: void <init>(java.lang.String,java.lang.String)>(r2, r2) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r14)
org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r14) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i1 = i1 + 1
org.apache.zeppelin.helium.Helium.loadConf : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : goto [?= (branch)]
org.apache.zeppelin.helium.Helium.loadConf : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r18 = new java.io.File
org.apache.zeppelin.helium.Helium.loadConf : $r18 = new java.io.File >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z5 = virtualinvoke $r18.<java.io.File: boolean isFile()>()
org.apache.zeppelin.helium.Helium.loadConf : $z5 = virtualinvoke $r18.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z5 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z5 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r20 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r18)
org.apache.zeppelin.helium.Helium.loadConf : r20 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r18) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r4 = staticinvoke <org.apache.zeppelin.helium.HeliumConf: org.apache.zeppelin.helium.HeliumConf fromJson(java.lang.String)>(r20)
org.apache.zeppelin.helium.Helium.loadConf : $r4 = staticinvoke <org.apache.zeppelin.helium.HeliumConf: org.apache.zeppelin.helium.HeliumConf fromJson(java.lang.String)>(r20) >>>>>>>> org.apache.zeppelin.helium.HeliumConf.fromJson : $r1 = <org.apache.zeppelin.helium.HeliumConf: com.google.gson.Gson gson>
org.apache.zeppelin.helium.HeliumConf.fromJson : $r1 = <org.apache.zeppelin.helium.HeliumConf: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.helium.HeliumConf.fromJson : $r2 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r0, class "Lorg/apache/zeppelin/helium/HeliumConf;")
org.apache.zeppelin.helium.HeliumConf.fromJson : $r2 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r0, class "Lorg/apache/zeppelin/helium/HeliumConf;") >>>>>>>> org.apache.zeppelin.helium.HeliumConf.fromJson : $r3 = (org.apache.zeppelin.helium.HeliumConf) $r2
org.apache.zeppelin.helium.HeliumConf.fromJson : $r3 = (org.apache.zeppelin.helium.HeliumConf) $r2 >>>>>>>> org.apache.zeppelin.helium.HeliumConf.fromJson : return $r3
org.apache.zeppelin.helium.HeliumConf.fromJson : return $r3 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : return $r4
org.apache.zeppelin.helium.Helium.loadConf : return $r4 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r1 = virtualinvoke r0.<org.apache.zeppelin.helium.Helium: java.util.Map getAllPackageInfo(boolean,java.lang.String)>(1, null)
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r1 = virtualinvoke r0.<org.apache.zeppelin.helium.Helium: java.util.Map getAllPackageInfo(boolean,java.lang.String)>(1, null) >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r5 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r5 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r2 = virtualinvoke $r5.<org.apache.zeppelin.helium.HeliumConf: java.util.Map getEnabledPackages()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r2 = virtualinvoke $r5.<org.apache.zeppelin.helium.HeliumConf: java.util.Map getEnabledPackages()>() >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : $r1 = new java.util.HashMap
org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : $r1 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : $r2 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.Map enabled>
org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : $r2 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.Map enabled> >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2)
org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2) >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : return $r1
org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : return $r1 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r6 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r6 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : entermonitor $r6
org.apache.zeppelin.helium.Helium.getAllPackageInfo : entermonitor $r6 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : if z0 != 0
org.apache.zeppelin.helium.Helium.getAllPackageInfo : if z0 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r49 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r49 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z10 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z10 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z10 == 0
org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z10 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r15 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r15 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r50 = (org.apache.zeppelin.helium.HeliumRegistry) $r15
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r50 = (org.apache.zeppelin.helium.HeliumRegistry) $r15 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r16 = virtualinvoke r50.<org.apache.zeppelin.helium.HeliumRegistry: java.util.List getAll()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r16 = virtualinvoke r50.<org.apache.zeppelin.helium.HeliumRegistry: java.util.List getAll()>() >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r7 = new java.util.LinkedList
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r7 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : specialinvoke $r7.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : specialinvoke $r7.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r8 = new java.io.File
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r8 = new java.io.File >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r9 = virtualinvoke r0.<org.apache.zeppelin.helium.HeliumLocalRegistry: java.lang.String uri()>()
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r9 = virtualinvoke r0.<org.apache.zeppelin.helium.HeliumLocalRegistry: java.lang.String uri()>() >>>>>>>> org.apache.zeppelin.helium.HeliumRegistry.uri : $r1 = r0.<org.apache.zeppelin.helium.HeliumRegistry: java.lang.String uri>
org.apache.zeppelin.helium.HeliumRegistry.uri : $r1 = r0.<org.apache.zeppelin.helium.HeliumRegistry: java.lang.String uri> >>>>>>>> org.apache.zeppelin.helium.HeliumRegistry.uri : return $r1
org.apache.zeppelin.helium.HeliumRegistry.uri : return $r1 >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9)
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : r3 = virtualinvoke $r8.<java.io.File: java.io.File[] listFiles()>()
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : r3 = virtualinvoke $r8.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : if r3 != null
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : if r3 != null >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : return $r7
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : return $r7 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r51 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r51 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z11 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z11 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z11 == 0
org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z11 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= (branch)]
org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= $z10 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= $z10 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>]
org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>] >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r61 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r61 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z15 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z15 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z15 == 0
org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z15 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r10 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r10 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : exitmonitor $r6
org.apache.zeppelin.helium.Helium.getAllPackageInfo : exitmonitor $r6 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : return $r10
org.apache.zeppelin.helium.Helium.getAllPackageInfo : return $r10 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : return $r1
org.apache.zeppelin.helium.Helium.getAllPackageInfo : return $r1 >>>>>>>> org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : $r1 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf>
org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : $r1 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf> >>>>>>>> org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : $r2 = virtualinvoke $r1.<org.apache.zeppelin.helium.HeliumConf: java.util.List getBundleDisplayOrder()>()
org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : $r2 = virtualinvoke $r1.<org.apache.zeppelin.helium.HeliumConf: java.util.List getBundleDisplayOrder()>() >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : $r1 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.List bundleDisplayOrder>
org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : $r1 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.List bundleDisplayOrder> >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : if $r1 != null
org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : if $r1 != null >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : $r2 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.List bundleDisplayOrder>
org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : $r2 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.List bundleDisplayOrder> >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : return $r2
org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : return $r2 >>>>>>>> org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : return $r2
org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : return $r2 >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r5 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf>
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r5 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf> >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : r1 = virtualinvoke $r5.<org.apache.zeppelin.helium.HeliumConf: java.util.List getBundleDisplayOrder()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : r1 = virtualinvoke $r5.<org.apache.zeppelin.helium.HeliumConf: java.util.List getBundleDisplayOrder()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r6 = new java.util.HashSet
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r6 = new java.util.HashSet >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : specialinvoke $r6.<java.util.HashSet: void <init>()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : specialinvoke $r6.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r7 = new java.util.LinkedList
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r7 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : specialinvoke $r7.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : specialinvoke $r7.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : r19 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : r19 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $z8 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $z8 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : if $z8 == 0
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : if $z8 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages> >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : r23 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : r23 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : if $z0 == 0
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : if $z0 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r10 = new java.util.LinkedList
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : $r10 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : specialinvoke $r10.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : specialinvoke $r10.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : virtualinvoke $r10.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r6)
org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : virtualinvoke $r10.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r6) >>>>>>>> org.apache.zeppelin.helium.Helium.getBundlePackagesToBundle : return $r7
