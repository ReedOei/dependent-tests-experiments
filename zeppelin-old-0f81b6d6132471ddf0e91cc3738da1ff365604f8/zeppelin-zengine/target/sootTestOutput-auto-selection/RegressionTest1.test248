org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r57 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r56 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r56 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r56.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r56.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wait for OutputBuffer queue interrupted: ")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wait for OutputBuffer queue interrupted: ") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r59 = virtualinvoke $r55.<java.lang.InterruptedException: java.lang.String getMessage()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r59 = virtualinvoke $r55.<java.lang.InterruptedException: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r57.<org.slf4j.Logger: void error(java.lang.String)>($r61)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r57.<org.slf4j.Logger: void error(java.lang.String)>($r61) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r63 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r63 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r8 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r8 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r8.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>($r5)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r8.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r64 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r64 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z2 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z2 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z2 == 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l3 = virtualinvoke r63.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l3 = virtualinvoke r63.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l4 = $l2 - $l3
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l4 = $l2 - $l3 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r70 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r70 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l5 = virtualinvoke r70.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l5 = virtualinvoke r70.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r9 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long SAFE_PROCESSING_TIME>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r9 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long SAFE_PROCESSING_TIME> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l6 = virtualinvoke $r9.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l6 = virtualinvoke $r9.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $b7 = $l5 cmp $l6
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $b7 = $l5 cmp $l6 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $b7 <= 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $b7 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r11 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r11 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r10 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing time for append-output took ")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing time for append-output took ") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r70)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r70) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" milliseconds")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" milliseconds") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r15)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r16 = new java.lang.Long
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r16 = new java.lang.Long >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r16.<java.lang.Long: void <init>(long)>(0L)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r16.<java.lang.Long: void <init>(long)>(0L) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r71 = $r16
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r71 = $r16 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r17 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r17 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r72 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r72 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z3 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z3 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z3 == 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l8 = virtualinvoke r71.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l8 = virtualinvoke r71.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r18 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long SAFE_PROCESSING_STRING_SIZE>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r18 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long SAFE_PROCESSING_STRING_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l9 = virtualinvoke $r18.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l9 = virtualinvoke $r18.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $b10 = $l8 cmp $l9
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $b10 = $l8 cmp $l9 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $b10 <= 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $b10 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r20 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r20 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r19 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r19 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing size for append-output is ")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing size for append-output is ") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r71)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r71) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String)>($r24)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String)>($r24) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.isOpened : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.isOpened : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.isOpened : return $z0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.isOpened : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r9 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProgress is called when RemoterInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProgress is called when RemoterInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r12 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r12 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : return 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getProgress : return 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r9 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getStatus is called when RemoteInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getStatus is called when RemoteInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r12 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r12 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r15 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status UNKNOWN>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r15 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status UNKNOWN> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r16 = virtualinvoke $r15.<org.apache.zeppelin.scheduler.Job$Status: java.lang.String name()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r16 = virtualinvoke $r15.<org.apache.zeppelin.scheduler.Job$Status: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : return $r16
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : return $r16 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getSessionId : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getSessionId : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getSessionId : return $r1
