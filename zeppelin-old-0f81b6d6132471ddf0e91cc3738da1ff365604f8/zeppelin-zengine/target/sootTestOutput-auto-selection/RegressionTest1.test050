org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterGroupName> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener access$1202(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener access$1202(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : return r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : r17 = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : r17 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : r17 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client getClient()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : r17 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client getClient()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : if $r1 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : if $r1 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r2 = new org.apache.commons.pool2.impl.GenericObjectPool
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r2 = new org.apache.commons.pool2.impl.GenericObjectPool >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r3 = new org.apache.zeppelin.interpreter.remote.ClientFactory
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r3 = new org.apache.zeppelin.interpreter.remote.ClientFactory >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.lang.String getHost()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.lang.String getHost()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getHost : return "localhost"
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getHost : return "localhost" >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $i0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int getPort()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $i0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int getPort()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getPort : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int port>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getPort : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int port> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getPort : return $i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getPort : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : specialinvoke $r3.<org.apache.zeppelin.interpreter.remote.ClientFactory: void <init>(java.lang.String,int)>($r4, $i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : specialinvoke $r3.<org.apache.zeppelin.interpreter.remote.ClientFactory: void <init>(java.lang.String,int)>($r4, $i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : specialinvoke $r2.<org.apache.commons.pool2.impl.GenericObjectPool: void <init>(org.apache.commons.pool2.PooledObjectFactory)>($r3)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : specialinvoke $r2.<org.apache.commons.pool2.impl.GenericObjectPool: void <init>(org.apache.commons.pool2.PooledObjectFactory)>($r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> = $r2
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> = $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r7 = virtualinvoke $r6.<org.apache.commons.pool2.impl.GenericObjectPool: java.lang.Object borrowObject()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r7 = virtualinvoke $r6.<org.apache.commons.pool2.impl.GenericObjectPool: java.lang.Object borrowObject()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client create()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client create()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r5 = new org.apache.thrift.transport.TSocket
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r5 = new org.apache.thrift.transport.TSocket >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r6 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.lang.String host>
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r6 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.lang.String host> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $i0 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: int port>
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $i0 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: int port> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r5.<org.apache.thrift.transport.TSocket: void <init>(java.lang.String,int)>($r6, $i0)
org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r5.<org.apache.thrift.transport.TSocket: void <init>(java.lang.String,int)>($r6, $i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : virtualinvoke $r5.<org.apache.thrift.transport.TSocket: void open()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.create : virtualinvoke $r5.<org.apache.thrift.transport.TSocket: void open()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r13 = new org.apache.zeppelin.interpreter.InterpreterException
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r13 = new org.apache.zeppelin.interpreter.InterpreterException >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>($r12)
org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : throw $r13
org.apache.zeppelin.interpreter.remote.ClientFactory.create : throw $r13 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r13 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r13 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Can\'t update angular object", $r12)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Can\'t update angular object", $r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : z0 = 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : z0 = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r6 = new com.google.gson.Gson
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r6 = new com.google.gson.Gson >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : specialinvoke $r6.<com.google.gson.Gson: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : specialinvoke $r6.<com.google.gson.Gson: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r7 = virtualinvoke $r6.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r4)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r7 = virtualinvoke $r6.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : virtualinvoke r17.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client: void angularObjectUpdate(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, $r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : virtualinvoke r17.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client: void angularObjectUpdate(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, $r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r9 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r9 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Remote interpreter process not started", $r8)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Remote interpreter process not started", $r8) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : if r17 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : if r17 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getInterpreterContextRunnerPool : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.InterpreterContextRunnerPool interpreterContextRunnerPool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getInterpreterContextRunnerPool : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.InterpreterContextRunnerPool interpreterContextRunnerPool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getInterpreterContextRunnerPool : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getInterpreterContextRunnerPool : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : return $r1
