org.apache.zeppelin.notebook.FolderView.countFolders : $r1 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.countFolders : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>()
org.apache.zeppelin.notebook.FolderView.countFolders : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.countFolders : return $i0
org.apache.zeppelin.notebook.FolderView.countFolders : return $i0 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1
org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2
org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r2
org.apache.zeppelin.notebook.Note.getConfig : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : entermonitor $r6
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : entermonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : if $z0 == 0
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r8 = new java.util.HashMap
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r8 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : specialinvoke $r8.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : specialinvoke $r8.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : exitmonitor $r6
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : exitmonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : return $r8
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : return $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.getInfo : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.getInfo : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.getInfo : if $r1 != null
org.apache.zeppelin.notebook.Note.getInfo : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getInfo : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.getInfo : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.getInfo : return $r2
org.apache.zeppelin.notebook.Note.getInfo : return $r2 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Note name changed: {} -> {}", r2, $r5)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Note name changed: {} -> {}", r2, $r5) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.hashCode : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r1 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r1 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.hashCode : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i4 = interfaceinvoke $r10.<java.util.List: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i4 = interfaceinvoke $r10.<java.util.List: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= $i0 = 31 * $i4]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= $i0 = 31 * $i4] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i0 = 31 * $i4
org.apache.zeppelin.notebook.Note.hashCode : $i0 = 31 * $i4 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.hashCode : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r2 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r2 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.hashCode : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i6 = virtualinvoke $r9.<java.lang.String: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i6 = virtualinvoke $r9.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i7 = $i0 + $i6]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i7 = $i0 + $i6] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i7 = $i0 + $i6
org.apache.zeppelin.notebook.Note.hashCode : i7 = $i0 + $i6 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i1 = 31 * i7
org.apache.zeppelin.notebook.Note.hashCode : $i1 = 31 * i7 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.hashCode : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r3 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r3 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.hashCode : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i8 = interfaceinvoke $r8.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i8 = interfaceinvoke $r8.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i9 = $i1 + $i8]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i9 = $i1 + $i8] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i9 = $i1 + $i8
org.apache.zeppelin.notebook.Note.hashCode : i9 = $i1 + $i8 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i2 = 31 * i9
org.apache.zeppelin.notebook.Note.hashCode : $i2 = 31 * i9 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.hashCode : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r4 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r4 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.hashCode : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i10 = interfaceinvoke $r7.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i10 = interfaceinvoke $r7.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i11 = $i2 + $i10]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i11 = $i2 + $i10] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i11 = $i2 + $i10
org.apache.zeppelin.notebook.Note.hashCode : i11 = $i2 + $i10 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i3 = 31 * i11
org.apache.zeppelin.notebook.Note.hashCode : $i3 = 31 * i11 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.hashCode : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r5 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.hashCode : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i12 = interfaceinvoke $r6.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i12 = interfaceinvoke $r6.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i13 = $i3 + $i12]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i13 = $i3 + $i12] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i13 = $i3 + $i12
org.apache.zeppelin.notebook.Note.hashCode : i13 = $i3 + $i12 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : return i13
org.apache.zeppelin.notebook.Note.hashCode : return i13 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z1 != 0
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void putNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void putNote(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.FolderView.putNote : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.putNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>()
org.apache.zeppelin.notebook.FolderView.putNote : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0)
org.apache.zeppelin.notebook.Note.getFolderId : $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : if $c1 != 47
org.apache.zeppelin.notebook.Note.getFolderId : if $c1 != 47 >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Note.getFolderId : i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : if i0 >= 0
org.apache.zeppelin.notebook.Note.getFolderId : if i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : return "/"
org.apache.zeppelin.notebook.Note.getFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>(r2)
org.apache.zeppelin.notebook.FolderView.putNote : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder createFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder createFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : r11 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r10)
org.apache.zeppelin.notebook.FolderView.createFolder : r11 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r10) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z0 == 0
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z1 == 0
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : return "/"
org.apache.zeppelin.notebook.Folder.normalizeFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r3 = new org.apache.zeppelin.notebook.Folder
org.apache.zeppelin.notebook.FolderView.createFolder : $r3 = new org.apache.zeppelin.notebook.Folder >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : specialinvoke $r3.<org.apache.zeppelin.notebook.Folder: void <init>(java.lang.String)>(r11)
org.apache.zeppelin.notebook.FolderView.createFolder : specialinvoke $r3.<org.apache.zeppelin.notebook.Folder: void <init>(java.lang.String)>(r11) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: void addFolderListener(org.apache.zeppelin.notebook.FolderListener)>(r0)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: void addFolderListener(org.apache.zeppelin.notebook.FolderListener)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Folder.addFolderListener : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners>
org.apache.zeppelin.notebook.Folder.addFolderListener : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners> >>>>>>>> org.apache.zeppelin.notebook.Folder.addFolderListener : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Folder.addFolderListener : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.createFolder : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Create folder {}", r11)
org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Create folder {}", r11) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.createFolder : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : entermonitor $r5
org.apache.zeppelin.notebook.FolderView.createFolder : entermonitor $r5 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.createFolder : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r3)
org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : exitmonitor $r5
org.apache.zeppelin.notebook.FolderView.createFolder : exitmonitor $r5 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : goto [?= $r8 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()]
org.apache.zeppelin.notebook.FolderView.createFolder : goto [?= $r8 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()] >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r8 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()
org.apache.zeppelin.notebook.FolderView.createFolder : $r8 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id>
org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Folder.getId : return $r1
org.apache.zeppelin.notebook.Folder.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.isRoot : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : return $z0
org.apache.zeppelin.notebook.Folder.isRoot : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : if $z0 == 0
org.apache.zeppelin.notebook.Folder.getParentFolderId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : return "/"
org.apache.zeppelin.notebook.Folder.getParentFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : r13 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>($r8)
org.apache.zeppelin.notebook.FolderView.createFolder : r13 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r4 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r4 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r6 = (org.apache.zeppelin.notebook.Folder) $r5
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r6 = (org.apache.zeppelin.notebook.Folder) $r5 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r6
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: void setParent(org.apache.zeppelin.notebook.Folder)>(r13)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: void setParent(org.apache.zeppelin.notebook.Folder)>(r13) >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.setParent : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.setParent : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.setParent : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Set parent of {} to {}", $r3, $r4)
org.apache.zeppelin.notebook.Folder.setParent : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Set parent of {} to {}", $r3, $r4) >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent> = r1
org.apache.zeppelin.notebook.Folder.setParent : r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent> = r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r13.<org.apache.zeppelin.notebook.Folder: void addChild(org.apache.zeppelin.notebook.Folder)>($r3)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r13.<org.apache.zeppelin.notebook.Folder: void addChild(org.apache.zeppelin.notebook.Folder)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : if r1 != r0
org.apache.zeppelin.notebook.Folder.addChild : if r1 != r0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : return $r3
org.apache.zeppelin.notebook.FolderView.createFolder : return $r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r3
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void addNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.putNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void addNote(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r4 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.addNote : $r4 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Add note {} to folder {}", $r5, $r6)
org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Add note {} to folder {}", $r5, $r6) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : entermonitor $r7
org.apache.zeppelin.notebook.Folder.addNote : entermonitor $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1)
org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : exitmonitor $r7
org.apache.zeppelin.notebook.Folder.addNote : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : goto [?= return]
org.apache.zeppelin.notebook.Folder.addNote : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.putNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : entermonitor $r6
org.apache.zeppelin.notebook.FolderView.putNote : entermonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.putNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.apache.zeppelin.notebook.FolderView.putNote : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : exitmonitor $r6
org.apache.zeppelin.notebook.FolderView.putNote : exitmonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : goto [?= return]
org.apache.zeppelin.notebook.FolderView.putNote : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : goto [?= return]
