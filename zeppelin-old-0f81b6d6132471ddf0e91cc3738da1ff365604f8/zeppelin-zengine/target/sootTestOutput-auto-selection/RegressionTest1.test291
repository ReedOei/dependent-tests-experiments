org.apache.zeppelin.interpreter.InterpreterSetting.setRemoteInterpreterProcessListener : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getErrorReason : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String errorReason>
org.apache.zeppelin.interpreter.InterpreterSetting.getErrorReason : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String errorReason> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getErrorReason : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getErrorReason : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setConf : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setConf : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getStatus : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status>
org.apache.zeppelin.interpreter.InterpreterSetting.getStatus : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getStatus : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getStatus : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setStatus : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setStatus : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption access$502(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterOption)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption access$502(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterOption)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setDependencyResolver : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setDependencyResolver : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setDependencyResolver : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.dep.DependencyResolver access$1002(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.dep.DependencyResolver)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setDependencyResolver : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.dep.DependencyResolver access$1002(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.dep.DependencyResolver)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$1002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.dep.DependencyResolver dependencyResolver> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$1002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.dep.DependencyResolver dependencyResolver> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$1002 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$1002 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setDependencyResolver : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setDependencyResolver : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void postProcessing()>()
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void postProcessing()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r1 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r1 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = $r1
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : if $r2 != null
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : if $r2 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r3 = new org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r3 = new org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : specialinvoke $r3.<org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r4)
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : specialinvoke $r3.<org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> = $r3
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> = $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : return $r2
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterRunner : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterRunner : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r4 = new java.util.Properties
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r4 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r4.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r4.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r2 = (java.util.Map) $r5
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r2 = (java.util.Map) $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r40 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r40 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z0 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z0 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z1 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.output.limit")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z1 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.output.limit") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z1 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r22 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r22 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_OUTPUT_LIMIT>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_OUTPUT_LIMIT> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i1 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r23)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i1 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r23) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.output.limit", $r27)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.output.limit", $r27) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z2 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.max.poolsize")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z2 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.max.poolsize") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z2 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r16 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r16 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i0 = virtualinvoke $r17.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r16)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i0 = virtualinvoke $r17.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r20)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r20) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r41 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r41 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.localRepo", $r13)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.localRepo", $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : return $r4
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setProperties : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> = r1
