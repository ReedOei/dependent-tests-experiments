org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1
org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2
org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r2
org.apache.zeppelin.notebook.Note.getConfig : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.isLastParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.isLastParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.isLastParagraph : $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isLastParagraph : $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isLastParagraph : if $z0 != 0
org.apache.zeppelin.notebook.Note.isLastParagraph : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.isLastParagraph : return 1
org.apache.zeppelin.notebook.Note.isLastParagraph : return 1 >>>>>>>> org.apache.zeppelin.notebook.Note.onOutputAppend : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.onOutputAppend : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.onOutputAppend : if $r4 == null
org.apache.zeppelin.notebook.Note.onOutputAppend : if $r4 == null >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r7 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r7 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : specialinvoke $r7.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : specialinvoke $r7.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : entermonitor $r8
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : entermonitor $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : if $z0 == 0
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : exitmonitor $r8
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : exitmonitor $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : goto [?= return $r7]
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : goto [?= return $r7] >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : return $r7
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : return $r7 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.security.SecureRandom
org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $i1 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $i1 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : return $r6
org.apache.zeppelin.notebook.Paragraph.generateId : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r9 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r9 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void updateIndexNoteName(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void updateIndexNoteName(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : $r4 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : $r4 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing Notebook {}, \'{}\'", r3, r2)
org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing Notebook {}, \'{}\'", r3, r2) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : if null == r2
org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : if null == r2 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : if $z0 == 0
org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void updateDoc(java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r3, r2, null)
org.apache.zeppelin.search.LuceneSearch.updateIndexNoteName : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void updateDoc(java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r3, r2, null) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : r4 = staticinvoke <org.apache.zeppelin.search.LuceneSearch: java.lang.String formatId(java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r1, r3)
org.apache.zeppelin.search.LuceneSearch.updateDoc : r4 = staticinvoke <org.apache.zeppelin.search.LuceneSearch: java.lang.String formatId(java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r1, r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : r5 = r0
org.apache.zeppelin.search.LuceneSearch.formatId : r5 = r0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : if null == r1
org.apache.zeppelin.search.LuceneSearch.formatId : if null == r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : return r5
org.apache.zeppelin.search.LuceneSearch.formatId : return r5 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : r5 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.document.Document newDocument(java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r4, r2, r3)
org.apache.zeppelin.search.LuceneSearch.updateDoc : r5 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.document.Document newDocument(java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r4, r2, r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r7 = new org.apache.lucene.document.Document
org.apache.zeppelin.search.LuceneSearch.newDocument : $r7 = new org.apache.lucene.document.Document >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r7.<org.apache.lucene.document.Document: void <init>()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r7.<org.apache.lucene.document.Document: void <init>()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r8 = new org.apache.lucene.document.StringField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r8 = new org.apache.lucene.document.StringField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r9 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r9 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r8.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("id", r1, $r9)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r8.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("id", r1, $r9) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r8)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r8) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r10 = new org.apache.lucene.document.StringField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r10 = new org.apache.lucene.document.StringField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r11 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r11 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r10.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("title", r2, $r11)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r10.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("title", r2, $r11) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r10)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r10) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : if null == r3
org.apache.zeppelin.search.LuceneSearch.newDocument : if null == r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r12 = new org.apache.lucene.document.TextField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r12 = new org.apache.lucene.document.TextField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r13 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r13 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r12.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", r2, $r13)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r12.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", r2, $r13) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r12)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r12) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : return $r7
org.apache.zeppelin.search.LuceneSearch.newDocument : return $r7 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : $r8 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer>
org.apache.zeppelin.search.LuceneSearch.updateDoc : $r8 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : $r7 = new org.apache.lucene.index.Term
org.apache.zeppelin.search.LuceneSearch.updateDoc : $r7 = new org.apache.lucene.index.Term >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : specialinvoke $r7.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>("id", r4)
org.apache.zeppelin.search.LuceneSearch.updateDoc : specialinvoke $r7.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>("id", r4) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : virtualinvoke $r8.<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,java.lang.Iterable)>($r7, r5)
org.apache.zeppelin.search.LuceneSearch.updateDoc : virtualinvoke $r8.<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,java.lang.Iterable)>($r7, r5) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : $r9 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer>
org.apache.zeppelin.search.LuceneSearch.updateDoc : $r9 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : virtualinvoke $r9.<org.apache.lucene.index.IndexWriter: void commit()>()
org.apache.zeppelin.search.LuceneSearch.updateDoc : virtualinvoke $r9.<org.apache.lucene.index.IndexWriter: void commit()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateDoc : goto [?= return]
org.apache.zeppelin.search.LuceneSearch.updateDoc : goto [?= return] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>()
org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5)
org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : return $r4
org.apache.zeppelin.notebook.Note.getParagraphs : return $r4 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : if $z0 == 0
org.apache.zeppelin.search.LuceneSearch.updateIndexDoc : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : entermonitor $r6
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : entermonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : if $z0 == 0
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r8 = new java.util.HashMap
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : $r8 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : specialinvoke $r8.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : specialinvoke $r8.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : exitmonitor $r6
org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : exitmonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.generateSingleParagraphInfo : return $r8
