org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r3 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r3 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close is called when RemoterInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close is called when RemoterInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r6)
