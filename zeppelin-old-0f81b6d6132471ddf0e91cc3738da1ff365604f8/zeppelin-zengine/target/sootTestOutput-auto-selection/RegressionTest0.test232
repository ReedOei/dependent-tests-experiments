org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1
org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2
org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r2
org.apache.zeppelin.notebook.Note.getConfig : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.notebook.Note.getUserNote : $r5 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : specialinvoke $r5.<org.apache.zeppelin.notebook.Note: void <init>()>()
org.apache.zeppelin.notebook.Note.getUserNote : specialinvoke $r5.<org.apache.zeppelin.notebook.Note: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r6
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r7
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r7 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map config> = $r8
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map config> = $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getAngularObjects()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getAngularObjects()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getAngularObjects : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.getAngularObjects : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.getAngularObjects : return $r1
org.apache.zeppelin.notebook.Note.getAngularObjects : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r9
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r9 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getUserNote : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.getUserNote : r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.getUserNote : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : if $z0 == 0
org.apache.zeppelin.notebook.Note.getUserNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : return $r5
org.apache.zeppelin.notebook.Note.getUserNote : return $r5 >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.getNotebook : $r1 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: org.apache.zeppelin.notebook.Notebook notebook>
org.apache.zeppelin.helium.HeliumApplicationFactory.getNotebook : $r1 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: org.apache.zeppelin.notebook.Notebook notebook> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.getNotebook : return $r1
org.apache.zeppelin.helium.HeliumApplicationFactory.getNotebook : return $r1 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r3 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r3 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $r3 == null
org.apache.zeppelin.helium.Helium.loadConf : if $r3 == null >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z0 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.helium.Helium.loadConf : $z0 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z0 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z0 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r16 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.zeppelin.helium.Helium.loadConf : r16 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i0 = lengthof r16
org.apache.zeppelin.helium.Helium.loadConf : i0 = lengthof r16 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i1 = 0
org.apache.zeppelin.helium.Helium.loadConf : i1 = 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if i1 >= i0
org.apache.zeppelin.helium.Helium.loadConf : if i1 >= i0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r2 = r16[i1]
org.apache.zeppelin.helium.Helium.loadConf : r2 = r16[i1] >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("http://")
org.apache.zeppelin.helium.Helium.loadConf : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("http://") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z1 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z1 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("https://")
org.apache.zeppelin.helium.Helium.loadConf : $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("https://") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z3 == 0
org.apache.zeppelin.helium.Helium.loadConf : if $z3 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r13 = r0.<org.apache.zeppelin.helium.Helium: org.slf4j.Logger logger>
org.apache.zeppelin.helium.Helium.loadConf : $r13 = r0.<org.apache.zeppelin.helium.Helium: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Add helium local registry {}", r2)
org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Add helium local registry {}", r2) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r15 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.loadConf : $r15 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r14 = new org.apache.zeppelin.helium.HeliumLocalRegistry
org.apache.zeppelin.helium.Helium.loadConf : $r14 = new org.apache.zeppelin.helium.HeliumLocalRegistry >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r14.<org.apache.zeppelin.helium.HeliumLocalRegistry: void <init>(java.lang.String,java.lang.String)>(r2, r2)
org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r14.<org.apache.zeppelin.helium.HeliumLocalRegistry: void <init>(java.lang.String,java.lang.String)>(r2, r2) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r14)
org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r14) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i1 = i1 + 1
org.apache.zeppelin.helium.Helium.loadConf : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : goto [?= (branch)]
org.apache.zeppelin.helium.Helium.loadConf : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r18 = new java.io.File
org.apache.zeppelin.helium.Helium.loadConf : $r18 = new java.io.File >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z5 = virtualinvoke $r18.<java.io.File: boolean isFile()>()
org.apache.zeppelin.helium.Helium.loadConf : $z5 = virtualinvoke $r18.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z5 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z5 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r20 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r18)
org.apache.zeppelin.helium.Helium.loadConf : r20 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r18) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r4 = staticinvoke <org.apache.zeppelin.helium.HeliumConf: org.apache.zeppelin.helium.HeliumConf fromJson(java.lang.String)>(r20)
org.apache.zeppelin.helium.Helium.loadConf : $r4 = staticinvoke <org.apache.zeppelin.helium.HeliumConf: org.apache.zeppelin.helium.HeliumConf fromJson(java.lang.String)>(r20) >>>>>>>> org.apache.zeppelin.helium.HeliumConf.fromJson : $r1 = <org.apache.zeppelin.helium.HeliumConf: com.google.gson.Gson gson>
org.apache.zeppelin.helium.HeliumConf.fromJson : $r1 = <org.apache.zeppelin.helium.HeliumConf: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.helium.HeliumConf.fromJson : $r2 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r0, class "Lorg/apache/zeppelin/helium/HeliumConf;")
org.apache.zeppelin.helium.HeliumConf.fromJson : $r2 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r0, class "Lorg/apache/zeppelin/helium/HeliumConf;") >>>>>>>> org.apache.zeppelin.helium.HeliumConf.fromJson : $r3 = (org.apache.zeppelin.helium.HeliumConf) $r2
org.apache.zeppelin.helium.HeliumConf.fromJson : $r3 = (org.apache.zeppelin.helium.HeliumConf) $r2 >>>>>>>> org.apache.zeppelin.helium.HeliumConf.fromJson : return $r3
org.apache.zeppelin.helium.HeliumConf.fromJson : return $r3 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : return $r4
org.apache.zeppelin.helium.Helium.loadConf : return $r4 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r1 = virtualinvoke r0.<org.apache.zeppelin.helium.Helium: java.util.Map getAllPackageInfo(boolean,java.lang.String)>(1, null)
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r1 = virtualinvoke r0.<org.apache.zeppelin.helium.Helium: java.util.Map getAllPackageInfo(boolean,java.lang.String)>(1, null) >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r5 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r5 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r2 = virtualinvoke $r5.<org.apache.zeppelin.helium.HeliumConf: java.util.Map getEnabledPackages()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r2 = virtualinvoke $r5.<org.apache.zeppelin.helium.HeliumConf: java.util.Map getEnabledPackages()>() >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : $r1 = new java.util.HashMap
org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : $r1 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : $r2 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.Map enabled>
org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : $r2 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.Map enabled> >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2)
org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2) >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : return $r1
org.apache.zeppelin.helium.HeliumConf.getEnabledPackages : return $r1 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r6 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r6 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : entermonitor $r6
org.apache.zeppelin.helium.Helium.getAllPackageInfo : entermonitor $r6 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : if z0 != 0
org.apache.zeppelin.helium.Helium.getAllPackageInfo : if z0 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r49 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r49 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z10 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z10 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z10 == 0
org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z10 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r15 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r15 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r50 = (org.apache.zeppelin.helium.HeliumRegistry) $r15
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r50 = (org.apache.zeppelin.helium.HeliumRegistry) $r15 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r16 = virtualinvoke r50.<org.apache.zeppelin.helium.HeliumRegistry: java.util.List getAll()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r16 = virtualinvoke r50.<org.apache.zeppelin.helium.HeliumRegistry: java.util.List getAll()>() >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r7 = new java.util.LinkedList
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r7 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : specialinvoke $r7.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : specialinvoke $r7.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r8 = new java.io.File
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r8 = new java.io.File >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r9 = virtualinvoke r0.<org.apache.zeppelin.helium.HeliumLocalRegistry: java.lang.String uri()>()
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : $r9 = virtualinvoke r0.<org.apache.zeppelin.helium.HeliumLocalRegistry: java.lang.String uri()>() >>>>>>>> org.apache.zeppelin.helium.HeliumRegistry.uri : $r1 = r0.<org.apache.zeppelin.helium.HeliumRegistry: java.lang.String uri>
org.apache.zeppelin.helium.HeliumRegistry.uri : $r1 = r0.<org.apache.zeppelin.helium.HeliumRegistry: java.lang.String uri> >>>>>>>> org.apache.zeppelin.helium.HeliumRegistry.uri : return $r1
org.apache.zeppelin.helium.HeliumRegistry.uri : return $r1 >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9)
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : r3 = virtualinvoke $r8.<java.io.File: java.io.File[] listFiles()>()
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : r3 = virtualinvoke $r8.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : if r3 != null
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : if r3 != null >>>>>>>> org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : return $r7
org.apache.zeppelin.helium.HeliumLocalRegistry.getAll : return $r7 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r51 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r51 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z11 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z11 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z11 == 0
org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z11 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= (branch)]
org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= $z10 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= $z10 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>]
org.apache.zeppelin.helium.Helium.getAllPackageInfo : goto [?= $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>] >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r8 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : r61 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : r61 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z15 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $z15 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z15 == 0
org.apache.zeppelin.helium.Helium.getAllPackageInfo : if $z15 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r10 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages>
org.apache.zeppelin.helium.Helium.getAllPackageInfo : $r10 = r0.<org.apache.zeppelin.helium.Helium: java.util.Map allPackages> >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : exitmonitor $r6
org.apache.zeppelin.helium.Helium.getAllPackageInfo : exitmonitor $r6 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : return $r10
org.apache.zeppelin.helium.Helium.getAllPackageInfo : return $r10 >>>>>>>> org.apache.zeppelin.helium.Helium.getAllPackageInfo : return $r1
org.apache.zeppelin.helium.Helium.getAllPackageInfo : return $r1 >>>>>>>> org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : $r1 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf>
org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : $r1 = r0.<org.apache.zeppelin.helium.Helium: org.apache.zeppelin.helium.HeliumConf heliumConf> >>>>>>>> org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : $r2 = virtualinvoke $r1.<org.apache.zeppelin.helium.HeliumConf: java.util.List getBundleDisplayOrder()>()
org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : $r2 = virtualinvoke $r1.<org.apache.zeppelin.helium.HeliumConf: java.util.List getBundleDisplayOrder()>() >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : $r1 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.List bundleDisplayOrder>
org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : $r1 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.List bundleDisplayOrder> >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : if $r1 != null
org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : if $r1 != null >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : $r2 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.List bundleDisplayOrder>
org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : $r2 = r0.<org.apache.zeppelin.helium.HeliumConf: java.util.List bundleDisplayOrder> >>>>>>>> org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : return $r2
org.apache.zeppelin.helium.HeliumConf.getBundleDisplayOrder : return $r2 >>>>>>>> org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : return $r2
org.apache.zeppelin.helium.Helium.getVisualizationPackageOrder : return $r2 >>>>>>>> org.apache.zeppelin.helium.Helium.addRegistry : $r4 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.addRegistry : $r4 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.addRegistry : entermonitor $r4
org.apache.zeppelin.helium.Helium.addRegistry : entermonitor $r4 >>>>>>>> org.apache.zeppelin.helium.Helium.addRegistry : $r5 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.addRegistry : $r5 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.addRegistry : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.zeppelin.helium.Helium.addRegistry : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.helium.Helium.addRegistry : exitmonitor $r4
org.apache.zeppelin.helium.Helium.addRegistry : exitmonitor $r4 >>>>>>>> org.apache.zeppelin.helium.Helium.addRegistry : goto [?= return]
org.apache.zeppelin.helium.Helium.addRegistry : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Note.isLastParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.isLastParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.isLastParagraph : $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isLastParagraph : $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isLastParagraph : if $z0 != 0
org.apache.zeppelin.notebook.Note.isLastParagraph : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.isLastParagraph : return 1
org.apache.zeppelin.notebook.Note.isLastParagraph : return 1 >>>>>>>> org.apache.zeppelin.notebook.Note.onOutputAppend : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.onOutputAppend : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.onOutputAppend : if $r4 == null
org.apache.zeppelin.notebook.Note.onOutputAppend : if $r4 == null >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r7 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r7 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : specialinvoke $r7.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : specialinvoke $r7.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : entermonitor $r8
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : entermonitor $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : if $z0 == 0
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : exitmonitor $r8
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : exitmonitor $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : goto [?= return $r7]
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : goto [?= return $r7] >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : return $r7
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : return $r7 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.security.SecureRandom
org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $i1 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $i1 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : return $r6
org.apache.zeppelin.notebook.Paragraph.generateId : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r9 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r9 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.getText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getText : return $r1
org.apache.zeppelin.notebook.Paragraph.getText : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setNote : r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> = r1
org.apache.zeppelin.notebook.Paragraph.setNote : r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap>
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : if $z0 != 0
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Paragraph cloneParagraphForUser(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Paragraph cloneParagraphForUser(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r3 = new org.apache.zeppelin.notebook.Paragraph
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r3 = new org.apache.zeppelin.notebook.Paragraph >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : specialinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : specialinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> = $r4
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> = $r4 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> = $r5
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> = $r5 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r7 = $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r7 = $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r8 = virtualinvoke $r6.<org.apache.zeppelin.display.GUI: java.util.Map getParams()>()
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r8 = virtualinvoke $r6.<org.apache.zeppelin.display.GUI: java.util.Map getParams()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r9 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap(java.util.Map)>($r8)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r9 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap(java.util.Map)>($r8) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r7.<org.apache.zeppelin.display.GUI: void setParams(java.util.Map)>($r9)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r7.<org.apache.zeppelin.display.GUI: void setParams(java.util.Map)>($r9) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r11 = $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r11 = $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r10 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r10 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r12 = virtualinvoke $r10.<org.apache.zeppelin.display.GUI: java.util.LinkedHashMap getForms()>()
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r12 = virtualinvoke $r10.<org.apache.zeppelin.display.GUI: java.util.LinkedHashMap getForms()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r13 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap(java.util.Map)>($r12)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r13 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap(java.util.Map)>($r12) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r11.<org.apache.zeppelin.display.GUI: void setForms(java.util.LinkedHashMap)>($r13)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r11.<org.apache.zeppelin.display.GUI: void setForms(java.util.LinkedHashMap)>($r13) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r14 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config>
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r14 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r15 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap(java.util.Map)>($r14)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r15 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap(java.util.Map)>($r14) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setConfig(java.util.Map)>($r15)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setConfig(java.util.Map)>($r15) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setConfig : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config> = r1
org.apache.zeppelin.notebook.Paragraph.setConfig : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r16 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo getAuthenticationInfo()>()
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r16 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo getAuthenticationInfo()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAuthenticationInfo : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo>
org.apache.zeppelin.notebook.Paragraph.getAuthenticationInfo : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAuthenticationInfo : return $r1
org.apache.zeppelin.notebook.Paragraph.getAuthenticationInfo : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : if $r16 == null
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : if $r16 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r17 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getTitle()>()
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r17 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getTitle()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getTitle : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title>
org.apache.zeppelin.notebook.Paragraph.getTitle : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getTitle : return $r1
org.apache.zeppelin.notebook.Paragraph.getTitle : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setTitle(java.lang.String)>($r17)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setTitle(java.lang.String)>($r17) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setTitle : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title> = r1
org.apache.zeppelin.notebook.Paragraph.setTitle : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r18 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r18 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setText(java.lang.String)>($r18)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setText(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> = r1
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r4 = new java.util.Date
org.apache.zeppelin.notebook.Paragraph.setText : $r4 = new java.util.Date >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : specialinvoke $r4.<java.util.Date: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.setText : specialinvoke $r4.<java.util.Date: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Date dateUpdated> = $r4
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Date dateUpdated> = $r4 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.setText : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : if $r5 == null
org.apache.zeppelin.notebook.Paragraph.setText : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r19 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.Object getReturn()>()
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r19 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.Object getReturn()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getReturn : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.Object results>
org.apache.zeppelin.notebook.Paragraph.getReturn : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.Object results> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getReturn : return $r1
org.apache.zeppelin.notebook.Paragraph.getReturn : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setResult(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setResult(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setResult : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.Object results> = r1
org.apache.zeppelin.notebook.Paragraph.setResult : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.Object results> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r20 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status READY>
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r20 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status READY> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setStatus(org.apache.zeppelin.scheduler.Job$Status)>($r20)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setStatus(org.apache.zeppelin.scheduler.Job$Status)>($r20) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r21 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : $r21 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setId(java.lang.String)>($r21)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setId(java.lang.String)>($r21) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: void addUser(org.apache.zeppelin.notebook.Paragraph,java.lang.String)>($r3, r1)
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: void addUser(org.apache.zeppelin.notebook.Paragraph,java.lang.String)>($r3, r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.addUser : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap>
org.apache.zeppelin.notebook.Paragraph.addUser : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.addUser : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1)
org.apache.zeppelin.notebook.Paragraph.addUser : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : return $r3
org.apache.zeppelin.notebook.Paragraph.cloneParagraphForUser : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap>
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r5 = (org.apache.zeppelin.notebook.Paragraph) $r4
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r5 = (org.apache.zeppelin.notebook.Paragraph) $r4 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : return $r5
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : return $r5 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setStatusToUserParagraph : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Paragraph.setStatusToUserParagraph : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUser : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user>
org.apache.zeppelin.notebook.Paragraph.getUser : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUser : return $r1
org.apache.zeppelin.notebook.Paragraph.getUser : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setStatusToUserParagraph : if null == r2
org.apache.zeppelin.notebook.Paragraph.setStatusToUserParagraph : if null == r2 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobAbort : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.Interpreter interpreter>
org.apache.zeppelin.notebook.Paragraph.jobAbort : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.Interpreter interpreter> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobAbort : if $r4 != null
org.apache.zeppelin.notebook.Paragraph.jobAbort : if $r4 != null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobAbort : return 1
org.apache.zeppelin.notebook.Paragraph.jobAbort : return 1 >>>>>>>> org.apache.zeppelin.helium.Helium.suggestApp : $r10 = new org.apache.zeppelin.helium.HeliumPackageSuggestion
org.apache.zeppelin.helium.Helium.suggestApp : $r10 = new org.apache.zeppelin.helium.HeliumPackageSuggestion >>>>>>>> org.apache.zeppelin.helium.Helium.suggestApp : specialinvoke $r10.<org.apache.zeppelin.helium.HeliumPackageSuggestion: void <init>()>()
org.apache.zeppelin.helium.Helium.suggestApp : specialinvoke $r10.<org.apache.zeppelin.helium.HeliumPackageSuggestion: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.Helium.suggestApp : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.Interpreter getBindedInterpreter()>()
org.apache.zeppelin.helium.Helium.suggestApp : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.Interpreter getBindedInterpreter()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user>
org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r4 = virtualinvoke $r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r4 = virtualinvoke $r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String intpText>
org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String intpText> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter : $r6 = virtualinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5)
