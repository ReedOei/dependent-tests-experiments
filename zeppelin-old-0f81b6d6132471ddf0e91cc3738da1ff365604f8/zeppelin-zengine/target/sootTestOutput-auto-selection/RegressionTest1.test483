org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r9 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getStatus is called when RemoteInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getStatus is called when RemoteInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r12 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r12 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r15 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status UNKNOWN>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r15 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status UNKNOWN> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r16 = virtualinvoke $r15.<org.apache.zeppelin.scheduler.Job$Status: java.lang.String name()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : $r16 = virtualinvoke $r15.<org.apache.zeppelin.scheduler.Job$Status: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : return $r16
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getStatus : return $r16 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.isOpened : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.isOpened : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.isOpened : return $z0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.isOpened : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r11 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r11 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r10 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("completion is called when RemoterInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("completion is called when RemoterInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r13 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r13 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r15)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r16 = new java.util.ArrayList
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : $r16 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : specialinvoke $r16.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : specialinvoke $r16.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.completion : return $r16
