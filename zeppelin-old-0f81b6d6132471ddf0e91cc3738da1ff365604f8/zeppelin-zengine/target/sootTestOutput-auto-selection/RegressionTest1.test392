org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : i0 = 0 >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : if i0 >= 300
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : if i0 >= 300 >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : $r2 = r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1: org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient this$0>
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : $r2 = r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1: org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient this$0> >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : $r3 = staticinvoke <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session access$100(org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient)>($r2)
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : $r3 = staticinvoke <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session access$100(org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient)>($r2) >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$100 : $r1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session openWatcherSession()>()
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$100 : $r1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session openWatcherSession()>() >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r4 = new org.eclipse.jetty.websocket.client.ClientUpgradeRequest
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r4 = new org.eclipse.jetty.websocket.client.ClientUpgradeRequest >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : specialinvoke $r4.<org.eclipse.jetty.websocket.client.ClientUpgradeRequest: void <init>()>()
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : specialinvoke $r4.<org.eclipse.jetty.websocket.client.ClientUpgradeRequest: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r5 = staticinvoke <org.apache.zeppelin.util.WatcherSecurityKey: java.lang.String getKey()>()
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r5 = staticinvoke <org.apache.zeppelin.util.WatcherSecurityKey: java.lang.String getKey()>() >>>>>>>> org.apache.zeppelin.util.WatcherSecurityKey.getKey : $r0 = <org.apache.zeppelin.util.WatcherSecurityKey: java.lang.String KEY>
org.apache.zeppelin.util.WatcherSecurityKey.getKey : $r0 = <org.apache.zeppelin.util.WatcherSecurityKey: java.lang.String KEY> >>>>>>>> org.apache.zeppelin.util.WatcherSecurityKey.getKey : return $r0
org.apache.zeppelin.util.WatcherSecurityKey.getKey : return $r0 >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : virtualinvoke $r4.<org.eclipse.jetty.websocket.client.ClientUpgradeRequest: void setHeader(java.lang.String,java.lang.String)>("X-Watcher-Key", $r5)
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : virtualinvoke $r4.<org.eclipse.jetty.websocket.client.ClientUpgradeRequest: void setHeader(java.lang.String,java.lang.String)>("X-Watcher-Key", $r5) >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : virtualinvoke $r4.<org.eclipse.jetty.websocket.client.ClientUpgradeRequest: void setHeader(java.lang.String,java.lang.String)>("Origin", "*")
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : virtualinvoke $r4.<org.eclipse.jetty.websocket.client.ClientUpgradeRequest: void setHeader(java.lang.String,java.lang.String)>("Origin", "*") >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : r2 = staticinvoke <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket: org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket createInstace()>()
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : r2 = staticinvoke <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket: org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket createInstace()>() >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.createInstace : $r0 = new org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.createInstace : $r0 = new org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.createInstace : specialinvoke $r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket: void <init>()>()
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.createInstace : specialinvoke $r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.createInstace : return $r0
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.createInstace : return $r0 >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r7 = r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.client.WebSocketClient wsClient>
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r7 = r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.client.WebSocketClient wsClient> >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r6 = r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: java.net.URI zeppelinWebsocketUrl>
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r6 = r0.<org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: java.net.URI zeppelinWebsocketUrl> >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : r11 = virtualinvoke $r7.<org.eclipse.jetty.websocket.client.WebSocketClient: java.util.concurrent.Future connect(java.lang.Object,java.net.URI,org.eclipse.jetty.websocket.client.ClientUpgradeRequest)>(r2, $r6, $r4)
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : r11 = virtualinvoke $r7.<org.eclipse.jetty.websocket.client.WebSocketClient: java.util.concurrent.Future connect(java.lang.Object,java.net.URI,org.eclipse.jetty.websocket.client.ClientUpgradeRequest)>(r2, $r6, $r4) >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r8 = interfaceinvoke r11.<java.util.concurrent.Future: java.lang.Object get()>()
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r8 = interfaceinvoke r11.<java.util.concurrent.Future: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.onWebSocketError : $r2 = <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.onWebSocketError : $r2 = <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.onWebSocketError : interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("WatcherWebsocket socket connection error ", r1)
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.onWebSocketError : interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("WatcherWebsocket socket connection error ", r1) >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r10 = <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : $r10 = <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Couldn\'t establish websocket connection to Zeppelin ", $r9)
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Couldn\'t establish websocket connection to Zeppelin ", $r9) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getInterpreterContextRunnerPool : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.InterpreterContextRunnerPool interpreterContextRunnerPool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getInterpreterContextRunnerPool : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.InterpreterContextRunnerPool interpreterContextRunnerPool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getInterpreterContextRunnerPool : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getInterpreterContextRunnerPool : return $r1 >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : return null
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.openWatcherSession : return null >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$100 : return $r1
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$100 : return $r1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : staticinvoke <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session access$002(org.eclipse.jetty.websocket.api.Session)>($r3)
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : staticinvoke <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session access$002(org.eclipse.jetty.websocket.api.Session)>($r3) >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$002 : <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session watcherSession> = r0
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$002 : <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session watcherSession> = r0 >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$002 : return r0
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$002 : return r0 >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : $r5 = staticinvoke <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session access$000()>()
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : $r5 = staticinvoke <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session access$000()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$000 : $r0 = <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session watcherSession>
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$000 : $r0 = <org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient: org.eclipse.jetty.websocket.api.Session watcherSession> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$000 : return $r0
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient.access$000 : return $r0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : if $r5 != null
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : if $r5 != null >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : staticinvoke <java.lang.Thread: void sleep(long)>(5000L)
org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient$1.run : staticinvoke <java.lang.Thread: void sleep(long)>(5000L) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1
org.apache.zeppelin.notebook.Note.setIndex : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> = r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2
org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r2
org.apache.zeppelin.notebook.Note.getConfig : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.notebook.Note.getUserNote : $r5 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : specialinvoke $r5.<org.apache.zeppelin.notebook.Note: void <init>()>()
org.apache.zeppelin.notebook.Note.getUserNote : specialinvoke $r5.<org.apache.zeppelin.notebook.Note: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r6
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r7
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r7 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map config> = $r8
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map config> = $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getAngularObjects()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getAngularObjects()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getAngularObjects : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.getAngularObjects : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.getAngularObjects : return $r1
org.apache.zeppelin.notebook.Note.getAngularObjects : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r9
org.apache.zeppelin.notebook.Note.getUserNote : $r5.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r9 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getUserNote : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.getUserNote : r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.getUserNote : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : if $z0 == 0
org.apache.zeppelin.notebook.Note.getUserNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : return $r5
org.apache.zeppelin.notebook.Note.getUserNote : return $r5 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.setRemoteInterpreterEventPoller : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller> = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.setRemoteInterpreterEventPoller : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterGroupName>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterGroupName> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener access$1202(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener access$1202(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$1202 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRemoteInterpreterProcessListener : return r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : r17 = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : r17 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : r17 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client getClient()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : r17 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client getClient()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : if $r1 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : if $r1 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r2 = new org.apache.commons.pool2.impl.GenericObjectPool
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r2 = new org.apache.commons.pool2.impl.GenericObjectPool >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r3 = new org.apache.zeppelin.interpreter.remote.ClientFactory
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r3 = new org.apache.zeppelin.interpreter.remote.ClientFactory >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.lang.String getHost()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.lang.String getHost()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getHost : return "localhost"
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getHost : return "localhost" >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $i0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int getPort()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $i0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int getPort()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getPort : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int port>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getPort : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int port> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getPort : return $i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getPort : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : specialinvoke $r3.<org.apache.zeppelin.interpreter.remote.ClientFactory: void <init>(java.lang.String,int)>($r4, $i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : specialinvoke $r3.<org.apache.zeppelin.interpreter.remote.ClientFactory: void <init>(java.lang.String,int)>($r4, $i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : specialinvoke $r2.<org.apache.commons.pool2.impl.GenericObjectPool: void <init>(org.apache.commons.pool2.PooledObjectFactory)>($r3)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : specialinvoke $r2.<org.apache.commons.pool2.impl.GenericObjectPool: void <init>(org.apache.commons.pool2.PooledObjectFactory)>($r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> = $r2
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> = $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r7 = virtualinvoke $r6.<org.apache.commons.pool2.impl.GenericObjectPool: java.lang.Object borrowObject()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient : $r7 = virtualinvoke $r6.<org.apache.commons.pool2.impl.GenericObjectPool: java.lang.Object borrowObject()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client create()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client create()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r5 = new org.apache.thrift.transport.TSocket
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r5 = new org.apache.thrift.transport.TSocket >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r6 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.lang.String host>
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r6 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.lang.String host> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $i0 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: int port>
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $i0 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: int port> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r5.<org.apache.thrift.transport.TSocket: void <init>(java.lang.String,int)>($r6, $i0)
org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r5.<org.apache.thrift.transport.TSocket: void <init>(java.lang.String,int)>($r6, $i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : virtualinvoke $r5.<org.apache.thrift.transport.TSocket: void open()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.create : virtualinvoke $r5.<org.apache.thrift.transport.TSocket: void open()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r13 = new org.apache.zeppelin.interpreter.InterpreterException
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r13 = new org.apache.zeppelin.interpreter.InterpreterException >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>($r12)
org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : throw $r13
org.apache.zeppelin.interpreter.remote.ClientFactory.create : throw $r13 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r13 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r13 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Can\'t update angular object", $r12)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Can\'t update angular object", $r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : z0 = 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : z0 = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r6 = new com.google.gson.Gson
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r6 = new com.google.gson.Gson >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : specialinvoke $r6.<com.google.gson.Gson: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : specialinvoke $r6.<com.google.gson.Gson: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r7 = virtualinvoke $r6.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r4)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r7 = virtualinvoke $r6.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : virtualinvoke r17.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client: void angularObjectUpdate(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, $r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : virtualinvoke r17.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client: void angularObjectUpdate(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, $r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r9 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : $r9 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Remote interpreter process not started", $r8)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Remote interpreter process not started", $r8) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : if r17 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.updateRemoteAngularObject : if r17 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterDir : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterDir>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterDir : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterDir> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterDir : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterDir : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterProcess : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterProcess : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : $r1 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : $r1 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Interpreter process exited {}", $r2)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Interpreter process exited {}", $r2) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessComplete : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : $r2 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : $r2 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>("Interpreter process failed {}", r1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>("Interpreter process failed {}", r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : return $z0
