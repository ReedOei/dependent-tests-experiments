org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : $r2 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : return r3
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : if r3 != null goto return r3
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterGroupName>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r7 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r7 = new java.util.Properties
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r21 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r30 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r4 = $r13[i1]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r43 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_YARN_CLUSTER", "true")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r29 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r20 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r52 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r15 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r48 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r45 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForPySpark(java.util.Properties)>($r7)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z5 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r7.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r6 = new java.util.HashMap
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r57 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r38 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r46 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForSparkR(java.util.Properties)>($r7)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r5 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r8 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r5 == null goto i1 = i1 + 1
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForPySpark : $z0 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForPySpark : virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.yarn.isPython", "true")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("master")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : return r2
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null goto return r2
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("client")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r4 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r3 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-client")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("local")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if r2 != null goto $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("client")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : $r1 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r10 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>("SPARK_HOME")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r3 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if r2 != null goto $r3 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r11 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterDir : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterDir>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1)
