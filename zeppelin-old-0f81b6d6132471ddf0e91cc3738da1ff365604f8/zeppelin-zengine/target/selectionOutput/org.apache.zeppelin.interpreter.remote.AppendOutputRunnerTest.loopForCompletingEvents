org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations> = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : specialinvoke r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: void prepareInvocationCounts(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : specialinvoke r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: void prepareInvocationCounts(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r5 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunner
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r5 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunner >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i1 = lengthof r2
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i1 = lengthof r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i6 = 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i6 = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if i6 >= i1
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if i6 >= i1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : r4 = r2[i6]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if i6 >= i1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r7 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: java.util.concurrent.ScheduledExecutorService service>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r7 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: java.util.concurrent.ScheduledExecutorService service> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r6 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long BUFFER_TIME_MS>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r6 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long BUFFER_TIME_MS> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $l2 = virtualinvoke $r6.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $l2 = virtualinvoke $r6.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r9 = interfaceinvoke $r7.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r5, 0L, $l2, $r8)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r9 = interfaceinvoke $r7.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r5, 0L, $l2, $r8) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: java.util.concurrent.ScheduledFuture future> = $r9
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: java.util.concurrent.ScheduledFuture future> = $r9 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : l7 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : l7 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $i8 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $i8 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if $i8 == i0
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if $i8 == i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if $i8 == i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : return
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $l4 = $l3 - l7
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $l4 = $l3 - l7 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $b5 = $l4 cmp 2000L
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $b5 = $l4 cmp 2000L >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if $b5 <= 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if $b5 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Buffered events were not sent for 2 seconds")
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if $b5 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $i8 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Buffered events were not sent for 2 seconds") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : goto [?= $i8 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations>]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : goto [?= $i8 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations>] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $i8 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : r4 = r2[i6] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r12 = r4[0]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r12 = r4[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r11 = r4[1]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r11 = r4[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r10 = r4[2]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r10 = r4[2] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : virtualinvoke $r5.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void appendBuffer(java.lang.String,java.lang.String,int,java.lang.String)>($r12, $r11, 0, $r10)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : virtualinvoke $r5.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void appendBuffer(java.lang.String,java.lang.String,int,java.lang.String)>($r12, $r11, 0, $r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i6 = i6 + 1
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i6 = i6 + 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : goto [?= (branch)]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if i6 >= i1
