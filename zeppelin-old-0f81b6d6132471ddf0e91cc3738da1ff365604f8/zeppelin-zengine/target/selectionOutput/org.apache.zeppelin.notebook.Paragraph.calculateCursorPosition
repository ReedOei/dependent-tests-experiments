org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if i0 <= 0
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if i0 <= 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : i8 = i8 - i0
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if i0 <= 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r5 = null
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r5 = null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if r2 == null
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if r2 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $r4 = <org.apache.zeppelin.notebook.Paragraph: java.util.regex.Pattern REPL_PATTERN>
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if r2 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if r5 == null
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if r5 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i1 = virtualinvoke r5.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if r5 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : return i8
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i1 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if i8 <= $i1
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if i8 <= $i1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i2 = virtualinvoke r5.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if i8 <= $i1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : return i8
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i2 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i3 = $i2 + 1
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i3 = $i2 + 1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i4 = virtualinvoke r5.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i4 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i5 = $i4 + 1
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i5 = $i4 + 1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $r3 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $r3 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i6 = virtualinvoke r7.<java.lang.String: int indexOf(java.lang.String)>($r3)
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i6 = virtualinvoke r7.<java.lang.String: int indexOf(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i7 = $i5 + $i6
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $i7 = $i5 + $i6 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : i8 = i8 - $i7
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : i8 = i8 - $i7 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : return i8
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $r4 = <org.apache.zeppelin.notebook.Paragraph: java.util.regex.Pattern REPL_PATTERN> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r6 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2)
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r6 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $z0 = virtualinvoke r6.<java.util.regex.Matcher: boolean matches()>()
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : $z0 = virtualinvoke r6.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if $z0 == 0
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r5 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if r5 == null
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r5 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : if r5 == null
org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : i8 = i8 - i0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.calculateCursorPosition : r5 = null
