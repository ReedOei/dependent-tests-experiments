org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r7 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r6 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r6 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r8 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettingIds()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r8 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettingIds()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreterBinding(java.lang.String,java.lang.String,java.util.List)>("user1", "note1", $r8)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreterBinding(java.lang.String,java.lang.String,java.util.List)>("user1", "note1", $r8) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r9 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r9 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r1 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>("user1", "note1", "spark.spark")
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r1 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>("user1", "note1", "spark.spark") >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r10 = new org.apache.zeppelin.interpreter.InterpreterContext$Builder
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r10 = new org.apache.zeppelin.interpreter.InterpreterContext$Builder >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : specialinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterContext$Builder: void <init>()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : specialinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterContext$Builder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r11 = virtualinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterContext$Builder: org.apache.zeppelin.interpreter.InterpreterContext$Builder setNoteId(java.lang.String)>("note1")
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r11 = virtualinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterContext$Builder: org.apache.zeppelin.interpreter.InterpreterContext$Builder setNoteId(java.lang.String)>("note1") >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterContext$Builder: org.apache.zeppelin.interpreter.InterpreterContext$Builder setParagraphId(java.lang.String)>("paragraph_1")
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterContext$Builder: org.apache.zeppelin.interpreter.InterpreterContext$Builder setParagraphId(java.lang.String)>("paragraph_1") >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r2 = virtualinvoke $r12.<org.apache.zeppelin.interpreter.InterpreterContext$Builder: org.apache.zeppelin.interpreter.InterpreterContext getContext()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r2 = virtualinvoke $r12.<org.apache.zeppelin.interpreter.InterpreterContext$Builder: org.apache.zeppelin.interpreter.InterpreterContext getContext()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r39 = virtualinvoke r1.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("sc.version", r2)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r39 = virtualinvoke r1.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("sc.version", r2) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r14 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r14 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r13 = r39.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r13 = r39.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r13)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r13) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r40 = virtualinvoke r1.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("sc.range(1,10).sum()", r2)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r40 = virtualinvoke r1.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("sc.range(1,10).sum()", r2) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r16 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r16 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r15 = r40.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r15 = r40.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r15)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r15) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r17 = r40.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List msg>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r17 = r40.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List msg> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r19 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r18
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r19 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r18 >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r20 = virtualinvoke $r19.<org.apache.zeppelin.interpreter.InterpreterResultMessage: java.lang.String getData()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r20 = virtualinvoke $r19.<org.apache.zeppelin.interpreter.InterpreterResultMessage: java.lang.String getData()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $z0 = virtualinvoke $r20.<java.lang.String: boolean contains(java.lang.CharSequence)>("45")
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $z0 = virtualinvoke $r20.<java.lang.String: boolean contains(java.lang.CharSequence)>("45") >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r21 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r21 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r3 = virtualinvoke $r21.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>("user1", "note1", "spark.pyspark")
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r3 = virtualinvoke $r21.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>("user1", "note1", "spark.pyspark") >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r41 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("sqlContext.createDataFrame([(1,\'a\'),(2,\'b\')], [\'id\',\'name\']).registerTempTable(\'test\')", r2)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r41 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("sqlContext.createDataFrame([(1,\'a\'),(2,\'b\')], [\'id\',\'name\']).registerTempTable(\'test\')", r2) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r23 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r23 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r22 = r41.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r22 = r41.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r22)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r22) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r24 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r24 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r4 = virtualinvoke $r24.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>("user1", "note1", "spark.ipyspark")
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r4 = virtualinvoke $r24.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>("user1", "note1", "spark.ipyspark") >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r42 = virtualinvoke r4.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("sqlContext.table(\'test\').show()", r2)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r42 = virtualinvoke r4.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("sqlContext.table(\'test\').show()", r2) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r26 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r26 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r25 = r42.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r25 = r42.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r25)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r25) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r27 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r27 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r5 = virtualinvoke $r27.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>("user1", "note1", "spark.sql")
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r5 = virtualinvoke $r27.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>("user1", "note1", "spark.sql") >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r43 = virtualinvoke r5.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("select count(1) from test", r2)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : r43 = virtualinvoke r5.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>("select count(1) from test", r2) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r29 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r29 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r28 = r43.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r28 = r43.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r28)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r28) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r30 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TABLE>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r30 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TABLE> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r31 = virtualinvoke r43.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r31 = virtualinvoke r43.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r32 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r32 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r33 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r32
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r33 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r32 >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r34 = virtualinvoke $r33.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r34 = virtualinvoke $r33.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r34)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r34) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r35 = virtualinvoke r43.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r35 = virtualinvoke r43.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r36 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r36 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r37 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r36
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r37 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r36 >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r38 = virtualinvoke $r37.<org.apache.zeppelin.interpreter.InterpreterResultMessage: java.lang.String getData()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : $r38 = virtualinvoke $r37.<org.apache.zeppelin.interpreter.InterpreterResultMessage: java.lang.String getData()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("count(1)\n2\n", $r38)
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("count(1)\n2\n", $r38) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.testInterpreterBasics : return
