org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : $r5 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : $r4 = new org.apache.zeppelin.interpreter.remote.AppendOutputBuffer
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : $r4 = new org.apache.zeppelin.interpreter.remote.AppendOutputBuffer >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : specialinvoke $r4.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>(r1, r2, i0, r3)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : specialinvoke $r4.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>(r1, r2, i0, r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>($r4)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : return
