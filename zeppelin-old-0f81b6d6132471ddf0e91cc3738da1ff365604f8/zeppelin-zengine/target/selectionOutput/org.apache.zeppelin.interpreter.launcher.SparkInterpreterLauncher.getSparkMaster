org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("master") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("spark.master")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : return r2
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("spark.master") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : r2 = "local[*]"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : return r2
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : r2 = "local[*]" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : return r2
