org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r3 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : r1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r3)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : r1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r3) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-client")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-client") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : return "client"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : return "cluster"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("local")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("local") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z2 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : return "client"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r4 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r4 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : r2 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("spark.submit.deployMode")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : r2 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("spark.submit.deployMode") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if r2 != null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r10 = new java.lang.RuntimeException
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("client")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("client") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z3 != 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z3 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z3 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : return r2
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z4 != 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z4 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r5 = new java.lang.RuntimeException
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z4 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : return r2
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r5 = new java.lang.RuntimeException >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for spark.submit.deployMode: ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for spark.submit.deployMode: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : throw $r5
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r10 = new java.lang.RuntimeException >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("master is set as yarn, but spark.submit.deployMode is not specified")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("master is set as yarn, but spark.submit.deployMode is not specified") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : throw $r10
