org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r4 = r3[0]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r4 = r3[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r27 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r27 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $i0 = lengthof r3
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $i0 = lengthof r3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $i0 < 2
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $i0 < 2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r27 = r3[1]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $i0 < 2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r28 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r28 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $i1 = lengthof r3
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $i1 = lengthof r3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $i1 != 3
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $i1 != 3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r28 = r3[2]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $i1 != 3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r5 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r5 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("add")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("add") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z0 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r20 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $z1 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("update")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $z1 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("update") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z1 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r18 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("remove")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("remove") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z2 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r16 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r26 = <org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception in MockInterpreterAngular while interpret Thread.sleep", $r25)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception in MockInterpreterAngular while interpret Thread.sleep", $r25) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r7 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r7 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r8 = virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.List getAll(java.lang.String,java.lang.String)>($r7, null)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r8 = virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.List getAll(java.lang.String,java.lang.String)>($r7, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $i2 = interfaceinvoke $r8.<java.util.List: int size()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $i2 = interfaceinvoke $r8.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r11 = r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular: java.util.concurrent.atomic.AtomicInteger numWatch>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r11 = r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular: java.util.concurrent.atomic.AtomicInteger numWatch> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $i3 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $i3 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r30 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r30 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r14 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r14 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r15 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r15 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : specialinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r15, r30)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : specialinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r15, r30) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : return $r14
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : goto [?= $r6 = new java.lang.StringBuilder]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : goto [?= $r6 = new java.lang.StringBuilder] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r16 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String)>(r27, $r16, null)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String)>(r27, $r16, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String)>(r27, $r16, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r18 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r19 = virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject get(java.lang.String,java.lang.String,java.lang.String)>(r27, $r18, null)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r19 = virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject get(java.lang.String,java.lang.String,java.lang.String)>(r27, $r18, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke $r19.<org.apache.zeppelin.display.AngularObject: void set(java.lang.Object)>(r28)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke $r19.<org.apache.zeppelin.display.AngularObject: void set(java.lang.Object)>(r28) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r20 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject add(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)>(r27, r28, $r20, null)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject add(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)>(r27, r28, $r20, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r22 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r22 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r23 = virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject get(java.lang.String,java.lang.String,java.lang.String)>(r27, $r22, null)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r23 = virtualinvoke r5.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject get(java.lang.String,java.lang.String,java.lang.String)>(r27, $r22, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r24 = new org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular$1
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r24 = new org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular$1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : specialinvoke $r24.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular$1: void <init>(org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular,org.apache.zeppelin.interpreter.InterpreterContext)>(r0, null)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : specialinvoke $r24.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular$1: void <init>(org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular,org.apache.zeppelin.interpreter.InterpreterContext)>(r0, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke $r23.<org.apache.zeppelin.display.AngularObject: void addWatcher(org.apache.zeppelin.display.AngularObjectWatcher)>($r24)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : virtualinvoke $r23.<org.apache.zeppelin.display.AngularObject: void addWatcher(org.apache.zeppelin.display.AngularObjectWatcher)>($r24) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r28 = r3[2] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r5 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r27 = r3[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular.interpret : r28 = null
