org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>("SPARK_HOME") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if r2 != null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r13 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r3 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r3 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r4 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r6 = <java.io.File: java.lang.String separator>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r6 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r2, $r9)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r2, $r9) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r29 = $r3
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r29 = $r3 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r10 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r10 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r29, "sparkr.zip")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r29, "sparkr.zip") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z1 = virtualinvoke $r10.<java.io.File: boolean isFile()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r11 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r11 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>("sparkr.zip is not found, SparkR may not work.")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>("sparkr.zip is not found, SparkR may not work.") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : return
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z1 = virtualinvoke $r10.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r12 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r11 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r12 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void mergeSparkProperty(java.util.Properties,java.lang.String,java.lang.String)>(r1, "spark.yarn.dist.archives", $r12)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void mergeSparkProperty(java.util.Properties,java.lang.String,java.lang.String)>(r1, "spark.yarn.dist.archives", $r12) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : goto [?= return]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : return
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r13 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r14 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r13)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r14 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z2 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("local")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z2 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("local") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z2 != 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r27 = new java.lang.RuntimeException
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r16 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r16 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r15 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r15 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r28 = virtualinvoke $r16.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r15)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r28 = virtualinvoke $r16.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r17 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r17 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r18 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r18 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interpreter")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interpreter") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r20 = <java.io.File: java.lang.String separator>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r20 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spark")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spark") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r23 = <java.io.File: java.lang.String separator>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r23 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r17.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r28, $r26)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r17.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r28, $r26) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r29 = $r17
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r29 = $r17 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : goto [?= $r10 = new java.io.File]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : goto [?= $r10 = new java.io.File] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r10 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r27 = new java.lang.RuntimeException >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String)>("SPARK_HOME is not specified in interpreter-setting for non-local mode, if you specify it in zeppelin-env.sh, please move that into  interpreter setting")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String)>("SPARK_HOME is not specified in interpreter-setting for non-local mode, if you specify it in zeppelin-env.sh, please move that into  interpreter setting") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : throw $r27
