org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r1 = virtualinvoke $r6.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterJson()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r1 = virtualinvoke $r6.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterJson()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r2 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r2 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r8 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r8 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r9, $r8)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r9, $r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r11 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r11 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("InterpreterDir {} doesn\'t exist", $r10)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("InterpreterDir {} doesn\'t exist", $r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : return
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r12 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$1
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r12 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke $r12.<org.apache.zeppelin.interpreter.InterpreterSettingManager$1: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke $r12.<org.apache.zeppelin.interpreter.InterpreterSettingManager$1: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r14 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>($r13, $r12)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r14 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>($r13, $r12) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r3 = interfaceinvoke $r14.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r3 = interfaceinvoke $r14.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r4 = (java.nio.file.Path) $r15
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r4 = (java.nio.file.Path) $r15 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r5 = interfaceinvoke r4.<java.nio.file.Path: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r5 = interfaceinvoke r4.<java.nio.file.Path: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: boolean registerInterpreterFromPath(java.lang.String,java.lang.String)>(r5, r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: boolean registerInterpreterFromPath(java.lang.String,java.lang.String)>(r5, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z2 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: boolean registerInterpreterFromResource(java.lang.ClassLoader,java.lang.String,java.lang.String)>(r2, r5, r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: boolean registerInterpreterFromResource(java.lang.ClassLoader,java.lang.String,java.lang.String)>(r2, r5, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z3 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z3 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r17 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z3 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r17 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r16 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r16 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No interpreter-setting.json found in ")
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No interpreter-setting.json found in ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r19 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r19 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String)>($r21)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String)>($r21) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
