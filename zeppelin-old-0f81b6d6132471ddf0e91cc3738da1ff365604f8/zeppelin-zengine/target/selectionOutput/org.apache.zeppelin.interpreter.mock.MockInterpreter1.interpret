org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r4 = "getId" >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z0 == 0
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r22 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("sleep")
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("sleep") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z1 == 0
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r14 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ")
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r5 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r28 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r16 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r18 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r18 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r17 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl1: ")
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl1: ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r16.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r18, $r21)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r16.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r18, $r21) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : r29 = $r16
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : r29 = $r16 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : goto [?= $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()]
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : goto [?= $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $r30 == null
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $r30 == null >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r11 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $r30 == null >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : return r29
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r11 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r12 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r12 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r13 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getParagraphId()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r13 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getParagraphId()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : interfaceinvoke $r11.<org.apache.zeppelin.resource.ResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($r12, $r13, "result", r29)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : interfaceinvoke $r11.<org.apache.zeppelin.resource.ResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($r12, $r13, "result", r29) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : return r29
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r5 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r7 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r7 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl1: ")
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl1: ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r7, $r10)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r7, $r10) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : r29 = $r5
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : r29 = $r5 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r14 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r15 = $r14[1]
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r14 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r28 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r15 = $r14[1] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r15 = $r14[1] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r28 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $l1 = (long) $i0
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r28 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $l1 = (long) $i0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l1)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $l1 = (long) $i0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r28 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : goto [?= $r16 = new org.apache.zeppelin.interpreter.InterpreterResult]
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r28 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : goto [?= $r16 = new org.apache.zeppelin.interpreter.InterpreterResult] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r16 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r22 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r24 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r24 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r23 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r23 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r22.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r24, $r27)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r22.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r24, $r27) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : r29 = $r22
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : r29 = $r22 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : goto [?= $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()]
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : goto [?= $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
