org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if r1 != null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : return
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if r1 != null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : return
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r5
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r5 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsRunning()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsRunning()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r35 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r35 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r19 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsWaiting()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsWaiting()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r37 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r37 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r28 := @caughtexception
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r30 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r29 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r29 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r29.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r29.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fail to close interpreter ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fail to close interpreter ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r32 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r32 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r34, $r28)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r34, $r28) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r8.<org.apache.zeppelin.scheduler.SchedulerFactory: void removeScheduler(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r8.<org.apache.zeppelin.scheduler.SchedulerFactory: void removeScheduler(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= (branch)]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r28 := @caughtexception
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r38 = (org.apache.zeppelin.scheduler.Job) $r10
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r38 = (org.apache.zeppelin.scheduler.Job) $r10 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r38.<org.apache.zeppelin.scheduler.Job: void abort()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r38.<org.apache.zeppelin.scheduler.Job: void abort()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status ABORT>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status ABORT> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r38.<org.apache.zeppelin.scheduler.Job: void setStatus(org.apache.zeppelin.scheduler.Job$Status)>($r11)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r38.<org.apache.zeppelin.scheduler.Job: void setStatus(org.apache.zeppelin.scheduler.Job$Status)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r13 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r13 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r12 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r12 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r15 = virtualinvoke r38.<org.apache.zeppelin.scheduler.Job: java.lang.String getJobName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r15 = virtualinvoke r38.<org.apache.zeppelin.scheduler.Job: java.lang.String getJobName()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" aborted ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" aborted ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r18)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r19 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r36 = (org.apache.zeppelin.scheduler.Job) $r19
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r36 = (org.apache.zeppelin.scheduler.Job) $r19 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r36.<org.apache.zeppelin.scheduler.Job: void abort()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r36.<org.apache.zeppelin.scheduler.Job: void abort()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r20 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status ABORT>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r20 = <org.apache.zeppelin.scheduler.Job$Status: org.apache.zeppelin.scheduler.Job$Status ABORT> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r36.<org.apache.zeppelin.scheduler.Job: void setStatus(org.apache.zeppelin.scheduler.Job$Status)>($r20)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r36.<org.apache.zeppelin.scheduler.Job: void setStatus(org.apache.zeppelin.scheduler.Job$Status)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r22 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r22 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r21 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r21 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r24 = virtualinvoke r36.<org.apache.zeppelin.scheduler.Job: java.lang.String getJobName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r24 = virtualinvoke r36.<org.apache.zeppelin.scheduler.Job: java.lang.String getJobName()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" aborted ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" aborted ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>($r27)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>($r27) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()
