org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : i0 = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : if i0 >= 10000
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : if i0 >= 10000 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : $r3 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents: org.apache.zeppelin.interpreter.remote.AppendOutputRunner runner>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : if i0 >= 10000 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : return
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : $r3 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents: org.apache.zeppelin.interpreter.remote.AppendOutputRunner runner> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : virtualinvoke $r3.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void appendBuffer(java.lang.String,java.lang.String,int,java.lang.String)>("noteId", "paraId", 0, "data\n")
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : virtualinvoke $r3.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void appendBuffer(java.lang.String,java.lang.String,int,java.lang.String)>("noteId", "paraId", 0, "data\n") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : i0 = i0 + 1
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : i0 = i0 + 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : goto [?= (branch)]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$BombardEvents.run : if i0 >= 10000
