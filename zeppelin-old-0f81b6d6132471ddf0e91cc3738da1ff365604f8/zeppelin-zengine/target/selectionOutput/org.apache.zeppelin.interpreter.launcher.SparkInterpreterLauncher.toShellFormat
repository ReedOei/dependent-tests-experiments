org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\"")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : return $r6
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : return $r11
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\"") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z2 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r12 = new java.lang.RuntimeException
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r12 = new java.lang.RuntimeException >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Spark property value could not contain both \" and \'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Spark property value could not contain both \" and \'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : throw $r12
