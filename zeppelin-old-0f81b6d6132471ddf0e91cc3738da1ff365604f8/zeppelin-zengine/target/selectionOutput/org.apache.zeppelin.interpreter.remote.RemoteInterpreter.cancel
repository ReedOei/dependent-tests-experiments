org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r8 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : r15 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getOrCreateInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r13 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r14 = new org.apache.zeppelin.interpreter.InterpreterException >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : specialinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>($r13)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : specialinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : throw $r14
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : r15 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getOrCreateInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : goto [?= $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>]
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : r15 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getOrCreateInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r13 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : goto [?= $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.ManagedInterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.ManagedInterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : interfaceinvoke $r3.<org.apache.zeppelin.interpreter.LifecycleManager: void onInterpreterUse(org.apache.zeppelin.interpreter.ManagedInterpreterGroup,java.lang.String)>($r4, $r5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : interfaceinvoke $r3.<org.apache.zeppelin.interpreter.LifecycleManager: void onInterpreterUse(org.apache.zeppelin.interpreter.ManagedInterpreterGroup,java.lang.String)>($r4, $r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r6 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter$5
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r6 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter$5 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : specialinvoke $r6.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter$5: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreter,org.apache.zeppelin.interpreter.InterpreterContext)>(r0, r1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : specialinvoke $r6.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter$5: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreter,org.apache.zeppelin.interpreter.InterpreterContext)>(r0, r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : virtualinvoke r15.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.lang.Object callRemoteFunction(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess$RemoteFunction)>($r6)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : virtualinvoke r15.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.lang.Object callRemoteFunction(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess$RemoteFunction)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : return
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r8 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancel is called when RemoterInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancel is called when RemoterInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r10 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r10 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.cancel : return
