org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r4 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : specialinvoke $r4.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : specialinvoke $r4.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r5 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r5 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r6 = virtualinvoke $r5.<java.util.Properties: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r6 = virtualinvoke $r5.<java.util.Properties: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : return $r4
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r7 = (java.lang.String) r3
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r7 = (java.lang.String) r3 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z1 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z1 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r10 = (java.lang.String) r3
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r10 = (java.lang.String) r3 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r8 = (java.lang.String) r3
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r8 = (java.lang.String) r3 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r9.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r9.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
