org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.util.Properties getProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $z0 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("progress")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $z0 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("progress") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : if $z0 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String getProperty(java.lang.String)>("progress")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r8 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r9 = new org.apache.zeppelin.interpreter.InterpreterException >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : specialinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>($r8)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : specialinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : throw $r9
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l0)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r8 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String lastSt> = r1
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r8 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String lastSt> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : goto [?= $r5 = new org.apache.zeppelin.interpreter.InterpreterResult]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : goto [?= $r5 = new org.apache.zeppelin.interpreter.InterpreterResult] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r5 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r5 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r6 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r6 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r6, r1)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r6, r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : return $r5
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String getProperty(java.lang.String)>("progress") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: void setProgress(int)>($i1)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: void setProgress(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: void setProgress(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r8 := @caughtexception
