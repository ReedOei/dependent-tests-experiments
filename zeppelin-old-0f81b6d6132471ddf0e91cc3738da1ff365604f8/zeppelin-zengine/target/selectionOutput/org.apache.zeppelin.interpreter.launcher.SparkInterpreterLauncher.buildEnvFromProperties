org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r6 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r6.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r6.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r7 = new java.util.Properties
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r7 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r7.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r7.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r8 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r8 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r8)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r10 = virtualinvoke $r9.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r10 = virtualinvoke $r9.<java.util.Properties: java.util.Set stringPropertyNames()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r55 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r55 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r45 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForPySpark(java.util.Properties)>($r7)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForPySpark(java.util.Properties)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForSparkR(java.util.Properties)>($r7)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForSparkR(java.util.Properties)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r43 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r57 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r57 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r3 == null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r38 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z2 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r29 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r7.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r7.<java.util.Properties: java.util.Set stringPropertyNames()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r60 = interfaceinvoke $r59.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r60 = interfaceinvoke $r59.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z7 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z7 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r20 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z7 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_CONF", $r11)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_CONF", $r11) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13 = newarray (java.lang.String)[3]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13 = newarray (java.lang.String)[3] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[0] = "SPARK_HOME"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[0] = "SPARK_HOME" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[1] = "SPARK_CONF_DIR"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[1] = "SPARK_CONF_DIR" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[2] = "HADOOP_CONF_DIR"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[2] = "HADOOP_CONF_DIR" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i0 = lengthof $r13
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i0 = lengthof $r13 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r4 = $r13[i1]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r15 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r15 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r14 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r14 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buildEnvFromProperties: ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buildEnvFromProperties: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : return $r6
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r4 = $r13[i1] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r5 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r5 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r5 == null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r5 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r5 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = i1 + 1
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= (branch)]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = i1 + 1
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r20 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r61 = (java.lang.String) $r20
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r61 = (java.lang.String) $r20 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r21 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r21 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --conf ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --conf ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r25 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r61)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r25 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r61) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r29 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z3 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z3 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z3 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r30 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r7.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r30 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --files ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --files ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r32 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r32 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r33 = virtualinvoke $r32.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r33 = virtualinvoke $r32.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/log4j_yarn_cluster.properties")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/log4j_yarn_cluster.properties") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r7.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r38 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r38.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --master ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --master ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r43 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>("cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>("cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z4 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_YARN_CLUSTER", "true")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r57 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_YARN_CLUSTER", "true") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r57 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r45 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r56 = (java.lang.String) $r45
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r56 = (java.lang.String) $r45 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z5 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z5 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>(r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z5 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r52 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r46 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r46 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r47 = virtualinvoke $r46.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r47 = virtualinvoke $r46.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z6 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isSparkConf(java.lang.String,java.lang.String)>(r56, $r47)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z6 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isSparkConf(java.lang.String,java.lang.String)>(r56, $r47) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z6 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r48 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r48 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r49 = virtualinvoke $r48.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r49 = virtualinvoke $r48.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r50 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String toShellFormat(java.lang.String)>($r49)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r50 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String toShellFormat(java.lang.String)>($r49) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r56, $r50)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r56, $r50) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r52 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r53 = virtualinvoke $r52.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r53 = virtualinvoke $r52.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r56, $r53)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r56, $r53) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r46 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
