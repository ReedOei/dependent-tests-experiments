org.apache.zeppelin.interpreter.MiniZeppelin.start : $r1 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("..")
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("..") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> = $r1
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> = $r1 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r3 = virtualinvoke $r2.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r3 = virtualinvoke $r2.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r4 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r4 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r3, $r5)
org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r3, $r5) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r7 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r7 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r9 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r9 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("conf_")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("conf_") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r14)
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r14) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> = $r7
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> = $r7 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r15 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r15 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r17 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r17 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r16 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r16 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notebook_")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notebook_") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getSimpleName()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getSimpleName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, $r22)
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, $r22) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir> = $r15
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir> = $r15 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r23 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r23 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : virtualinvoke $r23.<java.io.File: boolean mkdirs()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : virtualinvoke $r23.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r24 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r24 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : virtualinvoke $r24.<java.io.File: boolean mkdirs()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : virtualinvoke $r24.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r26 = <org.apache.zeppelin.interpreter.MiniZeppelin: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r26 = <org.apache.zeppelin.interpreter.MiniZeppelin: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r25 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r25 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZEPPELIN_HOME: ")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZEPPELIN_HOME: ") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r28 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r28 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r29 = virtualinvoke $r28.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r29 = virtualinvoke $r28.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>($r31)
org.apache.zeppelin.interpreter.MiniZeppelin.start : interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>($r31) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r32 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r32 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r33 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r33 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r32.<java.io.File: void <init>(java.io.File,java.lang.String)>($r33, "conf/log4j.properties")
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r32.<java.io.File: void <init>(java.io.File,java.lang.String)>($r33, "conf/log4j.properties") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r34 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r34 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r35 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r35 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r34.<java.io.File: void <init>(java.io.File,java.lang.String)>($r35, "log4j.properties")
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r34.<java.io.File: void <init>(java.io.File,java.lang.String)>($r35, "log4j.properties") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r32, $r34)
org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r32, $r34) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r36 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r36 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r37 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r37 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r36.<java.io.File: void <init>(java.io.File,java.lang.String)>($r37, "conf/log4j_yarn_cluster.properties")
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r36.<java.io.File: void <init>(java.io.File,java.lang.String)>($r37, "conf/log4j_yarn_cluster.properties") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r38 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r38 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r39 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r39 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r38.<java.io.File: void <init>(java.io.File,java.lang.String)>($r39, "log4j_yarn_cluster.properties")
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r38.<java.io.File: void <init>(java.io.File,java.lang.String)>($r39, "log4j_yarn_cluster.properties") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r36, $r38)
org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r36, $r38) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r40 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CONF_DIR>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r40 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CONF_DIR> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r41 = virtualinvoke $r40.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r41 = virtualinvoke $r40.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r42 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r42 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r43 = virtualinvoke $r42.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r43 = virtualinvoke $r42.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r41, $r43)
org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r41, $r43) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r45 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r45 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r46 = virtualinvoke $r45.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r46 = virtualinvoke $r45.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r47 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r47 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r48 = virtualinvoke $r47.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r48 = virtualinvoke $r47.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r46, $r48)
org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r46, $r48) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r50 = new org.apache.zeppelin.conf.ZeppelinConfiguration
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r50 = new org.apache.zeppelin.conf.ZeppelinConfiguration >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r50.<org.apache.zeppelin.conf.ZeppelinConfiguration: void <init>()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r50.<org.apache.zeppelin.conf.ZeppelinConfiguration: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.conf.ZeppelinConfiguration conf> = $r50
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.conf.ZeppelinConfiguration conf> = $r50 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r51 = new org.apache.zeppelin.interpreter.InterpreterSettingManager
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r51 = new org.apache.zeppelin.interpreter.InterpreterSettingManager >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r52 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r52 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r53 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/display/AngularObjectRegistryListener;")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r53 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/display/AngularObjectRegistryListener;") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r54 = (org.apache.zeppelin.display.AngularObjectRegistryListener) $r53
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r54 = (org.apache.zeppelin.display.AngularObjectRegistryListener) $r53 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r55 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener;")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r55 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener;") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r56 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener) $r55
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r56 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener) $r55 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r57 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/helium/ApplicationEventListener;")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r57 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/helium/ApplicationEventListener;") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r58 = (org.apache.zeppelin.helium.ApplicationEventListener) $r57
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r58 = (org.apache.zeppelin.helium.ApplicationEventListener) $r57 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r51.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration,org.apache.zeppelin.display.AngularObjectRegistryListener,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener,org.apache.zeppelin.helium.ApplicationEventListener)>($r52, $r54, $r56, $r58)
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r51.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration,org.apache.zeppelin.display.AngularObjectRegistryListener,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener,org.apache.zeppelin.helium.ApplicationEventListener)>($r52, $r54, $r56, $r58) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> = $r51
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> = $r51 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r59 = new org.apache.zeppelin.interpreter.InterpreterFactory
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r59 = new org.apache.zeppelin.interpreter.InterpreterFactory >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r60 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r60 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r59.<org.apache.zeppelin.interpreter.InterpreterFactory: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r60)
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r59.<org.apache.zeppelin.interpreter.InterpreterFactory: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r60) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> = $r59
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> = $r59 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : return
