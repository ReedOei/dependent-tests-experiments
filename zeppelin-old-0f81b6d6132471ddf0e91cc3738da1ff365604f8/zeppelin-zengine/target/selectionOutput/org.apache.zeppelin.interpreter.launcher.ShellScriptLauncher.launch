org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r7 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Launching Interpreter: ")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Launching Interpreter: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> = $r12
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> = $r12 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : i0 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : i0 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r34 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r16 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r16 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r17 = virtualinvoke $r16.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r17 = virtualinvoke $r16.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String getPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r23 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r23 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterRemoteRunnerPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterRemoteRunnerPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r25 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getCallbackPortRange()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r25 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getCallbackPortRange()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r26 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r26 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r28 = virtualinvoke $r27.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterDir()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r28 = virtualinvoke $r27.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterDir()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,java.lang.String)>($r36, $r25, $r32, r5, $r33, i0, r4)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,java.lang.String)>($r36, $r25, $r32, r5, $r33, i0, r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return $r22
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : goto [?= $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>]
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : goto [?= $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>] >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r34 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r35 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String getHost()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r35 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String getHost()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $i1 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: int getPort()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $i1 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: int getPort()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r34.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess: void <init>(int,java.lang.String,int)>(i0, $r35, $i1)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r34.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess: void <init>(int,java.lang.String,int)>(i0, $r35, $i1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return $r34
