org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$102(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$102(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$202(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$202(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List access$302(org.apache.zeppelin.interpreter.InterpreterSetting,java.util.List)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List access$302(org.apache.zeppelin.interpreter.InterpreterSetting,java.util.List)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption access$502(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterOption)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption access$502(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterOption)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void postProcessing()>()
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void postProcessing()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r1 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r1 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = $r1
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : if $r2 != null
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : if $r2 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r3 = new org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r3 = new org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : specialinvoke $r3.<org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r4)
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : specialinvoke $r3.<org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> = $r3
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> = $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : return $r2
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : if $z0 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r3 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List createInterpreters(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r3 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List createInterpreters(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r7 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r7 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r6 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r8
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r6 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r9 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r9 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r10 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r10 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r4 = new java.util.Properties
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r4 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r4.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r4.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r2 = (java.util.Map) $r5
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r2 = (java.util.Map) $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r40 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r40 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z0 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z0 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z1 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.output.limit")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z1 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.output.limit") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z1 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r22 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r22 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_OUTPUT_LIMIT>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_OUTPUT_LIMIT> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i1 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r23)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i1 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r23) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.output.limit", $r27)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.output.limit", $r27) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z2 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.max.poolsize")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z2 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.max.poolsize") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z2 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r16 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r16 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i0 = virtualinvoke $r17.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r16)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i0 = virtualinvoke $r17.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r20)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r20) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r41 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r41 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.localRepo", $r13)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.localRepo", $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : return $r4
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r11 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r11 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String className>
org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : return $r1
org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r9.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.LifecycleManager)>($r10, r2, $r11, r1, $r12)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r9.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.LifecycleManager)>($r10, r2, $r11, r1, $r12) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z1 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean isDefaultInterpreter()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z1 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean isDefaultInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean defaultInterpreter>
org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean defaultInterpreter> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : return $z0
org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(0, $r9)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(0, $r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $r14 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $r14 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r14 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r14 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13 = newarray (java.lang.Object)[3]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r15 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r15 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[0] = $r15
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[0] = $r15 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[1] = r1
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[1] = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[2] = r2
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[2] = r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Interpreter {} created for user: {}, sessionId: {}", $r13)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Interpreter {} created for user: {}, sessionId: {}", $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r9)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : return $r7
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : return $r7 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : if $z1 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r5 = (org.apache.zeppelin.interpreter.Interpreter) $r15
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r5 = (org.apache.zeppelin.interpreter.Interpreter) $r15 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : virtualinvoke r5.<org.apache.zeppelin.interpreter.Interpreter: void setInterpreterGroup(org.apache.zeppelin.interpreter.InterpreterGroup)>(r0)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : virtualinvoke r5.<org.apache.zeppelin.interpreter.Interpreter: void setInterpreterGroup(org.apache.zeppelin.interpreter.InterpreterGroup)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r10 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r10 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8 = newarray (java.lang.Object)[3]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[0] = r2
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[0] = r2 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[1] = $r9
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[1] = $r9 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[2] = r1
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[2] = r1 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Create Session: {} in InterpreterGroup: {} for user: {}", $r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Create Session: {} in InterpreterGroup: {} for user: {}", $r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager getLifecycleManager()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager getLifecycleManager()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r12.<org.apache.zeppelin.interpreter.LifecycleManager: void onInterpreterSessionCreated(org.apache.zeppelin.interpreter.ManagedInterpreterGroup,java.lang.String)>(r0, r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r12.<org.apache.zeppelin.interpreter.LifecycleManager: void onInterpreterSessionCreated(org.apache.zeppelin.interpreter.ManagedInterpreterGroup,java.lang.String)>(r0, r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r13 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r13 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : return r3
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : return r3 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r18 = (java.util.List) $r17
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r18 = (java.util.List) $r17 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : return $r18
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : return $r18 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close Session: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close Session: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for interpreter setting: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for interpreter setting: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r13 = (java.util.Collection) $r12
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r13 = (java.util.Collection) $r12 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.util.Collection)>($r13)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.util.Collection)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if r1 != null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if r1 != null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r5
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r5 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r6)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r8 = new org.apache.zeppelin.scheduler.RemoteScheduler
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r8 = new org.apache.zeppelin.scheduler.RemoteScheduler >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r9 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r10 = class "Lorg/apache/zeppelin/interpreter/remote/RemoteInterpreter;"
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r10 = class "Lorg/apache/zeppelin/interpreter/remote/RemoteInterpreter;" >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r17 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r17 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r18 = virtualinvoke $r17.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService getExecutor()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r18 = virtualinvoke $r17.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService getExecutor()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r19 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r19 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r20 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r20 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r8.<org.apache.zeppelin.scheduler.RemoteScheduler: void <init>(java.lang.String,java.util.concurrent.ExecutorService,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreter,org.apache.zeppelin.scheduler.SchedulerListener,int)>($r16, $r18, $r19, r0, $r20, i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r8.<org.apache.zeppelin.scheduler.RemoteScheduler: void <init>(java.lang.String,java.util.concurrent.ExecutorService,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreter,org.apache.zeppelin.scheduler.SchedulerListener,int)>($r16, $r18, $r19, r0, $r20, i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r21 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r21 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r22 = virtualinvoke $r21.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetScheduler(org.apache.zeppelin.scheduler.Scheduler)>($r8)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r22 = virtualinvoke $r21.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetScheduler(org.apache.zeppelin.scheduler.Scheduler)>($r8) >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name>
org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getName : return $r1
org.apache.zeppelin.scheduler.RemoteScheduler.getName : return $r1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z2 != 0
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z2 != 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r5 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r5 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r5.<java.lang.Object: void wait(long)>(500L)
org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r5.<java.lang.Object: void wait(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : return $r22
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : return $r22 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsRunning()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsRunning()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r6 = new java.util.LinkedList
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r6 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : specialinvoke $r6.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : specialinvoke $r6.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : entermonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : entermonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : if $z0 == 0
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : if $z0 == 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : exitmonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : goto [?= return $r6]
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : goto [?= return $r6] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : return $r6
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r35 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r35 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsWaiting()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsWaiting()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r6 = new java.util.LinkedList
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r6 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : specialinvoke $r6.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : specialinvoke $r6.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : entermonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : entermonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : if $z0 == 0
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : if $z0 == 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : exitmonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : goto [?= return $r6]
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : goto [?= return $r6] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : return $r6
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r37 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r37 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r3 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r3 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close is called when RemoterInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close is called when RemoterInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= (branch)]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r8.<org.apache.zeppelin.scheduler.SchedulerFactory: void removeScheduler(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r8.<org.apache.zeppelin.scheduler.SchedulerFactory: void removeScheduler(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1
org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : entermonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.stop : entermonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : virtualinvoke $r4.<java.lang.Object: void notify()>()
org.apache.zeppelin.scheduler.RemoteScheduler.stop : virtualinvoke $r4.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor $r3]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor $r3] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : goto [?= return]
org.apache.zeppelin.scheduler.RemoteScheduler.stop : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r14 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r14 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke $r14.<java.util.Map: boolean isEmpty()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke $r14.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterGroup: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterGroup: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = (java.lang.String) $r11
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = (java.lang.String) $r11 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r15 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r15 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r15 == null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r15 == null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r17 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r17 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove this InterpreterGroup: {} as all the sessions are closed", $r16)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove this InterpreterGroup: {} as all the sessions are closed", $r16) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r19 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r19 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r18 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r18 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r19.<org.apache.zeppelin.interpreter.InterpreterSetting: void removeInterpreterGroup(java.lang.String)>($r18)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r19.<org.apache.zeppelin.interpreter.InterpreterSetting: void removeInterpreterGroup(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r20 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r20 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r20 == null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r20 == null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
