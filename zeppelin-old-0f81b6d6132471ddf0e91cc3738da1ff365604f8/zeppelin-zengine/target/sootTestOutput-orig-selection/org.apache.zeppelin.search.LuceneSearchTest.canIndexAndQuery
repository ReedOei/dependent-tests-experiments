org.apache.zeppelin.search.LuceneSearch.close : $r2 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.close : virtualinvoke $r2.<org.apache.lucene.index.IndexWriter: void close()>()
org.apache.zeppelin.search.LuceneSearch.close : virtualinvoke $r2.<org.apache.lucene.index.IndexWriter: void close()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.close : goto [?= return]
org.apache.zeppelin.search.LuceneSearch.close : goto [?= return] >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/notebook/repo/NotebookRepo;")
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/notebook/repo/NotebookRepo;") >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r1 = (org.apache.zeppelin.notebook.repo.NotebookRepo) $r0
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r1 = (org.apache.zeppelin.notebook.repo.NotebookRepo) $r0 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepoMock> = $r1
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepoMock> = $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/InterpreterFactory;")
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/InterpreterFactory;") >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r3 = (org.apache.zeppelin.interpreter.InterpreterFactory) $r2
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r3 = (org.apache.zeppelin.interpreter.InterpreterFactory) $r2 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> = $r3
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> = $r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/InterpreterSettingManager;")
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/InterpreterSettingManager;") >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r5 = (org.apache.zeppelin.interpreter.InterpreterSettingManager) $r4
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r5 = (org.apache.zeppelin.interpreter.InterpreterSettingManager) $r4 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> = $r5
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> = $r5 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : r3 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Note newNote(java.lang.String)>(r1)
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : r3 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Note newNote(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r3 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r3 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r7 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepoMock>
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r7 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepoMock> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r6 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r6 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r5 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r5 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r4 = r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r4 = r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : specialinvoke $r3.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r7, $r6, $r5, null, $r4, null, null)
org.apache.zeppelin.search.LuceneSearchTest.newNote : specialinvoke $r3.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r7, $r6, $r5, null, $r4, null, null) >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : virtualinvoke $r3.<org.apache.zeppelin.notebook.Note: void setName(java.lang.String)>(r1)
org.apache.zeppelin.search.LuceneSearchTest.newNote : virtualinvoke $r3.<org.apache.zeppelin.notebook.Note: void setName(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.setName : r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(47)
org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(47) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $i0 >= 0
org.apache.zeppelin.notebook.Note.setName : if $i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(92)
org.apache.zeppelin.notebook.Note.setName : $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(92) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $i1 < 0
org.apache.zeppelin.notebook.Note.setName : if $i1 < 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r3
org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r3 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener>
org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $r4 == null
org.apache.zeppelin.notebook.Note.setName : if $r4 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : return $r3
org.apache.zeppelin.search.LuceneSearchTest.newNote : return $r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Paragraph addParagraphWithText(org.apache.zeppelin.notebook.Note,java.lang.String)>(r3, r2)
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Paragraph addParagraphWithText(org.apache.zeppelin.notebook.Note,java.lang.String)>(r3, r2) >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : $r4 = <org.apache.zeppelin.user.AuthenticationInfo: org.apache.zeppelin.user.AuthenticationInfo ANONYMOUS>
org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : $r4 = <org.apache.zeppelin.user.AuthenticationInfo: org.apache.zeppelin.user.AuthenticationInfo ANONYMOUS> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph addNewParagraph(org.apache.zeppelin.user.AuthenticationInfo)>($r4)
org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph addNewParagraph(org.apache.zeppelin.user.AuthenticationInfo)>($r4) >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.addNewParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.addNewParagraph : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph insertNewParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>($i0, r1)
org.apache.zeppelin.notebook.Note.addNewParagraph : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph insertNewParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>($i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : r2 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph createParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>(i0, r1)
org.apache.zeppelin.notebook.Note.insertNewParagraph : r2 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph createParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>(i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : $r3 = new org.apache.zeppelin.notebook.Paragraph
org.apache.zeppelin.notebook.Note.createParagraph : $r3 = new org.apache.zeppelin.notebook.Paragraph >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterFactory factory>
org.apache.zeppelin.notebook.Note.createParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterFactory factory> >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void <init>(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.scheduler.JobListener,org.apache.zeppelin.interpreter.InterpreterFactory)>(r0, r0, $r4)
org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void <init>(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.scheduler.JobListener,org.apache.zeppelin.interpreter.InterpreterFactory)>(r0, r0, $r4) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.security.SecureRandom
org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $i1 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $i1 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : return $r6
org.apache.zeppelin.notebook.Paragraph.generateId : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r9 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r9 == null >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.Note.createParagraph : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> = r1
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : $r2 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : $r2 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> = $r2
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void setParagraphMagic(org.apache.zeppelin.notebook.Paragraph,int)>($r3, i0)
org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void setParagraphMagic(org.apache.zeppelin.notebook.Paragraph,int)>($r3, i0) >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.setParagraphMagic : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $i1 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.setParagraphMagic : $i1 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : if $i1 <= 0
org.apache.zeppelin.notebook.Note.setParagraphMagic : if $i1 <= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : return $r3
org.apache.zeppelin.notebook.Note.createParagraph : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void insertParagraph(org.apache.zeppelin.notebook.Paragraph,int)>(r2, i0)
org.apache.zeppelin.notebook.Note.insertNewParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void insertParagraph(org.apache.zeppelin.notebook.Paragraph,int)>(r2, i0) >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.insertParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : entermonitor $r4
org.apache.zeppelin.notebook.Note.insertParagraph : entermonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.insertParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r1)
org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : exitmonitor $r4
org.apache.zeppelin.notebook.Note.insertParagraph : exitmonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : goto [?= $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>]
org.apache.zeppelin.notebook.Note.insertParagraph : goto [?= $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>] >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.insertParagraph : $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : if $r6 == null
org.apache.zeppelin.notebook.Note.insertParagraph : if $r6 == null >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : return r2
org.apache.zeppelin.notebook.Note.insertNewParagraph : return r2 >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : return $r3
org.apache.zeppelin.notebook.Note.addNewParagraph : return $r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void setText(java.lang.String)>(r2)
org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void setText(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> = r1
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r4 = new java.util.Date
org.apache.zeppelin.notebook.Paragraph.setText : $r4 = new java.util.Date >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : specialinvoke $r4.<java.util.Date: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.setText : specialinvoke $r4.<java.util.Date: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Date dateUpdated> = $r4
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Date dateUpdated> = $r4 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.setText : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : if $r5 == null
org.apache.zeppelin.notebook.Paragraph.setText : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r7 = <org.apache.zeppelin.notebook.Paragraph: java.util.regex.Pattern REPL_PATTERN>
org.apache.zeppelin.notebook.Paragraph.setText : $r7 = <org.apache.zeppelin.notebook.Paragraph: java.util.regex.Pattern REPL_PATTERN> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.setText : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r2 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6)
org.apache.zeppelin.notebook.Paragraph.setText : r2 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>()
org.apache.zeppelin.notebook.Paragraph.setText : $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : if $z0 == 0
org.apache.zeppelin.notebook.Paragraph.setText : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String intpText> = ""
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String intpText> = "" >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r8 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.setText : $r8 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String scriptText> = $r8
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String scriptText> = $r8 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : return r3
org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : return r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : return r3
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : return r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : r3 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Note newNote(java.lang.String)>(r1)
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : r3 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Note newNote(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : i0 = lengthof r2
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : i0 = lengthof r2 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : i1 = 0
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : i1 = 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : if i1 >= i0
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : if i1 >= i0 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : r5 = r2[i1]
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : r5 = r2[i1] >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Paragraph addParagraphWithText(org.apache.zeppelin.notebook.Note,java.lang.String)>(r3, r5)
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Paragraph addParagraphWithText(org.apache.zeppelin.notebook.Note,java.lang.String)>(r3, r5) >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : i1 = i1 + 1
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : goto [?= (branch)]
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : if i0 != 0
org.apache.zeppelin.notebook.Note.setParagraphMagic : if i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.setParagraphMagic : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $i2 = i0 - 1
org.apache.zeppelin.notebook.Note.setParagraphMagic : $i2 = i0 - 1 >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2)
org.apache.zeppelin.notebook.Note.setParagraphMagic : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $r5 = (org.apache.zeppelin.notebook.Paragraph) $r4
org.apache.zeppelin.notebook.Note.setParagraphMagic : $r5 = (org.apache.zeppelin.notebook.Paragraph) $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : r14 = virtualinvoke $r5.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getIntpText()>()
org.apache.zeppelin.notebook.Note.setParagraphMagic : r14 = virtualinvoke $r5.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getIntpText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getIntpText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String intpText>
org.apache.zeppelin.notebook.Paragraph.getIntpText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String intpText> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getIntpText : return $r1
org.apache.zeppelin.notebook.Paragraph.getIntpText : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Paragraph: boolean isValidInterpreter(java.lang.String)>(r14)
org.apache.zeppelin.notebook.Note.setParagraphMagic : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Paragraph: boolean isValidInterpreter(java.lang.String)>(r14) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user>
org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r5 = virtualinvoke $r2.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r5 = virtualinvoke $r2.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r6 = virtualinvoke $r3.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, r1)
org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $r6 = virtualinvoke $r3.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : if $r6 == null
org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : if $r6 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $z0 = 0
org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : $z0 = 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : return $z0
org.apache.zeppelin.notebook.Paragraph.isValidInterpreter : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : if $z0 == 0
org.apache.zeppelin.notebook.Note.setParagraphMagic : if $z0 == 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : return r3
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraphs : return r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : i7 = 0
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : i7 = 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : l0 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : l0 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : r29 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : r29 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : if $z0 == 0
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : if $z0 == 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r9 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r9 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : r2 = (org.apache.zeppelin.notebook.Note) $r9
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : r2 = (org.apache.zeppelin.notebook.Note) $r9 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void addIndexDocAsync(org.apache.zeppelin.notebook.Note)>(r2)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void addIndexDocAsync(org.apache.zeppelin.notebook.Note)>(r2) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r4 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer>
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r4 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r6 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r6 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexNoteName(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String)>($r4, $r5, $r6)
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexNoteName(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String)>($r4, $r5, $r6) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : $r4 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.indexNoteName : $r4 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing Notebook {}, \'{}\'", r2, r3)
org.apache.zeppelin.search.LuceneSearch.indexNoteName : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing Notebook {}, \'{}\'", r2, r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : if null == r3
org.apache.zeppelin.search.LuceneSearch.indexNoteName : if null == r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.search.LuceneSearch.indexNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : if $z0 == 0
org.apache.zeppelin.search.LuceneSearch.indexNoteName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexDoc(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r1, r2, r3, null)
org.apache.zeppelin.search.LuceneSearch.indexNoteName : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexDoc(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r1, r2, r3, null) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexDoc : r5 = staticinvoke <org.apache.zeppelin.search.LuceneSearch: java.lang.String formatId(java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r2, r4)
org.apache.zeppelin.search.LuceneSearch.indexDoc : r5 = staticinvoke <org.apache.zeppelin.search.LuceneSearch: java.lang.String formatId(java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r2, r4) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : r5 = r0
org.apache.zeppelin.search.LuceneSearch.formatId : r5 = r0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : if null == r1
org.apache.zeppelin.search.LuceneSearch.formatId : if null == r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : return r5
org.apache.zeppelin.search.LuceneSearch.formatId : return r5 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexDoc : r6 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.document.Document newDocument(java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r5, r3, r4)
org.apache.zeppelin.search.LuceneSearch.indexDoc : r6 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.document.Document newDocument(java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r5, r3, r4) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r7 = new org.apache.lucene.document.Document
org.apache.zeppelin.search.LuceneSearch.newDocument : $r7 = new org.apache.lucene.document.Document >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r7.<org.apache.lucene.document.Document: void <init>()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r7.<org.apache.lucene.document.Document: void <init>()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r8 = new org.apache.lucene.document.StringField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r8 = new org.apache.lucene.document.StringField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r9 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r9 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r8.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("id", r1, $r9)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r8.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("id", r1, $r9) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r8)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r8) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r10 = new org.apache.lucene.document.StringField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r10 = new org.apache.lucene.document.StringField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r11 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r11 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r10.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("title", r2, $r11)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r10.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("title", r2, $r11) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r10)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r10) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : if null == r3
org.apache.zeppelin.search.LuceneSearch.newDocument : if null == r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r12 = new org.apache.lucene.document.TextField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r12 = new org.apache.lucene.document.TextField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r13 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r13 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r12.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", r2, $r13)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r12.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", r2, $r13) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r12)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r12) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : return $r7
org.apache.zeppelin.search.LuceneSearch.newDocument : return $r7 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexDoc : virtualinvoke r1.<org.apache.lucene.index.IndexWriter: void addDocument(java.lang.Iterable)>(r6)
org.apache.zeppelin.search.LuceneSearch.indexDoc : virtualinvoke r1.<org.apache.lucene.index.IndexWriter: void addDocument(java.lang.Iterable)>(r6) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r7 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r7 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5)
org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : return $r4
org.apache.zeppelin.notebook.Note.getParagraphs : return $r4 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : if $z0 == 0
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : if $z0 == 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : r3 = (org.apache.zeppelin.notebook.Paragraph) $r8
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : r3 = (org.apache.zeppelin.notebook.Paragraph) $r8 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.getText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getText : return $r1
org.apache.zeppelin.notebook.Paragraph.getText : return $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : if $r9 != null
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : if $r9 != null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r10 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer>
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r10 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r11 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r11 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r12 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r12 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexDoc(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>($r10, $r11, $r12, r3)
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexDoc(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>($r10, $r11, $r12, r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(47)
org.apache.zeppelin.search.LuceneSearch.formatId : $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(47) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : $r3 = newarray (java.lang.Object)[1]
org.apache.zeppelin.search.LuceneSearch.formatId : $r3 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.search.LuceneSearch.formatId : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : $r3[0] = $r4
org.apache.zeppelin.search.LuceneSearch.formatId : $r3[0] = $r4 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : r5 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[])>(r0, "paragraph", $r3)
org.apache.zeppelin.search.LuceneSearch.formatId : r5 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[])>(r0, "paragraph", $r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r14 = new org.apache.lucene.document.TextField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r14 = new org.apache.lucene.document.TextField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r15 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $r15 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r16 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r16 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r14.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", $r15, $r16)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r14.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", $r15, $r16) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r14)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r14) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r17 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getTitle()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $r17 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getTitle()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getTitle : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title>
org.apache.zeppelin.notebook.Paragraph.getTitle : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getTitle : return $r1
org.apache.zeppelin.notebook.Paragraph.getTitle : return $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : if $r17 == null
org.apache.zeppelin.search.LuceneSearch.newDocument : if $r17 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r18 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.util.Date getDateStarted()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $r18 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.util.Date getDateStarted()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : if $r18 == null
org.apache.zeppelin.search.LuceneSearch.newDocument : if $r18 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r24 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.util.Date getDateCreated()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $r24 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.util.Date getDateCreated()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r19 = new org.apache.lucene.document.LongField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r19 = new org.apache.lucene.document.LongField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $l0 = virtualinvoke $r24.<java.util.Date: long getTime()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $l0 = virtualinvoke $r24.<java.util.Date: long getTime()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r20 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r20 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r19.<org.apache.lucene.document.LongField: void <init>(java.lang.String,long,org.apache.lucene.document.Field$Store)>("modified", $l0, $r20)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r19.<org.apache.lucene.document.LongField: void <init>(java.lang.String,long,org.apache.lucene.document.Field$Store)>("modified", $l0, $r20) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r19)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r19) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : goto [?= return $r7]
org.apache.zeppelin.search.LuceneSearch.newDocument : goto [?= return $r7] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : i7 = i7 + 1
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : i7 = i7 + 1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r4 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer>
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r4 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : virtualinvoke $r4.<org.apache.lucene.index.IndexWriter: void commit()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : virtualinvoke $r4.<org.apache.lucene.index.IndexWriter: void commit()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= l8 = staticinvoke <java.lang.System: long nanoTime()>()]
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= l8 = staticinvoke <java.lang.System: long nanoTime()>()] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : l8 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : l8 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r5 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r5 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $l1 = l8 - l0
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $l1 = l8 - l0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $l2 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>($l1)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $l2 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>($l1) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing {} notebooks took {}ms", $r6, $r8)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing {} notebooks took {}ms", $r6, $r8) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= return]
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= return] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r9 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.store.Directory ramDirectory>
org.apache.zeppelin.search.LuceneSearch.query : $r9 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.store.Directory ramDirectory> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : if null != $r9
org.apache.zeppelin.search.LuceneSearch.query : if null != $r9 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : r38 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.zeppelin.search.LuceneSearch.query : r38 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r10 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.store.Directory ramDirectory>
org.apache.zeppelin.search.LuceneSearch.query : $r10 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.store.Directory ramDirectory> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : r39 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory)>($r10)
org.apache.zeppelin.search.LuceneSearch.query : r39 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory)>($r10) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : r40 = null
org.apache.zeppelin.search.LuceneSearch.query : r40 = null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r11 = new org.apache.lucene.search.IndexSearcher
org.apache.zeppelin.search.LuceneSearch.query : $r11 = new org.apache.lucene.search.IndexSearcher >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r11.<org.apache.lucene.search.IndexSearcher: void <init>(org.apache.lucene.index.IndexReader)>(r39)
org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r11.<org.apache.lucene.search.IndexSearcher: void <init>(org.apache.lucene.index.IndexReader)>(r39) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r12 = new org.apache.lucene.analysis.standard.StandardAnalyzer
org.apache.zeppelin.search.LuceneSearch.query : $r12 = new org.apache.lucene.analysis.standard.StandardAnalyzer >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r12.<org.apache.lucene.analysis.standard.StandardAnalyzer: void <init>()>()
org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r12.<org.apache.lucene.analysis.standard.StandardAnalyzer: void <init>()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r13 = new org.apache.lucene.queryparser.classic.MultiFieldQueryParser
org.apache.zeppelin.search.LuceneSearch.query : $r13 = new org.apache.lucene.queryparser.classic.MultiFieldQueryParser >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r14 = newarray (java.lang.String)[2]
org.apache.zeppelin.search.LuceneSearch.query : $r14 = newarray (java.lang.String)[2] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r14[0] = "contents"
org.apache.zeppelin.search.LuceneSearch.query : $r14[0] = "contents" >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r14[1] = "header"
org.apache.zeppelin.search.LuceneSearch.query : $r14[1] = "header" >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r13.<org.apache.lucene.queryparser.classic.MultiFieldQueryParser: void <init>(java.lang.String[],org.apache.lucene.analysis.Analyzer)>($r14, $r12)
org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r13.<org.apache.lucene.queryparser.classic.MultiFieldQueryParser: void <init>(java.lang.String[],org.apache.lucene.analysis.Analyzer)>($r14, $r12) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : r4 = virtualinvoke $r13.<org.apache.lucene.queryparser.classic.MultiFieldQueryParser: org.apache.lucene.search.Query parse(java.lang.String)>(r1)
org.apache.zeppelin.search.LuceneSearch.query : r4 = virtualinvoke $r13.<org.apache.lucene.queryparser.classic.MultiFieldQueryParser: org.apache.lucene.search.Query parse(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r16 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.query : $r16 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.search.LuceneSearch.query : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Searching for: ")
org.apache.zeppelin.search.LuceneSearch.query : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Searching for: ") >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r18 = virtualinvoke r4.<org.apache.lucene.search.Query: java.lang.String toString(java.lang.String)>("contents")
org.apache.zeppelin.search.LuceneSearch.query : $r18 = virtualinvoke r4.<org.apache.lucene.search.Query: java.lang.String toString(java.lang.String)>("contents") >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18)
org.apache.zeppelin.search.LuceneSearch.query : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.search.LuceneSearch.query : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r20)
org.apache.zeppelin.search.LuceneSearch.query : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r21 = new org.apache.lucene.search.highlight.SimpleHTMLFormatter
org.apache.zeppelin.search.LuceneSearch.query : $r21 = new org.apache.lucene.search.highlight.SimpleHTMLFormatter >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r21.<org.apache.lucene.search.highlight.SimpleHTMLFormatter: void <init>()>()
org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r21.<org.apache.lucene.search.highlight.SimpleHTMLFormatter: void <init>()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r22 = new org.apache.lucene.search.highlight.Highlighter
org.apache.zeppelin.search.LuceneSearch.query : $r22 = new org.apache.lucene.search.highlight.Highlighter >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : $r23 = new org.apache.lucene.search.highlight.QueryScorer
org.apache.zeppelin.search.LuceneSearch.query : $r23 = new org.apache.lucene.search.highlight.QueryScorer >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r23.<org.apache.lucene.search.highlight.QueryScorer: void <init>(org.apache.lucene.search.Query)>(r4)
org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r23.<org.apache.lucene.search.highlight.QueryScorer: void <init>(org.apache.lucene.search.Query)>(r4) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r22.<org.apache.lucene.search.highlight.Highlighter: void <init>(org.apache.lucene.search.highlight.Formatter,org.apache.lucene.search.highlight.Scorer)>($r21, $r23)
org.apache.zeppelin.search.LuceneSearch.query : specialinvoke $r22.<org.apache.lucene.search.highlight.Highlighter: void <init>(org.apache.lucene.search.highlight.Formatter,org.apache.lucene.search.highlight.Scorer)>($r21, $r23) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : r38 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: java.util.List doSearch(org.apache.lucene.search.IndexSearcher,org.apache.lucene.search.Query,org.apache.lucene.analysis.Analyzer,org.apache.lucene.search.highlight.Highlighter)>($r11, r4, $r12, $r22)
org.apache.zeppelin.search.LuceneSearch.query : r38 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: java.util.List doSearch(org.apache.lucene.search.IndexSearcher,org.apache.lucene.search.Query,org.apache.lucene.analysis.Analyzer,org.apache.lucene.search.highlight.Highlighter)>($r11, r4, $r12, $r22) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.zeppelin.search.LuceneSearch.doSearch : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r11 = virtualinvoke r1.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Query,int)>(r2, 20)
org.apache.zeppelin.search.LuceneSearch.doSearch : $r11 = virtualinvoke r1.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Query,int)>(r2, 20) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r6 = $r11.<org.apache.lucene.search.TopDocs: org.apache.lucene.search.ScoreDoc[] scoreDocs>
org.apache.zeppelin.search.LuceneSearch.doSearch : r6 = $r11.<org.apache.lucene.search.TopDocs: org.apache.lucene.search.ScoreDoc[] scoreDocs> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : i10 = 0
org.apache.zeppelin.search.LuceneSearch.doSearch : i10 = 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $i1 = lengthof r6
org.apache.zeppelin.search.LuceneSearch.doSearch : $i1 = lengthof r6 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if i10 >= $i1
org.apache.zeppelin.search.LuceneSearch.doSearch : if i10 >= $i1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r13 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.doSearch : $r13 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r12 = r6[i10]
org.apache.zeppelin.search.LuceneSearch.doSearch : $r12 = r6[i10] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $i2 = $r12.<org.apache.lucene.search.ScoreDoc: int doc>
org.apache.zeppelin.search.LuceneSearch.doSearch : $i2 = $r12.<org.apache.lucene.search.ScoreDoc: int doc> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.zeppelin.search.LuceneSearch.doSearch : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r15 = r6[i10]
org.apache.zeppelin.search.LuceneSearch.doSearch : $r15 = r6[i10] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $f0 = $r15.<org.apache.lucene.search.ScoreDoc: float score>
org.apache.zeppelin.search.LuceneSearch.doSearch : $f0 = $r15.<org.apache.lucene.search.ScoreDoc: float score> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0)
org.apache.zeppelin.search.LuceneSearch.doSearch : $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("doc={} score={}", $r14, $r16)
org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("doc={} score={}", $r14, $r16) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r17 = r6[i10]
org.apache.zeppelin.search.LuceneSearch.doSearch : $r17 = r6[i10] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : i0 = $r17.<org.apache.lucene.search.ScoreDoc: int doc>
org.apache.zeppelin.search.LuceneSearch.doSearch : i0 = $r17.<org.apache.lucene.search.ScoreDoc: int doc> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r7 = virtualinvoke r1.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.document.Document doc(int)>(i0)
org.apache.zeppelin.search.LuceneSearch.doSearch : r7 = virtualinvoke r1.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.document.Document doc(int)>(i0) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r8 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("id")
org.apache.zeppelin.search.LuceneSearch.doSearch : r8 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("id") >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if r8 == null
org.apache.zeppelin.search.LuceneSearch.doSearch : if r8 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r21 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.doSearch : $r21 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r20 = new java.lang.StringBuilder
org.apache.zeppelin.search.LuceneSearch.doSearch : $r20 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.search.LuceneSearch.doSearch : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $i4 = i10 + 1
org.apache.zeppelin.search.LuceneSearch.doSearch : $i4 = i10 + 1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)
org.apache.zeppelin.search.LuceneSearch.doSearch : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ")
org.apache.zeppelin.search.LuceneSearch.doSearch : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ") >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)
org.apache.zeppelin.search.LuceneSearch.doSearch : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.search.LuceneSearch.doSearch : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r21.<org.slf4j.Logger: void debug(java.lang.String)>($r25)
org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r21.<org.slf4j.Logger: void debug(java.lang.String)>($r25) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r9 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("title")
org.apache.zeppelin.search.LuceneSearch.doSearch : r9 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("title") >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if r9 == null
org.apache.zeppelin.search.LuceneSearch.doSearch : if r9 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r38 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.doSearch : $r38 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r39 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("title")
org.apache.zeppelin.search.LuceneSearch.doSearch : $r39 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("title") >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r38.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("   Title: {}", $r39)
org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r38.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("   Title: {}", $r39) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r10 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("contents")
org.apache.zeppelin.search.LuceneSearch.doSearch : r10 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("contents") >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r42 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("header")
org.apache.zeppelin.search.LuceneSearch.doSearch : r42 = virtualinvoke r7.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>("header") >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r43 = ""
org.apache.zeppelin.search.LuceneSearch.doSearch : r43 = "" >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if r10 == null
org.apache.zeppelin.search.LuceneSearch.doSearch : if r10 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r29 = virtualinvoke r1.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>()
org.apache.zeppelin.search.LuceneSearch.doSearch : $r29 = virtualinvoke r1.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r44 = staticinvoke <org.apache.lucene.search.highlight.TokenSources: org.apache.lucene.analysis.TokenStream getTokenStream(org.apache.lucene.index.IndexReader,int,java.lang.String,org.apache.lucene.analysis.Analyzer)>($r29, i0, "contents", r3)
org.apache.zeppelin.search.LuceneSearch.doSearch : r44 = staticinvoke <org.apache.lucene.search.highlight.TokenSources: org.apache.lucene.analysis.TokenStream getTokenStream(org.apache.lucene.index.IndexReader,int,java.lang.String,org.apache.lucene.analysis.Analyzer)>($r29, i0, "contents", r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r45 = virtualinvoke r4.<org.apache.lucene.search.highlight.Highlighter: org.apache.lucene.search.highlight.TextFragment[] getBestTextFragments(org.apache.lucene.analysis.TokenStream,java.lang.String,boolean,int)>(r44, r10, 1, 3)
org.apache.zeppelin.search.LuceneSearch.doSearch : r45 = virtualinvoke r4.<org.apache.lucene.search.highlight.Highlighter: org.apache.lucene.search.highlight.TextFragment[] getBestTextFragments(org.apache.lucene.analysis.TokenStream,java.lang.String,boolean,int)>(r44, r10, 1, 3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r30 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.doSearch : $r30 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $i6 = lengthof r45
org.apache.zeppelin.search.LuceneSearch.doSearch : $i6 = lengthof r45 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)
org.apache.zeppelin.search.LuceneSearch.doSearch : $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("    {} fragments found for query \'{}\'", $r31, r2)
org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("    {} fragments found for query \'{}\'", $r31, r2) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : i11 = 0
org.apache.zeppelin.search.LuceneSearch.doSearch : i11 = 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $i7 = lengthof r45
org.apache.zeppelin.search.LuceneSearch.doSearch : $i7 = lengthof r45 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if i11 >= $i7
org.apache.zeppelin.search.LuceneSearch.doSearch : if i11 >= $i7 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r33 = r45[i11]
org.apache.zeppelin.search.LuceneSearch.doSearch : $r33 = r45[i11] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if $r33 == null
org.apache.zeppelin.search.LuceneSearch.doSearch : if $r33 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r34 = r45[i11]
org.apache.zeppelin.search.LuceneSearch.doSearch : $r34 = r45[i11] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $f1 = virtualinvoke $r34.<org.apache.lucene.search.highlight.TextFragment: float getScore()>()
org.apache.zeppelin.search.LuceneSearch.doSearch : $f1 = virtualinvoke $r34.<org.apache.lucene.search.highlight.TextFragment: float getScore()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $b9 = $f1 cmpl 0.0F
org.apache.zeppelin.search.LuceneSearch.doSearch : $b9 = $f1 cmpl 0.0F >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if $b9 <= 0
org.apache.zeppelin.search.LuceneSearch.doSearch : if $b9 <= 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r36 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.doSearch : $r36 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r35 = r45[i11]
org.apache.zeppelin.search.LuceneSearch.doSearch : $r35 = r45[i11] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r37 = virtualinvoke $r35.<org.apache.lucene.search.highlight.TextFragment: java.lang.String toString()>()
org.apache.zeppelin.search.LuceneSearch.doSearch : $r37 = virtualinvoke $r35.<org.apache.lucene.search.highlight.TextFragment: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r36.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("    Fragment: {}", $r37)
org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke $r36.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("    Fragment: {}", $r37) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : i11 = i11 + 1
org.apache.zeppelin.search.LuceneSearch.doSearch : i11 = i11 + 1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= $i7 = lengthof r45]
org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= $i7 = lengthof r45] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if r45 == null
org.apache.zeppelin.search.LuceneSearch.doSearch : if r45 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $i8 = lengthof r45
org.apache.zeppelin.search.LuceneSearch.doSearch : $i8 = lengthof r45 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if $i8 <= 0
org.apache.zeppelin.search.LuceneSearch.doSearch : if $i8 <= 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r32 = r45[0]
org.apache.zeppelin.search.LuceneSearch.doSearch : $r32 = r45[0] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r46 = virtualinvoke $r32.<org.apache.lucene.search.highlight.TextFragment: java.lang.String toString()>()
org.apache.zeppelin.search.LuceneSearch.doSearch : $r46 = virtualinvoke $r32.<org.apache.lucene.search.highlight.TextFragment: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= r43 = $r46]
org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= r43 = $r46] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r43 = $r46
org.apache.zeppelin.search.LuceneSearch.doSearch : r43 = $r46 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : if r42 == null
org.apache.zeppelin.search.LuceneSearch.doSearch : if r42 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : r50 = ""
org.apache.zeppelin.search.LuceneSearch.doSearch : r50 = "" >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : $r26 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("id", r8, "name", r9, "snippet", r43, "text", r10, "header", r50)
org.apache.zeppelin.search.LuceneSearch.doSearch : $r26 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("id", r8, "name", r9, "snippet", r43, "text", r10, "header", r50) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r26)
org.apache.zeppelin.search.LuceneSearch.doSearch : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r26) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= i10 = i10 + 1]
org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= i10 = i10 + 1] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : i10 = i10 + 1
org.apache.zeppelin.search.LuceneSearch.doSearch : i10 = i10 + 1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= $i1 = lengthof r6]
org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= $i1 = lengthof r6] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= return r5]
org.apache.zeppelin.search.LuceneSearch.doSearch : goto [?= return r5] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.doSearch : return r5
org.apache.zeppelin.search.LuceneSearch.doSearch : return r5 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : virtualinvoke r39.<org.apache.lucene.index.IndexReader: void close()>()
org.apache.zeppelin.search.LuceneSearch.query : virtualinvoke r39.<org.apache.lucene.index.IndexReader: void close()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : if r39 == null
org.apache.zeppelin.search.LuceneSearch.query : if r39 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : goto [?= virtualinvoke r39.<org.apache.lucene.index.IndexReader: void close()>()]
org.apache.zeppelin.search.LuceneSearch.query : goto [?= virtualinvoke r39.<org.apache.lucene.index.IndexReader: void close()>()] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : goto [?= (branch)]
org.apache.zeppelin.search.LuceneSearch.query : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : goto [?= return r38]
org.apache.zeppelin.search.LuceneSearch.query : goto [?= return r38] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.query : return r38
org.apache.zeppelin.search.LuceneSearch.query : return r38 >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getLastParagraph : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : entermonitor $r3
org.apache.zeppelin.notebook.Note.getLastParagraph : entermonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getLastParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getLastParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.getLastParagraph : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : $i1 = $i0 - 1
org.apache.zeppelin.notebook.Note.getLastParagraph : $i1 = $i0 - 1 >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1)
org.apache.zeppelin.notebook.Note.getLastParagraph : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : $r7 = (org.apache.zeppelin.notebook.Paragraph) $r6
org.apache.zeppelin.notebook.Note.getLastParagraph : $r7 = (org.apache.zeppelin.notebook.Paragraph) $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : exitmonitor $r3
org.apache.zeppelin.notebook.Note.getLastParagraph : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getLastParagraph : return $r7
