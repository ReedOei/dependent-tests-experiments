org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor $r3] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z2 != 0
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : $r0 = new org.apache.zeppelin.interpreter.MiniHadoopCluster
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : $r0 = new org.apache.zeppelin.interpreter.MiniHadoopCluster >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : specialinvoke $r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: void <init>()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : specialinvoke $r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniHadoopCluster hadoopCluster> = $r0
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniHadoopCluster hadoopCluster> = $r0 >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : $r1 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniHadoopCluster hadoopCluster>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : $r1 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniHadoopCluster hadoopCluster> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : virtualinvoke $r1.<org.apache.zeppelin.interpreter.MiniHadoopCluster: void start()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : virtualinvoke $r1.<org.apache.zeppelin.interpreter.MiniHadoopCluster: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r4 = <org.apache.zeppelin.interpreter.MiniHadoopCluster: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r4 = <org.apache.zeppelin.interpreter.MiniHadoopCluster: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Starting MiniHadoopCluster ...")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Starting MiniHadoopCluster ...") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r5 = new org.apache.hadoop.conf.Configuration
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r5 = new org.apache.hadoop.conf.Configuration >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r5.<org.apache.hadoop.conf.Configuration: void <init>()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r5.<org.apache.hadoop.conf.Configuration: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.conf.Configuration hadoopConf> = $r5
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.conf.Configuration hadoopConf> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r6 = new java.io.File
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r6 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r7 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: java.lang.String configPath>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r7 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: java.lang.String configPath> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r6.<java.io.File: boolean mkdirs()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r6.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r8 = new org.apache.hadoop.hdfs.MiniDFSCluster$Builder
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r8 = new org.apache.hadoop.hdfs.MiniDFSCluster$Builder >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r9 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.conf.Configuration hadoopConf>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r9 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.conf.Configuration hadoopConf> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r8.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: void <init>(org.apache.hadoop.conf.Configuration)>($r9)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r8.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: void <init>(org.apache.hadoop.conf.Configuration)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r10 = virtualinvoke $r8.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: org.apache.hadoop.hdfs.MiniDFSCluster$Builder numDataNodes(int)>(2)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r10 = virtualinvoke $r8.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: org.apache.hadoop.hdfs.MiniDFSCluster$Builder numDataNodes(int)>(2) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r11 = virtualinvoke $r10.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: org.apache.hadoop.hdfs.MiniDFSCluster$Builder format(boolean)>(1)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r11 = virtualinvoke $r10.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: org.apache.hadoop.hdfs.MiniDFSCluster$Builder format(boolean)>(1) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r12 = virtualinvoke $r11.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: org.apache.hadoop.hdfs.MiniDFSCluster$Builder waitSafeMode(boolean)>(1)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r12 = virtualinvoke $r11.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: org.apache.hadoop.hdfs.MiniDFSCluster$Builder waitSafeMode(boolean)>(1) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r13 = virtualinvoke $r12.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: org.apache.hadoop.hdfs.MiniDFSCluster build()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r13 = virtualinvoke $r12.<org.apache.hadoop.hdfs.MiniDFSCluster$Builder: org.apache.hadoop.hdfs.MiniDFSCluster build()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r5 = r0.<org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1: org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager this$0>
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r5 = r0.<org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1: org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager this$0> >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r6 = staticinvoke <org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager: java.util.Map access$000(org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager)>($r5)
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r6 = staticinvoke <org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager: java.util.Map access$000(org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager.access$000 : $r1 = r0.<org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager.access$000 : $r1 = r0.<org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager.access$000 : return $r1
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager.access$000 : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : if $z0 == 0
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.hdfs.MiniDFSCluster dfsCluster> = $r13
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.hdfs.MiniDFSCluster dfsCluster> = $r13 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r14 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.hdfs.MiniDFSCluster dfsCluster>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r14 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.hdfs.MiniDFSCluster dfsCluster> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r14.<org.apache.hadoop.hdfs.MiniDFSCluster: void waitActive()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r14.<org.apache.hadoop.hdfs.MiniDFSCluster: void waitActive()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r16 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.conf.Configuration hadoopConf>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r16 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.conf.Configuration hadoopConf> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r17 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: java.lang.String configPath>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r17 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: java.lang.String configPath> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/core-site.xml")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/core-site.xml") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: void saveConfig(org.apache.hadoop.conf.Configuration,java.lang.String)>($r16, $r20)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: void saveConfig(org.apache.hadoop.conf.Configuration,java.lang.String)>($r16, $r20) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r6 = new org.apache.hadoop.conf.Configuration
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r6 = new org.apache.hadoop.conf.Configuration >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : specialinvoke $r6.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>(r1)
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : specialinvoke $r6.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : virtualinvoke $r6.<org.apache.hadoop.conf.Configuration: void unset(java.lang.String)>("net.topology.node.switch.mapping.impl")
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : virtualinvoke $r6.<org.apache.hadoop.conf.Configuration: void unset(java.lang.String)>("net.topology.node.switch.mapping.impl") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r7 = new java.io.FileOutputStream
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r7 = new java.io.FileOutputStream >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : virtualinvoke $r6.<org.apache.hadoop.conf.Configuration: void writeXml(java.io.OutputStream)>($r7)
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : virtualinvoke $r6.<org.apache.hadoop.conf.Configuration: void writeXml(java.io.OutputStream)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : virtualinvoke $r7.<java.io.FileOutputStream: void close()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : virtualinvoke $r7.<java.io.FileOutputStream: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : goto [?= $r9 = <org.apache.zeppelin.interpreter.MiniHadoopCluster: org.slf4j.Logger LOGGER>]
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : goto [?= $r9 = <org.apache.zeppelin.interpreter.MiniHadoopCluster: org.slf4j.Logger LOGGER>] >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r9 = <org.apache.zeppelin.interpreter.MiniHadoopCluster: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r9 = <org.apache.zeppelin.interpreter.MiniHadoopCluster: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Save configuration to ")
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Save configuration to ") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.MiniHadoopCluster.saveConfig : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r21 = new org.apache.hadoop.yarn.conf.YarnConfiguration
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r21 = new org.apache.hadoop.yarn.conf.YarnConfiguration >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r22 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.conf.Configuration hadoopConf>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r22 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.conf.Configuration hadoopConf> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r21.<org.apache.hadoop.yarn.conf.YarnConfiguration: void <init>(org.apache.hadoop.conf.Configuration)>($r22)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r21.<org.apache.hadoop.yarn.conf.YarnConfiguration: void <init>(org.apache.hadoop.conf.Configuration)>($r22) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r23 = new org.apache.hadoop.yarn.server.MiniYARNCluster
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r23 = new org.apache.hadoop.yarn.server.MiniYARNCluster >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r24 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r24 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r23.<org.apache.hadoop.yarn.server.MiniYARNCluster: void <init>(java.lang.String,int,int,int)>($r25, 2, 1, 1)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r23.<org.apache.hadoop.yarn.server.MiniYARNCluster: void <init>(java.lang.String,int,int,int)>($r25, 2, 1, 1) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.yarn.server.MiniYARNCluster yarnCluster> = $r23
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.yarn.server.MiniYARNCluster yarnCluster> = $r23 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r26 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.yarn.server.MiniYARNCluster yarnCluster>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r26 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.yarn.server.MiniYARNCluster yarnCluster> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r26.<org.apache.hadoop.yarn.server.MiniYARNCluster: void init(org.apache.hadoop.conf.Configuration)>($r21)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r26.<org.apache.hadoop.yarn.server.MiniYARNCluster: void init(org.apache.hadoop.conf.Configuration)>($r21) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r27 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r27 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r28 = new org.apache.zeppelin.interpreter.MiniHadoopCluster$1
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r28 = new org.apache.zeppelin.interpreter.MiniHadoopCluster$1 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r28.<org.apache.zeppelin.interpreter.MiniHadoopCluster$1: void <init>(org.apache.zeppelin.interpreter.MiniHadoopCluster)>(r0)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r28.<org.apache.zeppelin.interpreter.MiniHadoopCluster$1: void <init>(org.apache.zeppelin.interpreter.MiniHadoopCluster)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r27.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r28)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r27.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r28) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r29 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.yarn.server.MiniYARNCluster yarnCluster>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r29 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.yarn.server.MiniYARNCluster yarnCluster> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r29.<org.apache.hadoop.yarn.server.MiniYARNCluster: void start()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke $r29.<org.apache.hadoop.yarn.server.MiniYARNCluster: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r30 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.yarn.server.MiniYARNCluster yarnCluster>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r30 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: org.apache.hadoop.yarn.server.MiniYARNCluster yarnCluster> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : r2 = virtualinvoke $r30.<org.apache.hadoop.yarn.server.MiniYARNCluster: org.apache.hadoop.conf.Configuration getConfig()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : r2 = virtualinvoke $r30.<org.apache.hadoop.yarn.server.MiniYARNCluster: org.apache.hadoop.conf.Configuration getConfig()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $l2 = $l1 - l0
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $l2 = $l1 - l0 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $b3 = $l2 cmp 30000L
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $b3 = $l2 cmp 30000L >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : if $b3 >= 0
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : if $b3 >= 0 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : staticinvoke <java.lang.Thread: void sleep(long)>(100L)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : staticinvoke <java.lang.Thread: void sleep(long)>(100L) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : goto [?= $r46 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address")]
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : goto [?= $r46 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address")] >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r46 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r46 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r47 = virtualinvoke $r46.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r47 = virtualinvoke $r46.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r48 = $r47[1]
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r48 = $r47[1] >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $z2 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>("0")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $z2 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>("0") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : if $z2 != 0
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : goto [?= $r31 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address")]
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : goto [?= $r31 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address")] >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r31 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r31 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r32 = virtualinvoke $r31.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r32 = virtualinvoke $r31.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r33 = $r32[1]
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r33 = $r32[1] >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $z1 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("0")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $z1 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("0") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : if $z1 == 0
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r35 = <org.apache.zeppelin.interpreter.MiniHadoopCluster: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r35 = <org.apache.zeppelin.interpreter.MiniHadoopCluster: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r34 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r34 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RM address in configuration is ")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RM address in configuration is ") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r37 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r37 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("yarn.resourcemanager.address") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : interfaceinvoke $r35.<org.slf4j.Logger: void info(java.lang.String)>($r39)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : interfaceinvoke $r35.<org.slf4j.Logger: void info(java.lang.String)>($r39) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r40 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r40 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r40.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : specialinvoke $r40.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r41 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: java.lang.String configPath>
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r41 = r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: java.lang.String configPath> >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/yarn-site.xml")
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/yarn-site.xml") >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: void saveConfig(org.apache.hadoop.conf.Configuration,java.lang.String)>(r2, $r44)
org.apache.zeppelin.interpreter.MiniHadoopCluster.start : virtualinvoke r0.<org.apache.zeppelin.interpreter.MiniHadoopCluster: void saveConfig(org.apache.hadoop.conf.Configuration,java.lang.String)>(r2, $r44) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : $r2 = new org.apache.zeppelin.interpreter.MiniZeppelin
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : $r2 = new org.apache.zeppelin.interpreter.MiniZeppelin >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : specialinvoke $r2.<org.apache.zeppelin.interpreter.MiniZeppelin: void <init>()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : specialinvoke $r2.<org.apache.zeppelin.interpreter.MiniZeppelin: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniZeppelin zeppelin> = $r2
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniZeppelin zeppelin> = $r2 >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : $r3 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniZeppelin zeppelin>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : $r3 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniZeppelin zeppelin> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : virtualinvoke $r3.<org.apache.zeppelin.interpreter.MiniZeppelin: void start()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.setUp : virtualinvoke $r3.<org.apache.zeppelin.interpreter.MiniZeppelin: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r1 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r1 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("..")
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("..") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> = $r1
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> = $r1 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r3 = virtualinvoke $r2.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r3 = virtualinvoke $r2.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r4 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r4 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r3, $r5)
org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r3, $r5) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r7 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r7 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r9 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r9 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("conf_")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("conf_") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r14)
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r14) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> = $r7
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> = $r7 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r15 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r15 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r17 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r17 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r16 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r16 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notebook_")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notebook_") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getSimpleName()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getSimpleName()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, $r22)
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, $r22) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir> = $r15
org.apache.zeppelin.interpreter.MiniZeppelin.start : r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir> = $r15 >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r23 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r23 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : virtualinvoke $r23.<java.io.File: boolean mkdirs()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : virtualinvoke $r23.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r24 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r24 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File notebookDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : virtualinvoke $r24.<java.io.File: boolean mkdirs()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : virtualinvoke $r24.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r26 = <org.apache.zeppelin.interpreter.MiniZeppelin: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r26 = <org.apache.zeppelin.interpreter.MiniZeppelin: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r25 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r25 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZEPPELIN_HOME: ")
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZEPPELIN_HOME: ") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r28 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r28 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r29 = virtualinvoke $r28.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r29 = virtualinvoke $r28.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>($r31)
org.apache.zeppelin.interpreter.MiniZeppelin.start : interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>($r31) >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r32 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r32 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r33 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r33 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File zeppelinHome> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r32.<java.io.File: void <init>(java.io.File,java.lang.String)>($r33, "conf/log4j.properties")
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r32.<java.io.File: void <init>(java.io.File,java.lang.String)>($r33, "conf/log4j.properties") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r34 = new java.io.File
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r34 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : $r35 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir>
org.apache.zeppelin.interpreter.MiniZeppelin.start : $r35 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: java.io.File confDir> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r34.<java.io.File: void <init>(java.io.File,java.lang.String)>($r35, "log4j.properties")
org.apache.zeppelin.interpreter.MiniZeppelin.start : specialinvoke $r34.<java.io.File: void <init>(java.io.File,java.lang.String)>($r35, "log4j.properties") >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r32, $r34)
org.apache.zeppelin.interpreter.MiniZeppelin.start : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r32, $r34) >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.tearDown : $r0 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniZeppelin zeppelin>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.tearDown : $r0 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniZeppelin zeppelin> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.tearDown : if $r0 == null
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.tearDown : if $r0 == null >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.tearDown : $r3 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniZeppelin zeppelin>
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.tearDown : $r3 = <org.apache.zeppelin.interpreter.SparkInterpreterModeTest: org.apache.zeppelin.interpreter.MiniZeppelin zeppelin> >>>>>>>> org.apache.zeppelin.interpreter.SparkInterpreterModeTest.tearDown : virtualinvoke $r3.<org.apache.zeppelin.interpreter.MiniZeppelin: void stop()>()
org.apache.zeppelin.interpreter.SparkInterpreterModeTest.tearDown : virtualinvoke $r3.<org.apache.zeppelin.interpreter.MiniZeppelin: void stop()>() >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.stop : $r1 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.interpreter.MiniZeppelin.stop : $r1 = r0.<org.apache.zeppelin.interpreter.MiniZeppelin: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.interpreter.MiniZeppelin.stop : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void close()>()
org.apache.zeppelin.interpreter.MiniZeppelin.stop : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CLASS>
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CLASS> >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r2 = virtualinvoke $r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r2 = virtualinvoke $r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r3 = class "Lorg/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManager;"
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r3 = class "Lorg/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManager;" >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r2, $r4)
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r2, $r4) >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r6 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL>
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r6 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL> >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r7 = virtualinvoke $r6.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r7 = virtualinvoke $r6.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r7, "1000")
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r7, "1000") >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r9 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD>
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r9 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD> >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r10 = virtualinvoke $r9.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : $r10 = virtualinvoke $r9.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r10, "10000")
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r10, "10000") >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : specialinvoke r0.<org.apache.zeppelin.interpreter.AbstractInterpreterTest: void setUp()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManagerTest.setUp : specialinvoke r0.<org.apache.zeppelin.interpreter.AbstractInterpreterTest: void setUp()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $r10 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.io.File interpreterListFile>
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $r10 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.io.File interpreterListFile> >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $z0 = virtualinvoke $r10.<java.io.File: boolean isFile()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $z0 = virtualinvoke $r10.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if $z0 != 0
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $r11 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.io.File interpreterListFile>
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $r11 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.io.File interpreterListFile> >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r11)
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n")
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n") >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\S+)\\s+(\\S+)\\s+(.*)")
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\S+)\\s+(\\S+)\\s+(.*)") >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i3 = 0
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i3 = 0 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i0 = lengthof r2
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i0 = lengthof r2 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i4 = 0
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i4 = 0 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if i4 >= i0
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if i4 >= i0 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r5 = r2[i4]
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r5 = r2[i4] >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i3 = i3 + 1
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i3 = i3 + 1 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if r5 == null
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if r5 == null >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $i1 = virtualinvoke r5.<java.lang.String: int length()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $i1 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if $i1 == 0
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if $i1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("#")
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("#") >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if $z1 == 0
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r6 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5)
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r6 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $i2 = virtualinvoke r6.<java.util.regex.Matcher: int groupCount()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $i2 = virtualinvoke r6.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if $i2 == 3
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : if $i2 == 3 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : virtualinvoke r6.<java.util.regex.Matcher: boolean find()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : virtualinvoke r6.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r7 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r7 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r8 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r8 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r9 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(3)
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : r9 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(3) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $r13 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.util.List availableInterpreters>
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $r13 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.util.List availableInterpreters> >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $r12 = new org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : $r12 = new org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : specialinvoke $r12.<org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r7, r8, r9)
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : specialinvoke $r12.<org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r7, r8, r9) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r12)
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i4 = i4 + 1
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : i4 = i4 + 1 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : goto [?= (branch)]
org.apache.zeppelin.interpreter.install.InstallInterpreter.readAvailableInterpreters : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r3 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.util.List availableInterpreters>
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r3 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.util.List availableInterpreters> >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : if $z0 == 0
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : r2 = (org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo) $r5
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : r2 = (org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo) $r5 >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r7 = <java.lang.System: java.io.PrintStream out>
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r7 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r8 = r2.<org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo: java.lang.String name>
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r8 = r2.<org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\t")
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\t") >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r11 = r2.<org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo: java.lang.String description>
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r11 = r2.<org.apache.zeppelin.interpreter.install.InstallInterpreter$AvailableInterpreterInfo: java.lang.String description> >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r13)
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r4 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.util.List availableInterpreters>
org.apache.zeppelin.interpreter.install.InstallInterpreter.list : $r4 = r0.<org.apache.zeppelin.interpreter.install.InstallInterpreter: java.util.List availableInterpreters> >>>>>>>> org.apache.zeppelin.interpreter.install.InstallInterpreter.list : return $r4
