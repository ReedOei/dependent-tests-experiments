org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : $z0 = virtualinvoke r0.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if $z0 == 0
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if $z1 == 0
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if r1 == null
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : $i1 = lengthof r1
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : $i1 = lengthof r1 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if $i1 <= 0
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if $i1 <= 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : i0 = lengthof r1
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : i0 = lengthof r1 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : i2 = 0
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : i2 = 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if i2 >= i0
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : if i2 >= i0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : r3 = r1[i2]
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : r3 = r1[i2] >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : staticinvoke <org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest: void delete(java.io.File)>(r3)
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : staticinvoke <org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest: void delete(java.io.File)>(r3) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : virtualinvoke r0.<java.io.File: boolean delete()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : virtualinvoke r0.<java.io.File: boolean delete()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : i2 = i2 + 1
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : i2 = i2 + 1 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : goto [?= (branch)]
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : goto [?= return]
org.apache.zeppelin.notebook.repo.NotebookRepoSyncTest.delete : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r1 = virtualinvoke $r6.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterJson()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r1 = virtualinvoke $r6.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterJson()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r2 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r2 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r8 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r8 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r9, $r8)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r9, $r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r11 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r11 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("InterpreterDir {} doesn\'t exist", $r10)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("InterpreterDir {} doesn\'t exist", $r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterSettingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterSettingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r4 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r4 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r5, $r4)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r5, $r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r67 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r67 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r66 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterSettingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r66 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterSettingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : interfaceinvoke $r67.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Interpreter Setting file {} doesn\'t exist", $r66)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : interfaceinvoke $r67.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Interpreter Setting file {} doesn\'t exist", $r66) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : entermonitor $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5 = new org.apache.zeppelin.interpreter.InterpreterInfoSaving
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5 = new org.apache.zeppelin.interpreter.InterpreterInfoSaving >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterBindings> = $r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterBindings> = $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterSettings> = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterSettings> = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List interpreterRepositories>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List interpreterRepositories> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.List interpreterRepositories> = $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.List interpreterRepositories> = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterSettingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterSettingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: void saveToFile(java.nio.file.Path)>($r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: void saveToFile(java.nio.file.Path)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r2 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r2 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r1, $r2)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r1, $r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r3 = newarray (java.nio.file.attribute.FileAttribute)[0]
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r3 = newarray (java.nio.file.attribute.FileAttribute)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r1, $r3)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r1, $r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r6 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ>
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r6 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r5 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE>
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r5 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : r10 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r6, $r5)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : r10 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r6, $r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>(r1, r10)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>(r1, r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : goto [?= $r12 = <org.apache.zeppelin.interpreter.InterpreterInfoSaving: org.slf4j.Logger LOGGER>]
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : goto [?= $r12 = <org.apache.zeppelin.interpreter.InterpreterInfoSaving: org.slf4j.Logger LOGGER>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r12 = <org.apache.zeppelin.interpreter.InterpreterInfoSaving: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r12 = <org.apache.zeppelin.interpreter.InterpreterInfoSaving: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r13 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r13 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Save Interpreter Settings to ")
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Save Interpreter Settings to ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>($r16)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r17 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.lang.String toJson()>()
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r17 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.lang.String toJson()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.toJson : $r1 = <org.apache.zeppelin.interpreter.InterpreterInfoSaving: com.google.gson.Gson gson>
org.apache.zeppelin.interpreter.InterpreterInfoSaving.toJson : $r1 = <org.apache.zeppelin.interpreter.InterpreterInfoSaving: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.toJson : $r2 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r0)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.toJson : $r2 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.toJson : return $r2
org.apache.zeppelin.interpreter.InterpreterInfoSaving.toJson : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r18 = new java.io.FileOutputStream
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r18 = new java.io.FileOutputStream >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r19 = interfaceinvoke r1.<java.nio.file.Path: java.io.File toFile()>()
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : $r19 = interfaceinvoke r1.<java.nio.file.Path: java.io.File toFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r19)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r19) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>($r17, $r18)
org.apache.zeppelin.interpreter.InterpreterInfoSaving.saveToFile : staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>($r17, $r18) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : exitmonitor $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : exitmonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getMaxRepoNum : return 2
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getMaxRepoNum : return 2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z0 = virtualinvoke $r2.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z0 = virtualinvoke $r2.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z0 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r3 = new java.net.URI
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r3 = new java.net.URI >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : goto [?= $r4 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>]
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : goto [?= $r4 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>] >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r4 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r4 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r5 = virtualinvoke $r4.<java.net.URI: java.lang.String getScheme()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r5 = virtualinvoke $r4.<java.net.URI: java.lang.String getScheme()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $r5 != null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $r5 != null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r12 = new java.io.File
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r12 = new java.io.File >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r14 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r14 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r15 = virtualinvoke $r13.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r15 = virtualinvoke $r13.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r16 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r15)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r16 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r16)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r17 = virtualinvoke $r12.<java.io.File: java.net.URI toURI()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r17 = virtualinvoke $r12.<java.io.File: java.net.URI toURI()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r17
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r17 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r6 = staticinvoke <org.apache.commons.vfs2.VFS: org.apache.commons.vfs2.FileSystemManager getManager()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r6 = staticinvoke <org.apache.commons.vfs2.VFS: org.apache.commons.vfs2.FileSystemManager getManager()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> = $r6
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> = $r6 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r8 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r8 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r7 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r7 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r9 = virtualinvoke $r7.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r9 = virtualinvoke $r7.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r24 = interfaceinvoke $r8.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r9)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r24 = interfaceinvoke $r8.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z1 = interfaceinvoke r24.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z1 = interfaceinvoke r24.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getNotebookDir()>()
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getNotebookDir()>() >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_secondary")
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_secondary") >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r7 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR>
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r7 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR> >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r8 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : $r8 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r8, r1)
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r8, r1) >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : r2 = staticinvoke <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration create()>()
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : r2 = staticinvoke <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration create()>() >>>>>>>> org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : return r2
org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock.modifyNotebookDir : return r2 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepoCount : $r1 = r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: java.util.List repos>
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepoCount : $r1 = r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: java.util.List repos> >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepoCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepoCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepoCount : return $i0
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepoCount : return $i0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: void sync(int,int,org.apache.zeppelin.user.AuthenticationInfo)>(0, 1, r1)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: void sync(int,int,org.apache.zeppelin.user.AuthenticationInfo)>(0, 1, r1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r12 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r12 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Sync started")
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Sync started") >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r2 = staticinvoke <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization getInstance()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r2 = staticinvoke <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization getInstance()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getInstance : $r0 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance>
org.apache.zeppelin.notebook.NotebookAuthorization.getInstance : $r0 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getInstance : if $r0 != null
org.apache.zeppelin.notebook.NotebookAuthorization.getInstance : if $r0 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getInstance : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance>
org.apache.zeppelin.notebook.NotebookAuthorization.getInstance : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getInstance : return $r1
org.apache.zeppelin.notebook.NotebookAuthorization.getInstance : return $r1 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(i0)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(i0) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : if i0 < 0
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : if i0 < 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : $i2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: int getRepoCount()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : $i2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: int getRepoCount()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : if i0 < $i2
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : if i0 < $i2 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : $r8 = r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: java.util.List repos>
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : $r8 = r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: java.util.List repos> >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : $r10 = (org.apache.zeppelin.notebook.repo.NotebookRepo) $r9
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : $r10 = (org.apache.zeppelin.notebook.repo.NotebookRepo) $r9 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : return $r10
org.apache.zeppelin.notebook.repo.NotebookRepoSync.getRepo : return $r10 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(i1)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(i1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r5 = interfaceinvoke r3.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r5 = interfaceinvoke r3.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if r1 == null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $i0 = virtualinvoke $r4.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $i0 = virtualinvoke $r4.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $i0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $z0 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r12 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r12 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : return $r17
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : return $r17 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : r1 = interfaceinvoke $r2.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r3)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : r1 = interfaceinvoke $r2.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z0 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z0 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if r1 != null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if r1 != null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r2 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileType getType()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r2 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileType getType()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r3 = <org.apache.commons.vfs2.FileType: org.apache.commons.vfs2.FileType FOLDER>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r3 = <org.apache.commons.vfs2.FileType: org.apache.commons.vfs2.FileType FOLDER> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if $r2 != $r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if $r2 != $r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : return 1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : return 1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : return r1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : return r1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r3 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject[] getChildren()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r3 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject[] getChildren()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $r9 = new java.util.LinkedList
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $r9 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : specialinvoke $r9.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : specialinvoke $r9.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i0 = lengthof r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i0 = lengthof r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i1 = 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i1 = 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if i1 >= i0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if i1 >= i0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : return $r9
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : return $r9 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r6 = virtualinvoke r2.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.List filterByUser(java.util.List,org.apache.zeppelin.user.AuthenticationInfo)>(r5, r1)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r6 = virtualinvoke r2.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.List filterByUser(java.util.List,org.apache.zeppelin.user.AuthenticationInfo)>(r5, r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : r3 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : r3 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : if r2 == null
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : if r2 == null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r8 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r8 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r8)
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r8) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r4 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r4 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r5 = new org.apache.zeppelin.notebook.NotebookAuthorization$1
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r5 = new org.apache.zeppelin.notebook.NotebookAuthorization$1 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : specialinvoke $r5.<org.apache.zeppelin.notebook.NotebookAuthorization$1: void <init>(org.apache.zeppelin.notebook.NotebookAuthorization,java.util.Set)>(r0, r3)
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : specialinvoke $r5.<org.apache.zeppelin.notebook.NotebookAuthorization$1: void <init>(org.apache.zeppelin.notebook.NotebookAuthorization,java.util.Set)>(r0, r3) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r6 = virtualinvoke $r4.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r5)
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r6 = virtualinvoke $r4.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r5) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r7 = virtualinvoke $r6.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableList toList()>()
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : $r7 = virtualinvoke $r6.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableList toList()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : return $r7
org.apache.zeppelin.notebook.NotebookAuthorization.filterByUser : return $r7 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r7 = interfaceinvoke r4.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r7 = interfaceinvoke r4.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r8 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: java.util.Map notesCheckDiff(java.util.List,org.apache.zeppelin.notebook.repo.NotebookRepo,java.util.List,org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.user.AuthenticationInfo)>(r6, r3, r7, r4, r1)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r8 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: java.util.Map notesCheckDiff(java.util.List,org.apache.zeppelin.notebook.repo.NotebookRepo,java.util.List,org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.user.AuthenticationInfo)>(r6, r3, r7, r4, r1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $r12 = new java.util.ArrayList
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $r12 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : specialinvoke $r12.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : specialinvoke $r12.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $r13 = new java.util.ArrayList
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $r13 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : specialinvoke $r13.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : specialinvoke $r13.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $r14 = new java.util.ArrayList
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $r14 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : specialinvoke $r14.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : specialinvoke $r14.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : r57 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : r57 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $z9 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $z9 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : if $z9 == 0
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : if $z9 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : r60 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : r60 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $z0 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $z0 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : if $z0 == 0
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $r15 = new java.util.HashMap
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : $r15 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : specialinvoke $r15.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : specialinvoke $r15.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushNoteIds", $r12)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushNoteIds", $r12) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pullNoteIds", $r13)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pullNoteIds", $r13) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("delDstNoteIds", $r14)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("delDstNoteIds", $r14) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : return $r15
org.apache.zeppelin.notebook.repo.NotebookRepoSync.notesCheckDiff : return $r15 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r13 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>("pushNoteIds")
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r13 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>("pushNoteIds") >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r9 = (java.util.List) $r13
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r9 = (java.util.List) $r13 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r14 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>("pullNoteIds")
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r14 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>("pullNoteIds") >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r10 = (java.util.List) $r14
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r10 = (java.util.List) $r14 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r15 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>("delDstNoteIds")
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r15 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>("delDstNoteIds") >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r11 = (java.util.List) $r15
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : r11 = (java.util.List) $r15 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $z0 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $z0 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : if $z0 != 0
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r16 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r16 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>("Nothing to push")
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>("Nothing to push") >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $z1 = interfaceinvoke r10.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $z1 = interfaceinvoke r10.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : if $z1 != 0
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r17 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r17 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String)>("Nothing to pull")
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String)>("Nothing to pull") >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $z2 = interfaceinvoke r11.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $z2 = interfaceinvoke r11.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : if $z2 != 0
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : if $z2 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r18 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r18 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>("Nothing to delete from dest")
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>("Nothing to delete from dest") >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r19 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : $r19 = <org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r19.<org.slf4j.Logger: void info(java.lang.String)>("Sync ended")
org.apache.zeppelin.notebook.repo.NotebookRepoSync.sync : interfaceinvoke $r19.<org.slf4j.Logger: void info(java.lang.String)>("Sync ended") >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : $r3 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance>
org.apache.zeppelin.notebook.NotebookAuthorization.init : $r3 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : if $r3 != null
org.apache.zeppelin.notebook.NotebookAuthorization.init : if $r3 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : $r12 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance>
org.apache.zeppelin.notebook.NotebookAuthorization.init : $r12 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : return $r12
org.apache.zeppelin.notebook.NotebookAuthorization.init : return $r12 >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo>
org.apache.zeppelin.notebook.Notebook.loadAllNotes : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo> >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : r2 = interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.Notebook.loadAllNotes : r2 = interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.list : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(0)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.list : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.list : $r3 = interfaceinvoke $r2.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.list : $r3 = interfaceinvoke $r2.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.list : return $r3
org.apache.zeppelin.notebook.repo.NotebookRepoSync.list : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.loadAllNotes : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.loadAllNotes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.loadAllNotes : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.list : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(i0)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.list : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(i0) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Notebook.createNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.Notebook.createNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING>
org.apache.zeppelin.notebook.Notebook.createNote : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $z0 = virtualinvoke $r4.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r3)
org.apache.zeppelin.notebook.Notebook.createNote : $z0 = virtualinvoke $r4.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.createNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r6 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.createNote : $r6 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r7 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettingIds()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r7 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettingIds()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : $r4 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : $r4 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : specialinvoke $r4.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : specialinvoke $r4.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r5 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r7)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r8 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$7
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r8 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager$7: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager$7: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r5, $r8)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r5, $r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return $r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : return $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettingIds : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note createNote(java.util.List,org.apache.zeppelin.user.AuthenticationInfo)>($r7, r1)
org.apache.zeppelin.notebook.Notebook.createNote : r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note createNote(java.util.List,org.apache.zeppelin.user.AuthenticationInfo)>($r7, r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r6 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.notebook.Notebook.createNote : $r6 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r12 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo>
org.apache.zeppelin.notebook.Notebook.createNote : $r12 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterFactory replFactory>
org.apache.zeppelin.notebook.Notebook.createNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterFactory replFactory> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r10 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.createNote : $r10 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r9 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Notebook.createNote : $r9 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r7 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.user.Credentials credentials>
org.apache.zeppelin.notebook.Notebook.createNote : $r7 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.user.Credentials credentials> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke $r6.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r12, $r11, $r10, $r9, $r8, $r7, r0)
org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke $r6.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r12, $r11, $r10, $r9, $r8, $r7, r0) >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders>
org.apache.zeppelin.notebook.Notebook.createNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r13)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r13) >>>>>>>> org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1
org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.createNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : entermonitor $r14
org.apache.zeppelin.notebook.Notebook.createNote : entermonitor $r14 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r15 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.createNote : $r15 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r16 = virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r16 = virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r6)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r6) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : exitmonitor $r14
org.apache.zeppelin.notebook.Notebook.createNote : exitmonitor $r14 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : goto [?= (branch)]
org.apache.zeppelin.notebook.Notebook.createNote : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : if r1 == null
org.apache.zeppelin.notebook.Notebook.createNote : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r21 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r21 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r22 = virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r22 = virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: void bindInterpretersToNote(java.lang.String,java.lang.String,java.util.List)>($r21, $r22, r1)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: void bindInterpretersToNote(java.lang.String,java.lang.String,java.util.List)>($r21, $r22, r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note getNote(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note getNote(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.getNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : entermonitor $r4
org.apache.zeppelin.notebook.Notebook.getNote : entermonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.getNote : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Notebook.getNote : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r7 = (org.apache.zeppelin.notebook.Note) $r6
org.apache.zeppelin.notebook.Notebook.getNote : $r7 = (org.apache.zeppelin.notebook.Note) $r6 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : exitmonitor $r4
org.apache.zeppelin.notebook.Notebook.getNote : exitmonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : return $r7
org.apache.zeppelin.notebook.Notebook.getNote : return $r7 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if r4 == null
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if r4 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r5 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r5 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r8 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r8 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : specialinvoke $r8.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : specialinvoke $r8.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : entermonitor $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : entermonitor $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r4 = (java.util.List) $r11
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r4 = (java.util.List) $r11 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if r4 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : exitmonitor $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : exitmonitor $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : goto [?= return $r8]
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : goto [?= return $r8] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : return $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : return $r8 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r9 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r9 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r10 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r10 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreterBinding(java.lang.String,java.lang.String,java.util.List)>(r1, $r10, r3)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreterBinding(java.lang.String,java.lang.String,java.util.List)>(r1, $r10, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r9 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r9 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : specialinvoke $r9.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : specialinvoke $r9.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : entermonitor $r10
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : entermonitor $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : r6 = (java.util.List) $r12
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : r6 = (java.util.List) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : if r6 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : if r6 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : r24 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : r24 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $z5 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $z5 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : if $z5 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : exitmonitor $r10
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : exitmonitor $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r18 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization>
org.apache.zeppelin.notebook.Notebook.createNote : $r18 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r19 = virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r19 = virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r18.<org.apache.zeppelin.notebook.NotebookAuthorization: void setNewNotePermissions(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r19, r2)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r18.<org.apache.zeppelin.notebook.NotebookAuthorization: void setNewNotePermissions(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r19, r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $z0 = staticinvoke <org.apache.zeppelin.user.AuthenticationInfo: boolean isAnonymous(org.apache.zeppelin.user.AuthenticationInfo)>(r2)
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $z0 = staticinvoke <org.apache.zeppelin.user.AuthenticationInfo: boolean isAnonymous(org.apache.zeppelin.user.AuthenticationInfo)>(r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : if $z0 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r20 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r20 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r20.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>($r6)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r20.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>($r6) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: void persist(org.apache.zeppelin.user.AuthenticationInfo)>(r2)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: void persist(org.apache.zeppelin.user.AuthenticationInfo)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Note.persist : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Note.persist : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void stopDelayedPersistTimer()>()
org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void stopDelayedPersistTimer()>() >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : entermonitor r0
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : entermonitor r0 >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist>
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist> >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : if $r4 != null
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : if $r4 != null >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : exitmonitor r0
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : exitmonitor r0 >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r3 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Note.persist : $r3 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void snapshotAngularObjectRegistry(java.lang.String)>($r3)
org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void snapshotAngularObjectRegistry(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r7 = new java.util.HashMap
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r7 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r7
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r7 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r2 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r9)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r2 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if r2 == null
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if r2 == null >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $i0 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $i0 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $i0 != 0
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index>
org.apache.zeppelin.notebook.Note.persist : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> >>>>>>>> org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r4.<org.apache.zeppelin.search.SearchService: void updateIndexDoc(org.apache.zeppelin.notebook.Note)>(r0)
org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r4.<org.apache.zeppelin.search.SearchService: void updateIndexDoc(org.apache.zeppelin.notebook.Note)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo>
org.apache.zeppelin.notebook.Note.persist : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo> >>>>>>>> org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r0, r1)
org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r0, r1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : $r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(0)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : $r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : interfaceinvoke $r4.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r1, r2)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : interfaceinvoke $r4.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r1, r2) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r9 = <org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r9 = <org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Saving note:")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Saving note:") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r11 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r11 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r13)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String toJson()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String toJson()>() >>>>>>>> org.apache.zeppelin.notebook.Note.toJson : $r1 = <org.apache.zeppelin.notebook.Note: com.google.gson.Gson gson>
org.apache.zeppelin.notebook.Note.toJson : $r1 = <org.apache.zeppelin.notebook.Note: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.notebook.Note.toJson : $r2 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r0)
org.apache.zeppelin.notebook.Note.toJson : $r2 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r0) >>>>>>>> org.apache.zeppelin.notebook.ApplicationState$Status.values : $r0 = <org.apache.zeppelin.notebook.ApplicationState$Status: org.apache.zeppelin.notebook.ApplicationState$Status[] $VALUES>
org.apache.zeppelin.notebook.ApplicationState$Status.values : $r0 = <org.apache.zeppelin.notebook.ApplicationState$Status: org.apache.zeppelin.notebook.ApplicationState$Status[] $VALUES> >>>>>>>> org.apache.zeppelin.notebook.ApplicationState$Status.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.zeppelin.notebook.ApplicationState$Status.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.zeppelin.notebook.ApplicationState$Status.values : $r2 = (org.apache.zeppelin.notebook.ApplicationState$Status[]) $r1
org.apache.zeppelin.notebook.ApplicationState$Status.values : $r2 = (org.apache.zeppelin.notebook.ApplicationState$Status[]) $r1 >>>>>>>> org.apache.zeppelin.notebook.ApplicationState$Status.values : return $r2
org.apache.zeppelin.notebook.ApplicationState$Status.values : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.toJson : return $r2
org.apache.zeppelin.notebook.Note.toJson : return $r2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r14 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r14 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r15 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r15 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r5 = interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>($r14, $r15)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r5 = interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>($r14, $r15) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z0 = interfaceinvoke r5.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z0 = interfaceinvoke r5.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r5.<org.apache.commons.vfs2.FileObject: void createFolder()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r5.<org.apache.commons.vfs2.FileObject: void createFolder()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r5)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r5) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r16 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r16 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r6 = interfaceinvoke r5.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(".note.json", $r16)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r6 = interfaceinvoke r5.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(".note.json", $r16) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r17 = interfaceinvoke r6.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileContent getContent()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r17 = interfaceinvoke r6.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileContent getContent()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r7 = interfaceinvoke $r17.<org.apache.commons.vfs2.FileContent: java.io.OutputStream getOutputStream(boolean)>(0)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r7 = interfaceinvoke $r17.<org.apache.commons.vfs2.FileContent: java.io.OutputStream getOutputStream(boolean)>(0) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r19 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r19 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r18 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ENCODING>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r18 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ENCODING> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r20 = virtualinvoke $r19.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r18)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r20 = virtualinvoke $r19.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r18) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r21 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>($r20)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r21 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r7.<java.io.OutputStream: void write(byte[])>($r21)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r7.<java.io.OutputStream: void write(byte[])>($r21) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r7.<java.io.OutputStream: void close()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r7.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r22 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r22 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r23 = interfaceinvoke r5.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>("note.json", $r22)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r23 = interfaceinvoke r5.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>("note.json", $r22) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r6.<org.apache.commons.vfs2.FileObject: void moveTo(org.apache.commons.vfs2.FileObject)>($r23)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r6.<org.apache.commons.vfs2.FileObject: void moveTo(org.apache.commons.vfs2.FileObject)>($r23) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : $i0 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: int getRepoCount()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : $i0 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: int getRepoCount()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : if $i0 <= 1
org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : if $i0 <= 1 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : $r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(1)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : $r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: org.apache.zeppelin.notebook.repo.NotebookRepo getRepo(int)>(1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r1, r2)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r1, r2) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : goto [?= return]
org.apache.zeppelin.notebook.repo.NotebookRepoSync.save : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteCreateEvent(org.apache.zeppelin.notebook.Note)>($r6)
org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteCreateEvent(org.apache.zeppelin.notebook.Note)>($r6) >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners>
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners> >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : return $r6
org.apache.zeppelin.notebook.Notebook.createNote : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : goto [?= $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>]
org.apache.zeppelin.notebook.Notebook.createNote : goto [?= $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r5.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r8)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r5.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r8) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : return r8
org.apache.zeppelin.notebook.Notebook.createNote : return r8 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r6 = r3[i1]
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r6 = r3[i1] >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $r10 = interfaceinvoke r6.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileName getName()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $r10 = interfaceinvoke r6.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileName getName()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r7 = interfaceinvoke $r10.<org.apache.commons.vfs2.FileName: java.lang.String getBaseName()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r7 = interfaceinvoke $r10.<org.apache.commons.vfs2.FileName: java.lang.String getBaseName()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z0 = interfaceinvoke r6.<org.apache.commons.vfs2.FileObject: boolean isHidden()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z0 = interfaceinvoke r6.<org.apache.commons.vfs2.FileObject: boolean isHidden()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(".")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(".") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z2 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("#")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z2 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("#") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z2 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z2 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("~")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("~") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z3 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z3 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z4 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r6)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $z4 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r6) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z4 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if $z4 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r19 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.notebook.NoteInfo getNoteInfo(org.apache.commons.vfs2.FileObject)>(r6)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r19 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.notebook.NoteInfo getNoteInfo(org.apache.commons.vfs2.FileObject)>(r6) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNoteInfo : r2 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.notebook.Note getNote(org.apache.commons.vfs2.FileObject)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNoteInfo : r2 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.notebook.Note getNote(org.apache.commons.vfs2.FileObject)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $z0 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $z0 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r12 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r12 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r2 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>("note.json", $r12)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r2 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>("note.json", $r12) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $z1 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $z1 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r3 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileContent getContent()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r3 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileContent getContent()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r4 = interfaceinvoke r3.<org.apache.commons.vfs2.FileContent: java.io.InputStream getInputStream()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r4 = interfaceinvoke r3.<org.apache.commons.vfs2.FileContent: java.io.InputStream getInputStream()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r14 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r14 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ENCODING>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ENCODING> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r15 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r15 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r5 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>(r4, $r15)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r5 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>(r4, $r15) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : virtualinvoke r4.<java.io.InputStream: void close()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : virtualinvoke r4.<java.io.InputStream: void close()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r6 = staticinvoke <org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Note fromJson(java.lang.String)>(r5)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r6 = staticinvoke <org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Note fromJson(java.lang.String)>(r5) >>>>>>>> org.apache.zeppelin.notebook.Note.fromJson : $r2 = <org.apache.zeppelin.notebook.Note: com.google.gson.Gson gson>
org.apache.zeppelin.notebook.Note.fromJson : $r2 = <org.apache.zeppelin.notebook.Note: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.notebook.Note.fromJson : $r3 = virtualinvoke $r2.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r0, class "Lorg/apache/zeppelin/notebook/Note;")
org.apache.zeppelin.notebook.Note.fromJson : $r3 = virtualinvoke $r2.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r0, class "Lorg/apache/zeppelin/notebook/Note;") >>>>>>>> org.apache.zeppelin.notebook.Note.fromJson : r1 = (org.apache.zeppelin.notebook.Note) $r3
org.apache.zeppelin.notebook.Note.fromJson : r1 = (org.apache.zeppelin.notebook.Note) $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.fromJson : staticinvoke <org.apache.zeppelin.notebook.Note: void convertOldInput(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.Note.fromJson : staticinvoke <org.apache.zeppelin.notebook.Note: void convertOldInput(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.convertOldInput : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.convertOldInput : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.convertOldInput : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.convertOldInput : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.convertOldInput : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.convertOldInput : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.convertOldInput : if $z0 == 0
org.apache.zeppelin.notebook.Note.convertOldInput : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.fromJson : virtualinvoke r1.<org.apache.zeppelin.notebook.Note: void resetRuntimeInfos()>()
org.apache.zeppelin.notebook.Note.fromJson : virtualinvoke r1.<org.apache.zeppelin.notebook.Note: void resetRuntimeInfos()>() >>>>>>>> org.apache.zeppelin.notebook.Note.resetRuntimeInfos : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.resetRuntimeInfos : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.resetRuntimeInfos : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.resetRuntimeInfos : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.resetRuntimeInfos : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.resetRuntimeInfos : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.resetRuntimeInfos : if $z0 == 0
org.apache.zeppelin.notebook.Note.resetRuntimeInfos : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.fromJson : return r1
org.apache.zeppelin.notebook.Note.fromJson : return r1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r16 = virtualinvoke r6.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $r16 = virtualinvoke r6.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5)
org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : return $r4
org.apache.zeppelin.notebook.Note.getParagraphs : return $r4 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r7 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : r7 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : if $z2 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : return r6
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNote : return r6 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNoteInfo : $r3 = new org.apache.zeppelin.notebook.NoteInfo
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNoteInfo : $r3 = new org.apache.zeppelin.notebook.NoteInfo >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNoteInfo : specialinvoke $r3.<org.apache.zeppelin.notebook.NoteInfo: void <init>(org.apache.zeppelin.notebook.Note)>(r2)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNoteInfo : specialinvoke $r3.<org.apache.zeppelin.notebook.NoteInfo: void <init>(org.apache.zeppelin.notebook.Note)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getName : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2
org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r2
org.apache.zeppelin.notebook.Note.getConfig : return $r2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNoteInfo : return $r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNoteInfo : return $r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if r19 == null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if r19 == null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r19)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r19) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : goto [?= i1 = i1 + 1]
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : goto [?= i1 = i1 + 1] >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i1 = i1 + 1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : goto [?= (branch)]
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.NoteInfo.getId : $r1 = r0.<org.apache.zeppelin.notebook.NoteInfo: java.lang.String id>
org.apache.zeppelin.notebook.NoteInfo.getId : $r1 = r0.<org.apache.zeppelin.notebook.NoteInfo: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.NoteInfo.getId : return $r1
org.apache.zeppelin.notebook.NoteInfo.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Notebook.removeNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r7 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.removeNote : $r7 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : entermonitor $r7
org.apache.zeppelin.notebook.Notebook.removeNote : entermonitor $r7 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.removeNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Notebook.removeNote : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r3 = (org.apache.zeppelin.notebook.Note) $r9
org.apache.zeppelin.notebook.Notebook.removeNote : r3 = (org.apache.zeppelin.notebook.Note) $r9 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r10 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders>
org.apache.zeppelin.notebook.Notebook.removeNote : $r10 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r10.<org.apache.zeppelin.notebook.FolderView: void removeNote(org.apache.zeppelin.notebook.Note)>(r3)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r10.<org.apache.zeppelin.notebook.FolderView: void removeNote(org.apache.zeppelin.notebook.Note)>(r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.removeNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.removeNote : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.hashCode : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r1 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r1 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.hashCode : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i4 = interfaceinvoke $r10.<java.util.List: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i4 = interfaceinvoke $r10.<java.util.List: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= $i0 = 31 * $i4]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= $i0 = 31 * $i4] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i0 = 31 * $i4
org.apache.zeppelin.notebook.Note.hashCode : $i0 = 31 * $i4 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.hashCode : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r2 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r2 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.hashCode : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i6 = virtualinvoke $r9.<java.lang.String: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i6 = virtualinvoke $r9.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i7 = $i0 + $i6]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i7 = $i0 + $i6] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i7 = $i0 + $i6
org.apache.zeppelin.notebook.Note.hashCode : i7 = $i0 + $i6 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i1 = 31 * i7
org.apache.zeppelin.notebook.Note.hashCode : $i1 = 31 * i7 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.hashCode : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r3 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r3 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.hashCode : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i8 = interfaceinvoke $r8.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i8 = interfaceinvoke $r8.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i9 = $i1 + $i8]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i9 = $i1 + $i8] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i9 = $i1 + $i8
org.apache.zeppelin.notebook.Note.hashCode : i9 = $i1 + $i8 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i2 = 31 * i9
org.apache.zeppelin.notebook.Note.hashCode : $i2 = 31 * i9 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.hashCode : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r4 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r4 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.hashCode : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i10 = interfaceinvoke $r7.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i10 = interfaceinvoke $r7.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i11 = $i2 + $i10]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i11 = $i2 + $i10] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i11 = $i2 + $i10
org.apache.zeppelin.notebook.Note.hashCode : i11 = $i2 + $i10 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i3 = 31 * i11
org.apache.zeppelin.notebook.Note.hashCode : $i3 = 31 * i11 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.hashCode : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r5 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.hashCode : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i12 = interfaceinvoke $r6.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i12 = interfaceinvoke $r6.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i13 = $i3 + $i12]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i13 = $i3 + $i12] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i13 = $i3 + $i12
org.apache.zeppelin.notebook.Note.hashCode : i13 = $i3 + $i12 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : return i13
org.apache.zeppelin.notebook.Note.hashCode : return i13 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : if $z0 != 0
org.apache.zeppelin.notebook.FolderView.removeNote : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : exitmonitor $r7
org.apache.zeppelin.notebook.Notebook.removeNote : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>]
org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>] >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.removeNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r12 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r12 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeNoteInterpreterSettingBinding(java.lang.String,java.lang.String)>($r12, r1)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeNoteInterpreterSettingBinding(java.lang.String,java.lang.String)>($r12, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r3 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r3 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreterBinding(java.lang.String,java.lang.String,java.util.List)>(r1, r2, $r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreterBinding(java.lang.String,java.lang.String,java.util.List)>(r1, r2, $r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : r22 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : r22 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : if $z2 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterBinding : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>]
org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>] >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.removeNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : interfaceinvoke $r13.<org.apache.zeppelin.search.SearchService: void deleteIndexDocs(org.apache.zeppelin.notebook.Note)>(r3)
org.apache.zeppelin.notebook.Notebook.removeNote : interfaceinvoke $r13.<org.apache.zeppelin.search.SearchService: void deleteIndexDocs(org.apache.zeppelin.notebook.Note)>(r3) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization>
org.apache.zeppelin.notebook.Notebook.removeNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r14.<org.apache.zeppelin.notebook.NotebookAuthorization: void removeNote(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r14.<org.apache.zeppelin.notebook.NotebookAuthorization: void removeNote(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>()
org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : entermonitor $r2
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : entermonitor $r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r3 = new org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r3 = new org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r3.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r3.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r4 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r4 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r3.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: java.util.Map authInfo> = $r4
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r3.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: java.util.Map authInfo> = $r4 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r5 = <org.apache.zeppelin.notebook.NotebookAuthorization: com.google.gson.Gson gson>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r5 = <org.apache.zeppelin.notebook.NotebookAuthorization: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r1 = virtualinvoke $r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>($r3)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r1 = virtualinvoke $r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>($r3) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : exitmonitor $r2
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : exitmonitor $r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : goto [?= $r6 = new java.io.File]
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : goto [?= $r6 = new java.io.File] >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r6 = new java.io.File
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r6 = new java.io.File >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r7 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.lang.String filePath>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r7 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.lang.String filePath> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : if $z0 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : virtualinvoke $r6.<java.io.File: boolean createNewFile()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : virtualinvoke $r6.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r13 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r13 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r12 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r12 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error saving notebook authorization file: ")
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error saving notebook authorization file: ") >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r15 = virtualinvoke $r11.<java.io.IOException: java.lang.String getMessage()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r15 = virtualinvoke $r11.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String)>($r17)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String)>($r17) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r15 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.removeNote : $r15 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r16 = virtualinvoke $r15.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r16 = virtualinvoke $r15.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r43 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.removeNote : r43 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $z5 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $z5 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : if $z5 == 0
org.apache.zeppelin.notebook.Notebook.removeNote : if $z5 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r17 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.removeNote : $r17 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r17.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeResourcesBelongsToNote(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r17.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeResourcesBelongsToNote(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToNote : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeResourcesBelongsToParagraph(java.lang.String,java.lang.String)>(r1, null)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToNote : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeResourcesBelongsToParagraph(java.lang.String,java.lang.String)>(r1, null) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToParagraph : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getAllInterpreterGroup()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToParagraph : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getAllInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : $r4 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : $r4 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : specialinvoke $r4.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : specialinvoke $r4.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : return $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.getAllInterpreterGroup : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToParagraph : r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToParagraph : r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToParagraph : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToParagraph : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToParagraph : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeResourcesBelongsToParagraph : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteRemoveEvent(org.apache.zeppelin.notebook.Note)>(r3)
org.apache.zeppelin.notebook.Notebook.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteRemoveEvent(org.apache.zeppelin.notebook.Note)>(r3) >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners>
org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners> >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Note: void unpersist(org.apache.zeppelin.user.AuthenticationInfo)>(r2)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Note: void unpersist(org.apache.zeppelin.user.AuthenticationInfo)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Note.unpersist : $r2 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo>
org.apache.zeppelin.notebook.Note.unpersist : $r2 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo> >>>>>>>> org.apache.zeppelin.notebook.Note.unpersist : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.unpersist : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.unpersist : interfaceinvoke $r2.<org.apache.zeppelin.notebook.repo.NotebookRepo: void remove(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r3, r1)
org.apache.zeppelin.notebook.Note.unpersist : interfaceinvoke $r2.<org.apache.zeppelin.notebook.repo.NotebookRepo: void remove(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r3, r1) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : $r5 = r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: java.util.List repos>
org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : $r5 = r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSync: java.util.List repos> >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : if $z0 == 0
org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : r4 = (org.apache.zeppelin.notebook.repo.NotebookRepo) $r6
org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : r4 = (org.apache.zeppelin.notebook.repo.NotebookRepo) $r6 >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : interfaceinvoke r4.<org.apache.zeppelin.notebook.repo.NotebookRepo: void remove(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>(r1, r2)
org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : interfaceinvoke r4.<org.apache.zeppelin.notebook.repo.NotebookRepo: void remove(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>(r1, r2) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r5 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r5 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : r3 = interfaceinvoke $r5.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r6)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : r3 = interfaceinvoke $r5.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r7 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r7 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : r4 = interfaceinvoke r3.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(r1, $r7)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : r4 = interfaceinvoke r3.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(r1, $r7) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $z0 = interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $z0 = interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r4)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r4) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r8 = <org.apache.commons.vfs2.Selectors: org.apache.commons.vfs2.FileSelector SELECT_SELF_AND_CHILDREN>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r8 = <org.apache.commons.vfs2.Selectors: org.apache.commons.vfs2.FileSelector SELECT_SELF_AND_CHILDREN> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: int delete(org.apache.commons.vfs2.FileSelector)>($r8)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: int delete(org.apache.commons.vfs2.FileSelector)>($r8) >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.repo.NotebookRepoSync.remove : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= return]
