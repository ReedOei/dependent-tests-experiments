org.apache.zeppelin.interpreter.InterpreterSetting.close : $r4 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterSetting: ")
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterSetting: ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.InterpreterSetting.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : r1 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : r1 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : r2 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r12
org.apache.zeppelin.interpreter.InterpreterSetting.close : r2 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : virtualinvoke r2.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : virtualinvoke r2.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterGroup: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterGroup: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = (java.lang.String) $r11
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = (java.lang.String) $r11 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close Session: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close Session: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for interpreter setting: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for interpreter setting: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r13 = (java.util.Collection) $r12
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r13 = (java.util.Collection) $r12 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.util.Collection)>($r13)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.util.Collection)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if r1 != null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if r1 != null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r5
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r5 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r6)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r8 = new org.apache.zeppelin.scheduler.RemoteScheduler
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r8 = new org.apache.zeppelin.scheduler.RemoteScheduler >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r9 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r10 = class "Lorg/apache/zeppelin/interpreter/remote/RemoteInterpreter;"
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r10 = class "Lorg/apache/zeppelin/interpreter/remote/RemoteInterpreter;" >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r17 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r17 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r18 = virtualinvoke $r17.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService getExecutor()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r18 = virtualinvoke $r17.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService getExecutor()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r19 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r19 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r20 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r20 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r8.<org.apache.zeppelin.scheduler.RemoteScheduler: void <init>(java.lang.String,java.util.concurrent.ExecutorService,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreter,org.apache.zeppelin.scheduler.SchedulerListener,int)>($r16, $r18, $r19, r0, $r20, i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r8.<org.apache.zeppelin.scheduler.RemoteScheduler: void <init>(java.lang.String,java.util.concurrent.ExecutorService,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreter,org.apache.zeppelin.scheduler.SchedulerListener,int)>($r16, $r18, $r19, r0, $r20, i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r21 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r21 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r22 = virtualinvoke $r21.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetScheduler(org.apache.zeppelin.scheduler.Scheduler)>($r8)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r22 = virtualinvoke $r21.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetScheduler(org.apache.zeppelin.scheduler.Scheduler)>($r8) >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name>
org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getName : return $r1
org.apache.zeppelin.scheduler.RemoteScheduler.getName : return $r1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z2 != 0
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z2 != 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r5 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r5 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r5.<java.lang.Object: void wait(long)>(500L)
org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r5.<java.lang.Object: void wait(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : return $r22
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : return $r22 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsRunning()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsRunning()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r6 = new java.util.LinkedList
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r6 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : specialinvoke $r6.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : specialinvoke $r6.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : entermonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : entermonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : if $z0 == 0
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : if $z0 == 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : exitmonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : goto [?= return $r6]
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : goto [?= return $r6] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : return $r6
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r35 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r35 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsWaiting()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsWaiting()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r6 = new java.util.LinkedList
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r6 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : specialinvoke $r6.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : specialinvoke $r6.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : entermonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : entermonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : if $z0 == 0
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : if $z0 == 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : exitmonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : goto [?= return $r6]
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : goto [?= return $r6] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : return $r6
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r37 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r37 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r3 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r3 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close is called when RemoterInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close is called when RemoterInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= (branch)]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r8.<org.apache.zeppelin.scheduler.SchedulerFactory: void removeScheduler(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r8.<org.apache.zeppelin.scheduler.SchedulerFactory: void removeScheduler(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1
org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : entermonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.stop : entermonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : virtualinvoke $r4.<java.lang.Object: void notify()>()
org.apache.zeppelin.scheduler.RemoteScheduler.stop : virtualinvoke $r4.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor $r3]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor $r3] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : goto [?= return]
org.apache.zeppelin.scheduler.RemoteScheduler.stop : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r14 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r14 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke $r14.<java.util.Map: boolean isEmpty()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke $r14.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r15 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r15 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r15 == null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r15 == null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r17 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r17 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove this InterpreterGroup: {} as all the sessions are closed", $r16)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove this InterpreterGroup: {} as all the sessions are closed", $r16) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r19 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r19 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r18 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r18 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r19.<org.apache.zeppelin.interpreter.InterpreterSetting: void removeInterpreterGroup(java.lang.String)>($r18)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r19.<org.apache.zeppelin.interpreter.InterpreterSetting: void removeInterpreterGroup(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r20 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r20 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r20 == null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r20 == null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r21 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r21 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>("Kill RemoteInterpreterProcess")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>("Kill RemoteInterpreterProcess") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r22 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r22 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void stop()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void stop()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r2 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller getRemoteInterpreterEventPoller()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r2 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller getRemoteInterpreterEventPoller()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : virtualinvoke $r2.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: void shutdown()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : virtualinvoke $r2.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: void shutdown()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $z0 = virtualinvoke $r3.<org.apache.thrift.server.TServer: boolean isServing()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $z0 = virtualinvoke $r3.<org.apache.thrift.server.TServer: boolean isServing()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $z1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: boolean isRunning()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $z1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: boolean isRunning()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : return $z0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : if $z1 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.ExecuteWatchdog watchdog> = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.ExecuteWatchdog watchdog> = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r12 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r12 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Remote process terminated")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Remote process terminated") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSetting.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : interfaceinvoke $r11.<java.util.Map: void clear()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : interfaceinvoke $r11.<java.util.Map: void clear()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map runtimeInfosToBeCleared> = null
org.apache.zeppelin.interpreter.InterpreterSetting.close : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map runtimeInfosToBeCleared> = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map infos> = null
org.apache.zeppelin.interpreter.InterpreterSetting.close : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map infos> = null >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/notebook/repo/NotebookRepo;")
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/notebook/repo/NotebookRepo;") >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r1 = (org.apache.zeppelin.notebook.repo.NotebookRepo) $r0
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r1 = (org.apache.zeppelin.notebook.repo.NotebookRepo) $r0 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepoMock> = $r1
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepoMock> = $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/InterpreterFactory;")
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/InterpreterFactory;") >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r3 = (org.apache.zeppelin.interpreter.InterpreterFactory) $r2
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r3 = (org.apache.zeppelin.interpreter.InterpreterFactory) $r2 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> = $r3
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> = $r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/InterpreterSettingManager;")
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/zeppelin/interpreter/InterpreterSettingManager;") >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r5 = (org.apache.zeppelin.interpreter.InterpreterSettingManager) $r4
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : $r5 = (org.apache.zeppelin.interpreter.InterpreterSettingManager) $r4 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> = $r5
org.apache.zeppelin.search.LuceneSearchTest.beforeStartUp : <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> = $r5 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : r3 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Note newNote(java.lang.String)>(r1)
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : r3 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Note newNote(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r3 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r3 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r7 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepoMock>
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r7 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepoMock> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r6 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r6 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r5 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r5 = <org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : $r4 = r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.search.LuceneSearchTest.newNote : $r4 = r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : specialinvoke $r3.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r7, $r6, $r5, null, $r4, null, null)
org.apache.zeppelin.search.LuceneSearchTest.newNote : specialinvoke $r3.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r7, $r6, $r5, null, $r4, null, null) >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : virtualinvoke $r3.<org.apache.zeppelin.notebook.Note: void setName(java.lang.String)>(r1)
org.apache.zeppelin.search.LuceneSearchTest.newNote : virtualinvoke $r3.<org.apache.zeppelin.notebook.Note: void setName(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.setName : r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(47)
org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(47) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $i0 >= 0
org.apache.zeppelin.notebook.Note.setName : if $i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(92)
org.apache.zeppelin.notebook.Note.setName : $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(92) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $i1 < 0
org.apache.zeppelin.notebook.Note.setName : if $i1 < 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r3
org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r3 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener>
org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $r4 == null
org.apache.zeppelin.notebook.Note.setName : if $r4 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNote : return $r3
org.apache.zeppelin.search.LuceneSearchTest.newNote : return $r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Paragraph addParagraphWithText(org.apache.zeppelin.notebook.Note,java.lang.String)>(r3, r2)
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearchTest: org.apache.zeppelin.notebook.Paragraph addParagraphWithText(org.apache.zeppelin.notebook.Note,java.lang.String)>(r3, r2) >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : $r4 = <org.apache.zeppelin.user.AuthenticationInfo: org.apache.zeppelin.user.AuthenticationInfo ANONYMOUS>
org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : $r4 = <org.apache.zeppelin.user.AuthenticationInfo: org.apache.zeppelin.user.AuthenticationInfo ANONYMOUS> >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph addNewParagraph(org.apache.zeppelin.user.AuthenticationInfo)>($r4)
org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph addNewParagraph(org.apache.zeppelin.user.AuthenticationInfo)>($r4) >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.addNewParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.addNewParagraph : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph insertNewParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>($i0, r1)
org.apache.zeppelin.notebook.Note.addNewParagraph : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph insertNewParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>($i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : r2 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph createParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>(i0, r1)
org.apache.zeppelin.notebook.Note.insertNewParagraph : r2 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph createParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>(i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : $r3 = new org.apache.zeppelin.notebook.Paragraph
org.apache.zeppelin.notebook.Note.createParagraph : $r3 = new org.apache.zeppelin.notebook.Paragraph >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterFactory factory>
org.apache.zeppelin.notebook.Note.createParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterFactory factory> >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void <init>(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.scheduler.JobListener,org.apache.zeppelin.interpreter.InterpreterFactory)>(r0, r0, $r4)
org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void <init>(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.scheduler.JobListener,org.apache.zeppelin.interpreter.InterpreterFactory)>(r0, r0, $r4) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.security.SecureRandom
org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $i1 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $i1 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : return $r6
org.apache.zeppelin.notebook.Paragraph.generateId : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r9 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r9 == null >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.Note.createParagraph : virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> = r1
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : $r2 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : $r2 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> = $r2
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void setParagraphMagic(org.apache.zeppelin.notebook.Paragraph,int)>($r3, i0)
org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void setParagraphMagic(org.apache.zeppelin.notebook.Paragraph,int)>($r3, i0) >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.setParagraphMagic : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $i1 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.setParagraphMagic : $i1 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : if $i1 <= 0
org.apache.zeppelin.notebook.Note.setParagraphMagic : if $i1 <= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : return $r3
org.apache.zeppelin.notebook.Note.createParagraph : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void insertParagraph(org.apache.zeppelin.notebook.Paragraph,int)>(r2, i0)
org.apache.zeppelin.notebook.Note.insertNewParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void insertParagraph(org.apache.zeppelin.notebook.Paragraph,int)>(r2, i0) >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.insertParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : entermonitor $r4
org.apache.zeppelin.notebook.Note.insertParagraph : entermonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.insertParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r1)
org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : exitmonitor $r4
org.apache.zeppelin.notebook.Note.insertParagraph : exitmonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : goto [?= $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>]
org.apache.zeppelin.notebook.Note.insertParagraph : goto [?= $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>] >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.insertParagraph : $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : if $r6 == null
org.apache.zeppelin.notebook.Note.insertParagraph : if $r6 == null >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : return r2
org.apache.zeppelin.notebook.Note.insertNewParagraph : return r2 >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : return $r3
org.apache.zeppelin.notebook.Note.addNewParagraph : return $r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void setText(java.lang.String)>(r2)
org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void setText(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> = r1
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r4 = new java.util.Date
org.apache.zeppelin.notebook.Paragraph.setText : $r4 = new java.util.Date >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : specialinvoke $r4.<java.util.Date: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.setText : specialinvoke $r4.<java.util.Date: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Date dateUpdated> = $r4
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Date dateUpdated> = $r4 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.setText : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : if $r5 == null
org.apache.zeppelin.notebook.Paragraph.setText : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r7 = <org.apache.zeppelin.notebook.Paragraph: java.util.regex.Pattern REPL_PATTERN>
org.apache.zeppelin.notebook.Paragraph.setText : $r7 = <org.apache.zeppelin.notebook.Paragraph: java.util.regex.Pattern REPL_PATTERN> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.setText : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r2 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6)
org.apache.zeppelin.notebook.Paragraph.setText : r2 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>()
org.apache.zeppelin.notebook.Paragraph.setText : $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : if $z0 == 0
org.apache.zeppelin.notebook.Paragraph.setText : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String intpText> = ""
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String intpText> = "" >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r8 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.setText : $r8 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String scriptText> = $r8
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String scriptText> = $r8 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : return r3
org.apache.zeppelin.search.LuceneSearchTest.addParagraphWithText : return r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : return r3
org.apache.zeppelin.search.LuceneSearchTest.newNoteWithParagraph : return r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : i7 = 0
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : i7 = 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : l0 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : l0 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : r29 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : r29 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : if $z0 == 0
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : if $z0 == 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r9 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r9 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : r2 = (org.apache.zeppelin.notebook.Note) $r9
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : r2 = (org.apache.zeppelin.notebook.Note) $r9 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void addIndexDocAsync(org.apache.zeppelin.notebook.Note)>(r2)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void addIndexDocAsync(org.apache.zeppelin.notebook.Note)>(r2) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r4 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer>
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r4 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r6 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r6 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexNoteName(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String)>($r4, $r5, $r6)
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexNoteName(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String)>($r4, $r5, $r6) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : $r4 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.indexNoteName : $r4 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing Notebook {}, \'{}\'", r2, r3)
org.apache.zeppelin.search.LuceneSearch.indexNoteName : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing Notebook {}, \'{}\'", r2, r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : if null == r3
org.apache.zeppelin.search.LuceneSearch.indexNoteName : if null == r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.search.LuceneSearch.indexNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : if $z0 == 0
org.apache.zeppelin.search.LuceneSearch.indexNoteName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexNoteName : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexDoc(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r1, r2, r3, null)
org.apache.zeppelin.search.LuceneSearch.indexNoteName : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexDoc(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r1, r2, r3, null) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexDoc : r5 = staticinvoke <org.apache.zeppelin.search.LuceneSearch: java.lang.String formatId(java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r2, r4)
org.apache.zeppelin.search.LuceneSearch.indexDoc : r5 = staticinvoke <org.apache.zeppelin.search.LuceneSearch: java.lang.String formatId(java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r2, r4) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : r5 = r0
org.apache.zeppelin.search.LuceneSearch.formatId : r5 = r0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : if null == r1
org.apache.zeppelin.search.LuceneSearch.formatId : if null == r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : return r5
org.apache.zeppelin.search.LuceneSearch.formatId : return r5 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexDoc : r6 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.document.Document newDocument(java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r5, r3, r4)
org.apache.zeppelin.search.LuceneSearch.indexDoc : r6 = specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.document.Document newDocument(java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>(r5, r3, r4) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r7 = new org.apache.lucene.document.Document
org.apache.zeppelin.search.LuceneSearch.newDocument : $r7 = new org.apache.lucene.document.Document >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r7.<org.apache.lucene.document.Document: void <init>()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r7.<org.apache.lucene.document.Document: void <init>()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r8 = new org.apache.lucene.document.StringField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r8 = new org.apache.lucene.document.StringField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r9 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r9 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r8.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("id", r1, $r9)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r8.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("id", r1, $r9) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r8)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r8) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r10 = new org.apache.lucene.document.StringField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r10 = new org.apache.lucene.document.StringField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r11 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r11 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r10.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("title", r2, $r11)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r10.<org.apache.lucene.document.StringField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("title", r2, $r11) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r10)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r10) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : if null == r3
org.apache.zeppelin.search.LuceneSearch.newDocument : if null == r3 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r12 = new org.apache.lucene.document.TextField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r12 = new org.apache.lucene.document.TextField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r13 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r13 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r12.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", r2, $r13)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r12.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", r2, $r13) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r12)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r12) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : return $r7
org.apache.zeppelin.search.LuceneSearch.newDocument : return $r7 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.indexDoc : virtualinvoke r1.<org.apache.lucene.index.IndexWriter: void addDocument(java.lang.Iterable)>(r6)
org.apache.zeppelin.search.LuceneSearch.indexDoc : virtualinvoke r1.<org.apache.lucene.index.IndexWriter: void addDocument(java.lang.Iterable)>(r6) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r7 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r7 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5)
org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : return $r4
org.apache.zeppelin.notebook.Note.getParagraphs : return $r4 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : if $z0 == 0
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : if $z0 == 0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : r3 = (org.apache.zeppelin.notebook.Paragraph) $r8
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : r3 = (org.apache.zeppelin.notebook.Paragraph) $r8 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.getText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getText : return $r1
org.apache.zeppelin.notebook.Paragraph.getText : return $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : if $r9 != null
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : if $r9 != null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r10 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer>
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r10 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r11 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r11 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r12 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : $r12 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexDoc(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>($r10, $r11, $r12, r3)
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : specialinvoke r0.<org.apache.zeppelin.search.LuceneSearch: void indexDoc(org.apache.lucene.index.IndexWriter,java.lang.String,java.lang.String,org.apache.zeppelin.notebook.Paragraph)>($r10, $r11, $r12, r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(47)
org.apache.zeppelin.search.LuceneSearch.formatId : $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(47) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : $r3 = newarray (java.lang.Object)[1]
org.apache.zeppelin.search.LuceneSearch.formatId : $r3 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.search.LuceneSearch.formatId : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : $r3[0] = $r4
org.apache.zeppelin.search.LuceneSearch.formatId : $r3[0] = $r4 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.formatId : r5 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[])>(r0, "paragraph", $r3)
org.apache.zeppelin.search.LuceneSearch.formatId : r5 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[])>(r0, "paragraph", $r3) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r14 = new org.apache.lucene.document.TextField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r14 = new org.apache.lucene.document.TextField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r15 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $r15 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r16 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r16 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r14.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", $r15, $r16)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r14.<org.apache.lucene.document.TextField: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store)>("contents", $r15, $r16) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r14)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r14) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r17 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getTitle()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $r17 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getTitle()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getTitle : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title>
org.apache.zeppelin.notebook.Paragraph.getTitle : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getTitle : return $r1
org.apache.zeppelin.notebook.Paragraph.getTitle : return $r1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : if $r17 == null
org.apache.zeppelin.search.LuceneSearch.newDocument : if $r17 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r18 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.util.Date getDateStarted()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $r18 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.util.Date getDateStarted()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : if $r18 == null
org.apache.zeppelin.search.LuceneSearch.newDocument : if $r18 == null >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r24 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.util.Date getDateCreated()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $r24 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.util.Date getDateCreated()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r19 = new org.apache.lucene.document.LongField
org.apache.zeppelin.search.LuceneSearch.newDocument : $r19 = new org.apache.lucene.document.LongField >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $l0 = virtualinvoke $r24.<java.util.Date: long getTime()>()
org.apache.zeppelin.search.LuceneSearch.newDocument : $l0 = virtualinvoke $r24.<java.util.Date: long getTime()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : $r20 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO>
org.apache.zeppelin.search.LuceneSearch.newDocument : $r20 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r19.<org.apache.lucene.document.LongField: void <init>(java.lang.String,long,org.apache.lucene.document.Field$Store)>("modified", $l0, $r20)
org.apache.zeppelin.search.LuceneSearch.newDocument : specialinvoke $r19.<org.apache.lucene.document.LongField: void <init>(java.lang.String,long,org.apache.lucene.document.Field$Store)>("modified", $l0, $r20) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r19)
org.apache.zeppelin.search.LuceneSearch.newDocument : virtualinvoke $r7.<org.apache.lucene.document.Document: void add(org.apache.lucene.index.IndexableField)>($r19) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.newDocument : goto [?= return $r7]
org.apache.zeppelin.search.LuceneSearch.newDocument : goto [?= return $r7] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.search.LuceneSearch.addIndexDocAsync : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : i7 = i7 + 1
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : i7 = i7 + 1 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r4 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer>
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r4 = r0.<org.apache.zeppelin.search.LuceneSearch: org.apache.lucene.index.IndexWriter writer> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : virtualinvoke $r4.<org.apache.lucene.index.IndexWriter: void commit()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : virtualinvoke $r4.<org.apache.lucene.index.IndexWriter: void commit()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= l8 = staticinvoke <java.lang.System: long nanoTime()>()]
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= l8 = staticinvoke <java.lang.System: long nanoTime()>()] >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : l8 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : l8 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r5 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG>
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r5 = <org.apache.zeppelin.search.LuceneSearch: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $l1 = l8 - l0
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $l1 = l8 - l0 >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $l2 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>($l1)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $l2 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>($l1) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing {} notebooks took {}ms", $r6, $r8)
org.apache.zeppelin.search.LuceneSearch.addIndexDocs : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Indexing {} notebooks took {}ms", $r6, $r8) >>>>>>>> org.apache.zeppelin.search.LuceneSearch.addIndexDocs : goto [?= return]
