org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r7 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Launching Interpreter: ")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Launching Interpreter: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> = $r12
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> = $r12 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : i0 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : i0 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r16 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r16 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r17 = virtualinvoke $r16.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r17 = virtualinvoke $r16.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r23 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r23 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterRemoteRunnerPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterRemoteRunnerPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r25 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getCallbackPortRange()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r25 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getCallbackPortRange()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r26 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r26 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r28 = virtualinvoke $r27.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterDir()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r28 = virtualinvoke $r27.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterDir()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r6 = new java.util.HashMap
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r6 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r6.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r6.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r7 = new java.util.Properties
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r7 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r7.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r7.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r8 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r8 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r8)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("master")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("master") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : return r2
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getSparkMaster : return r2 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r9 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r10 = virtualinvoke $r9.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r10 = virtualinvoke $r9.<java.util.Properties: java.util.Set stringPropertyNames()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r55 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r55 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r45 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r45 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r56 = (java.lang.String) $r45
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r56 = (java.lang.String) $r45 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z5 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z5 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>(r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z5 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r46 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r46 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r47 = virtualinvoke $r46.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r47 = virtualinvoke $r46.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z6 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isSparkConf(java.lang.String,java.lang.String)>(r56, $r47)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z6 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isSparkConf(java.lang.String,java.lang.String)>(r56, $r47) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : if $z0 != 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("spark.")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("spark.") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r2)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : if $z2 != 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z3 = 1
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z3 = 1 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : goto [?= return $z3]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : goto [?= return $z3] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : return $z3
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : return $z3 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z6 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r48 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r48 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r49 = virtualinvoke $r48.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r49 = virtualinvoke $r48.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r50 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String toShellFormat(java.lang.String)>($r49)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r50 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String toShellFormat(java.lang.String)>($r49) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : return $r6
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.toShellFormat : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r56, $r50)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r56, $r50) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r52 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r52 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r53 = virtualinvoke $r52.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r53 = virtualinvoke $r52.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r56) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r56, $r53)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r56, $r53) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z3 = 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isSparkConf : $z3 = 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForPySpark(java.util.Properties)>($r7)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForPySpark(java.util.Properties)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForPySpark : $z0 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForPySpark : $z0 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : $r1 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : $r1 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : $r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : $r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("yarn")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("yarn") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : return $z0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.isYarnMode : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForPySpark : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForPySpark : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForPySpark : virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.yarn.isPython", "true")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForPySpark : virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.yarn.isPython", "true") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForSparkR(java.util.Properties)>($r7)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: void setupPropertiesForSparkR(java.util.Properties)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>("SPARK_HOME")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>("SPARK_HOME") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : $r2 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : $r2 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : if r3 != null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : if r3 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : return r3
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : return r3 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if r2 != null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r3 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r3 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r4 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r6 = <java.io.File: java.lang.String separator>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r6 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r2, $r9)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r2, $r9) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r29 = $r3
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : r29 = $r3 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r10 = new java.io.File
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r10 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r29, "sparkr.zip")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r29, "sparkr.zip") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r11 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : $r11 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>("sparkr.zip is not found, SparkR may not work.")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.setupPropertiesForSparkR : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>("sparkr.zip is not found, SparkR may not work.") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r43 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r43 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r3 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $r3 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : r1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r3)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : r1 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getSparkMaster(java.util.Properties)>($r3) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-client")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-client") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yarn-cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : return "cluster"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getDeployMode : return "cluster" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>("cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>("cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z4 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_YARN_CLUSTER", "true")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_YARN_CLUSTER", "true") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r57 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r57 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r3 == null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r38 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r38 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r38.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --master ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --master ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z2 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: boolean isYarnMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z2 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r29 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r29 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getDeployMode()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z3 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("cluster")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z3 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("cluster") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z3 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r30 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r30 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --files ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --files ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r32 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r32 = r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r33 = virtualinvoke $r32.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r33 = virtualinvoke $r32.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/log4j_yarn_cluster.properties")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/log4j_yarn_cluster.properties") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r7.<java.util.Properties: java.util.Set stringPropertyNames()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r59 = virtualinvoke $r7.<java.util.Properties: java.util.Set stringPropertyNames()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r60 = interfaceinvoke $r59.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r60 = interfaceinvoke $r59.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z7 == 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if $z7 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r20 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r20 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r61 = (java.lang.String) $r20
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r61 = (java.lang.String) $r20 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r21 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r21 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --conf ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --conf ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r25 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r61)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r25 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r61) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= $z7 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r11 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_CONF", $r11)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZEPPELIN_SPARK_CONF", $r11) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13 = newarray (java.lang.String)[3]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13 = newarray (java.lang.String)[3] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[0] = "SPARK_HOME"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[0] = "SPARK_HOME" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[1] = "SPARK_CONF_DIR"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[1] = "SPARK_CONF_DIR" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[2] = "HADOOP_CONF_DIR"
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r13[2] = "HADOOP_CONF_DIR" >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i0 = lengthof $r13
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i0 = lengthof $r13 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = 0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if i1 >= i0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r4 = $r13[i1]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r4 = $r13[i1] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r5 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : r5 = specialinvoke r0.<org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: java.lang.String getEnv(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r5 == null
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : if r5 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = i1 + 1
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= (branch)]
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.getEnv : r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r15 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r15 = <org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r14 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r14 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buildEnvFromProperties: ")
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buildEnvFromProperties: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18)
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : return $r6
org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher.buildEnvFromProperties : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,java.lang.String)>($r36, $r25, $r32, r5, $r33, i0, r4)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,java.lang.String)>($r36, $r25, $r32, r5, $r33, i0, r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return $r22
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return $r22 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterGroupName>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterGroupName> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterGroupName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterDir : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterDir>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterDir : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterDir> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.getInterpreterDir : return $r1
