org.apache.zeppelin.notebook.FolderViewTest.createNote : $r2 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r9 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.repo.NotebookRepo repo>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r9 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.repo.NotebookRepo repo> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r8 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r8 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.search.SearchService index>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.search.SearchService index> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r4 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.user.Credentials credentials>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r4 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.user.Credentials credentials> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r3 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r3 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : specialinvoke $r2.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r9, $r8, $r7, $r6, $r5, $r4, $r3)
org.apache.zeppelin.notebook.FolderViewTest.createNote : specialinvoke $r2.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r9, $r8, $r7, $r6, $r5, $r4, $r3) >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.security.SecureRandom >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r5 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r6 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r9 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i0 = lengthof $r9 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r23 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r3 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = virtualinvoke r4.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c3 = $r14[$i2] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r23) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i5 = i5 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r22 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(i5)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r17 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i4 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r18 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r10 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.FolderView folderView>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r10 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.FolderView folderView> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : virtualinvoke $r2.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r10)
org.apache.zeppelin.notebook.FolderViewTest.createNote : virtualinvoke $r2.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r10) >>>>>>>> org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1
org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1 >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : return $r2
org.apache.zeppelin.notebook.FolderViewTest.createNote : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.setName : r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(47)
org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(47) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $i0 >= 0
org.apache.zeppelin.notebook.Note.setName : if $i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(92)
org.apache.zeppelin.notebook.Note.setName : $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(92) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $i1 < 0
org.apache.zeppelin.notebook.Note.setName : if $i1 < 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r3
org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r3 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener>
org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $r4 == null
org.apache.zeppelin.notebook.Note.setName : if $r4 == null >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3)
org.apache.zeppelin.notebook.Note.setName : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $z0 != 0
org.apache.zeppelin.notebook.Note.setName : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $r2 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener>
org.apache.zeppelin.notebook.Note.setName : $r2 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : interfaceinvoke $r2.<org.apache.zeppelin.notebook.NoteNameListener: void onNoteNameChanged(org.apache.zeppelin.notebook.Note,java.lang.String)>(r0, r1)
org.apache.zeppelin.notebook.Note.setName : interfaceinvoke $r2.<org.apache.zeppelin.notebook.NoteNameListener: void onNoteNameChanged(org.apache.zeppelin.notebook.Note,java.lang.String)>(r0, r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r1
org.apache.zeppelin.notebook.Note.getName : return $r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Note name changed: {} -> {}", r2, $r5)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Note name changed: {} -> {}", r2, $r5) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.hashCode : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r1 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r1 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.hashCode : $r10 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i4 = interfaceinvoke $r10.<java.util.List: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i4 = interfaceinvoke $r10.<java.util.List: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= $i0 = 31 * $i4]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= $i0 = 31 * $i4] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i0 = 31 * $i4
org.apache.zeppelin.notebook.Note.hashCode : $i0 = 31 * $i4 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.hashCode : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r2 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r2 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.hashCode : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i6 = virtualinvoke $r9.<java.lang.String: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i6 = virtualinvoke $r9.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i7 = $i0 + $i6]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i7 = $i0 + $i6] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i7 = $i0 + $i6
org.apache.zeppelin.notebook.Note.hashCode : i7 = $i0 + $i6 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i1 = 31 * i7
org.apache.zeppelin.notebook.Note.hashCode : $i1 = 31 * i7 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.hashCode : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r3 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r3 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.hashCode : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i8 = interfaceinvoke $r8.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i8 = interfaceinvoke $r8.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i9 = $i1 + $i8]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i9 = $i1 + $i8] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i9 = $i1 + $i8
org.apache.zeppelin.notebook.Note.hashCode : i9 = $i1 + $i8 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i2 = 31 * i9
org.apache.zeppelin.notebook.Note.hashCode : $i2 = 31 * i9 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.hashCode : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r4 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r4 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.hashCode : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i10 = interfaceinvoke $r7.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i10 = interfaceinvoke $r7.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i11 = $i2 + $i10]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i11 = $i2 + $i10] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i11 = $i2 + $i10
org.apache.zeppelin.notebook.Note.hashCode : i11 = $i2 + $i10 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i3 = 31 * i11
org.apache.zeppelin.notebook.Note.hashCode : $i3 = 31 * i11 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.hashCode : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : if $r5 == null
org.apache.zeppelin.notebook.Note.hashCode : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.hashCode : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : $i12 = interfaceinvoke $r6.<java.util.Map: int hashCode()>()
org.apache.zeppelin.notebook.Note.hashCode : $i12 = interfaceinvoke $r6.<java.util.Map: int hashCode()>() >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : goto [?= i13 = $i3 + $i12]
org.apache.zeppelin.notebook.Note.hashCode : goto [?= i13 = $i3 + $i12] >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : i13 = $i3 + $i12
org.apache.zeppelin.notebook.Note.hashCode : i13 = $i3 + $i12 >>>>>>>> org.apache.zeppelin.notebook.Note.hashCode : return i13
org.apache.zeppelin.notebook.Note.hashCode : return i13 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z1 != 0
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void putNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void putNote(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.FolderView.putNote : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.putNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>()
org.apache.zeppelin.notebook.FolderView.putNote : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0)
org.apache.zeppelin.notebook.Note.getFolderId : $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : if $c1 != 47
org.apache.zeppelin.notebook.Note.getFolderId : if $c1 != 47 >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Note.getFolderId : i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : if i0 >= 0
org.apache.zeppelin.notebook.Note.getFolderId : if i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : return "/"
org.apache.zeppelin.notebook.Note.getFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>(r2)
org.apache.zeppelin.notebook.FolderView.putNote : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder createFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder createFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : r11 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r10)
org.apache.zeppelin.notebook.FolderView.createFolder : r11 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r10) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z0 == 0
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z1 == 0
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : return "/"
org.apache.zeppelin.notebook.Folder.normalizeFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r3 = new org.apache.zeppelin.notebook.Folder
org.apache.zeppelin.notebook.FolderView.createFolder : $r3 = new org.apache.zeppelin.notebook.Folder >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : specialinvoke $r3.<org.apache.zeppelin.notebook.Folder: void <init>(java.lang.String)>(r11)
org.apache.zeppelin.notebook.FolderView.createFolder : specialinvoke $r3.<org.apache.zeppelin.notebook.Folder: void <init>(java.lang.String)>(r11) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: void addFolderListener(org.apache.zeppelin.notebook.FolderListener)>(r0)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: void addFolderListener(org.apache.zeppelin.notebook.FolderListener)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Folder.addFolderListener : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners>
org.apache.zeppelin.notebook.Folder.addFolderListener : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners> >>>>>>>> org.apache.zeppelin.notebook.Folder.addFolderListener : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Folder.addFolderListener : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.createFolder : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Create folder {}", r11)
org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Create folder {}", r11) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.createFolder : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : entermonitor $r5
org.apache.zeppelin.notebook.FolderView.createFolder : entermonitor $r5 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.createFolder : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r3)
org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : exitmonitor $r5
org.apache.zeppelin.notebook.FolderView.createFolder : exitmonitor $r5 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : goto [?= $r8 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()]
org.apache.zeppelin.notebook.FolderView.createFolder : goto [?= $r8 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()] >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r8 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()
org.apache.zeppelin.notebook.FolderView.createFolder : $r8 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id>
org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Folder.getId : return $r1
org.apache.zeppelin.notebook.Folder.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.isRoot : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : return $z0
org.apache.zeppelin.notebook.Folder.isRoot : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : if $z0 == 0
org.apache.zeppelin.notebook.Folder.getParentFolderId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : return "/"
org.apache.zeppelin.notebook.Folder.getParentFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : r13 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>($r8)
org.apache.zeppelin.notebook.FolderView.createFolder : r13 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r4 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r4 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r6 = (org.apache.zeppelin.notebook.Folder) $r5
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r6 = (org.apache.zeppelin.notebook.Folder) $r5 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r6
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: void setParent(org.apache.zeppelin.notebook.Folder)>(r13)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke $r3.<org.apache.zeppelin.notebook.Folder: void setParent(org.apache.zeppelin.notebook.Folder)>(r13) >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.setParent : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.setParent : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.setParent : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Set parent of {} to {}", $r3, $r4)
org.apache.zeppelin.notebook.Folder.setParent : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Set parent of {} to {}", $r3, $r4) >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent> = r1
org.apache.zeppelin.notebook.Folder.setParent : r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent> = r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r13.<org.apache.zeppelin.notebook.Folder: void addChild(org.apache.zeppelin.notebook.Folder)>($r3)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r13.<org.apache.zeppelin.notebook.Folder: void addChild(org.apache.zeppelin.notebook.Folder)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : if r1 != r0
org.apache.zeppelin.notebook.Folder.addChild : if r1 != r0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : return $r3
org.apache.zeppelin.notebook.FolderView.createFolder : return $r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r3
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void addNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.putNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void addNote(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r4 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.addNote : $r4 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Add note {} to folder {}", $r5, $r6)
org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Add note {} to folder {}", $r5, $r6) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : entermonitor $r7
org.apache.zeppelin.notebook.Folder.addNote : entermonitor $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1)
org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : exitmonitor $r7
org.apache.zeppelin.notebook.Folder.addNote : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : goto [?= return]
org.apache.zeppelin.notebook.Folder.addNote : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.putNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : entermonitor $r6
org.apache.zeppelin.notebook.FolderView.putNote : entermonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.putNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.apache.zeppelin.notebook.FolderView.putNote : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : exitmonitor $r6
org.apache.zeppelin.notebook.FolderView.putNote : exitmonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : goto [?= return]
org.apache.zeppelin.notebook.FolderView.putNote : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : goto [?= return]
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String normalizeNoteName(java.lang.String)>(r3)
org.apache.zeppelin.notebook.Note.setName : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String normalizeNoteName(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.normalizeNoteName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/")
org.apache.zeppelin.notebook.Note.normalizeNoteName : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/") >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("///")
org.apache.zeppelin.notebook.Note.normalizeNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("///") >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : if $z0 == 0
org.apache.zeppelin.notebook.Note.normalizeNoteName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/")
org.apache.zeppelin.notebook.Note.normalizeNoteName : r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/") >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : $i0 = virtualinvoke r4.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Note.normalizeNoteName : $i0 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : if $i0 != 0
org.apache.zeppelin.notebook.Note.normalizeNoteName : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : return r4
org.apache.zeppelin.notebook.Note.normalizeNoteName : return r4 >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(1)
org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(1) >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : r1 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.zeppelin.notebook.Note.getFolderId : r1 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : return r1
org.apache.zeppelin.notebook.Note.getFolderId : return r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c0 != 47
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c0 != 47 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i1 = virtualinvoke r3.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i1 = virtualinvoke r3.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i2 = $i1 - 1
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i2 = $i1 - 1 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i2)
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i2) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c3 != 47
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c3 != 47 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : return r3
org.apache.zeppelin.notebook.Folder.normalizeFolderId : return r3 >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Folder.getParentFolderId : i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : if i0 >= 0
org.apache.zeppelin.notebook.Folder.getParentFolderId : if i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.addChild : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children> >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : $r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addChild : $r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1)
org.apache.zeppelin.notebook.Folder.addChild : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.zeppelin.notebook.Folder.getParentFolderId : $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : return $r3
org.apache.zeppelin.notebook.Folder.getParentFolderId : return $r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : r2 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.getFolder : r2 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getFolder : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.notebook.FolderView.getFolder : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : $r5 = (org.apache.zeppelin.notebook.Folder) $r4
org.apache.zeppelin.notebook.FolderView.getFolder : $r5 = (org.apache.zeppelin.notebook.Folder) $r4 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : return $r5
org.apache.zeppelin.notebook.FolderView.getFolder : return $r5 >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r1 = new java.util.LinkedList
org.apache.zeppelin.notebook.Folder.getNotes : $r1 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.getNotes : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Folder.getNotes : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>($r3)
org.apache.zeppelin.notebook.Folder.getNotes : specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : return $r1
org.apache.zeppelin.notebook.Folder.getNotes : return $r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : r3 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.renameFolder : r3 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : r4 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r2)
org.apache.zeppelin.notebook.FolderView.renameFolder : r4 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: boolean hasFolder(java.lang.String)>(r3)
org.apache.zeppelin.notebook.FolderView.renameFolder : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: boolean hasFolder(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.hasFolder : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : if $r2 == null
org.apache.zeppelin.notebook.FolderView.hasFolder : if $r2 == null >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : $z0 = 1
org.apache.zeppelin.notebook.FolderView.hasFolder : $z0 = 1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : goto [?= return $z0]
org.apache.zeppelin.notebook.FolderView.hasFolder : goto [?= return $z0] >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : return $z0
org.apache.zeppelin.notebook.FolderView.hasFolder : return $z0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : if $z0 != 0
org.apache.zeppelin.notebook.FolderView.renameFolder : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.FolderView.renameFolder : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : if $z1 == 0
org.apache.zeppelin.notebook.FolderView.renameFolder : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4)
org.apache.zeppelin.notebook.FolderView.renameFolder : $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : if $z2 == 0
org.apache.zeppelin.notebook.FolderView.renameFolder : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : $r6 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.renameFolder : $r6 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Rename {} to {}", r3, r4)
org.apache.zeppelin.notebook.FolderView.renameFolder : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Rename {} to {}", r3, r4) >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r3)
org.apache.zeppelin.notebook.FolderView.renameFolder : r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.renameFolder : specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : $r4 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.removeFolder : $r4 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : entermonitor $r4
org.apache.zeppelin.notebook.FolderView.removeFolder : entermonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.removeFolder : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolder : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : r2 = (org.apache.zeppelin.notebook.Folder) $r6
org.apache.zeppelin.notebook.FolderView.removeFolder : r2 = (org.apache.zeppelin.notebook.Folder) $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : exitmonitor $r4
org.apache.zeppelin.notebook.FolderView.removeFolder : exitmonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : goto [?= (branch)]
org.apache.zeppelin.notebook.FolderView.removeFolder : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : if r2 == null
org.apache.zeppelin.notebook.FolderView.removeFolder : if r2 == null >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : $r7 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.removeFolder : $r7 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove folder {}", r1)
org.apache.zeppelin.notebook.FolderView.removeFolder : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove folder {}", r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : r11 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder getParent()>()
org.apache.zeppelin.notebook.FolderView.removeFolder : r11 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder getParent()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getParent : $r1 = r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent>
org.apache.zeppelin.notebook.Folder.getParent : $r1 = r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent> >>>>>>>> org.apache.zeppelin.notebook.Folder.getParent : return $r1
org.apache.zeppelin.notebook.Folder.getParent : return $r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : virtualinvoke r11.<org.apache.zeppelin.notebook.Folder: void removeChild(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolder : virtualinvoke r11.<org.apache.zeppelin.notebook.Folder: void removeChild(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.removeChild : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.removeChild : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.removeChild : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.removeChild : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.removeChild : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Remove child {} from {}", r1, $r3)
org.apache.zeppelin.notebook.Folder.removeChild : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Remove child {} from {}", r1, $r3) >>>>>>>> org.apache.zeppelin.notebook.Folder.removeChild : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.removeChild : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children> >>>>>>>> org.apache.zeppelin.notebook.Folder.removeChild : interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Folder.removeChild : interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : $r8 = virtualinvoke r11.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.FolderView.removeFolder : $r8 = virtualinvoke r11.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolder : specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeFolderIfEmpty(java.lang.String)>($r8)
org.apache.zeppelin.notebook.FolderView.removeFolder : specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeFolderIfEmpty(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: boolean hasFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: boolean hasFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : if $z0 != 0
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $i0 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: int countNotes()>()
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $i0 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: int countNotes()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.countNotes : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.countNotes : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.countNotes : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>()
org.apache.zeppelin.notebook.Folder.countNotes : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.countNotes : return $i0
org.apache.zeppelin.notebook.Folder.countNotes : return $i0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : if $i0 != 0
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : virtualinvoke r5.<org.apache.zeppelin.notebook.Folder: void rename(java.lang.String)>(r4)
org.apache.zeppelin.notebook.FolderView.renameFolder : virtualinvoke r5.<org.apache.zeppelin.notebook.Folder: void rename(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>()
org.apache.zeppelin.notebook.Folder.rename : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : if $z0 == 0
org.apache.zeppelin.notebook.Folder.rename : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.rename : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r6 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Folder.rename : $r6 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id> = $r6
org.apache.zeppelin.notebook.Folder.rename : r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id> = $r6 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r7 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.rename : $r7 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.rename : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Rename {} to {}", r2, $r8)
org.apache.zeppelin.notebook.Folder.rename : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Rename {} to {}", r2, $r8) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r9 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.rename : $r9 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : entermonitor $r9
org.apache.zeppelin.notebook.Folder.rename : entermonitor $r9 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r10 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.rename : $r10 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Folder.rename : $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r29 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.rename : r29 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Folder.rename : $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : if $z1 == 0
org.apache.zeppelin.notebook.Folder.rename : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : exitmonitor $r9
org.apache.zeppelin.notebook.Folder.rename : exitmonitor $r9 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : goto [?= $r12 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>]
org.apache.zeppelin.notebook.Folder.rename : goto [?= $r12 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>] >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r12 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.rename : $r12 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children> >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Folder.rename : $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r31 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.rename : r31 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $z2 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Folder.rename : $z2 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : if $z2 == 0
org.apache.zeppelin.notebook.Folder.rename : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r14 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Folder.rename : $r14 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r32 = (org.apache.zeppelin.notebook.Folder) $r14
org.apache.zeppelin.notebook.Folder.rename : r32 = (org.apache.zeppelin.notebook.Folder) $r14 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Folder.rename : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Folder.rename : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r16 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.rename : $r16 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.apache.zeppelin.notebook.Folder.rename : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.notebook.Folder.rename : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r19 = virtualinvoke r32.<org.apache.zeppelin.notebook.Folder: java.lang.String getName()>()
org.apache.zeppelin.notebook.Folder.rename : $r19 = virtualinvoke r32.<org.apache.zeppelin.notebook.Folder: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>()
org.apache.zeppelin.notebook.Folder.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getName : if $z0 == 0
org.apache.zeppelin.notebook.Folder.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getName : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.getName : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getName : i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Folder.getName : i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.getName : if i0 >= 0
org.apache.zeppelin.notebook.Folder.getName : if i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getName : $i1 = i0 + 1
org.apache.zeppelin.notebook.Folder.getName : $i1 = i0 + 1 >>>>>>>> org.apache.zeppelin.notebook.Folder.getName : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1)
org.apache.zeppelin.notebook.Folder.getName : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.Folder.getName : return $r2
org.apache.zeppelin.notebook.Folder.getName : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
org.apache.zeppelin.notebook.Folder.rename : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Folder.rename : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r32.<org.apache.zeppelin.notebook.Folder: void rename(java.lang.String)>($r21)
org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r32.<org.apache.zeppelin.notebook.Folder: void rename(java.lang.String)>($r21) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r22 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Folder.rename : $r22 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r3 = (org.apache.zeppelin.notebook.Note) $r22
org.apache.zeppelin.notebook.Folder.rename : r3 = (org.apache.zeppelin.notebook.Note) $r22 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r4 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.lang.String getNameWithoutPath()>()
org.apache.zeppelin.notebook.Folder.rename : r4 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.lang.String getNameWithoutPath()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getNameWithoutPath : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getNameWithoutPath : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getNameWithoutPath : i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Note.getNameWithoutPath : i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Note.getNameWithoutPath : if i0 >= 0
org.apache.zeppelin.notebook.Note.getNameWithoutPath : if i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getNameWithoutPath : $i1 = i0 + 1
org.apache.zeppelin.notebook.Note.getNameWithoutPath : $i1 = i0 + 1 >>>>>>>> org.apache.zeppelin.notebook.Note.getNameWithoutPath : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1)
org.apache.zeppelin.notebook.Note.getNameWithoutPath : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.Note.getNameWithoutPath : return $r2
org.apache.zeppelin.notebook.Note.getNameWithoutPath : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.rename : $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : if $z3 == 0
org.apache.zeppelin.notebook.Folder.rename : if $z3 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r23 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Folder.rename : $r23 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Folder.rename : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Folder.rename : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.notebook.Folder.rename : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.notebook.Folder.rename : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Folder.rename : r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r3.<org.apache.zeppelin.notebook.Note: void setName(java.lang.String)>(r30)
org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r3.<org.apache.zeppelin.notebook.Note: void setName(java.lang.String)>(r30) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : r3 = (org.apache.zeppelin.notebook.Folder) $r8
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : r3 = (org.apache.zeppelin.notebook.Folder) $r8 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r10 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r10 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z2 == 0
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : goto [?= $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Folder.rename : goto [?= $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: void notifyRenamed(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: void notifyRenamed(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners>
org.apache.zeppelin.notebook.Folder.notifyRenamed : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners> >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.notifyRenamed : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Folder.notifyRenamed : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : if $z0 == 0
org.apache.zeppelin.notebook.Folder.notifyRenamed : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Folder.notifyRenamed : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : r3 = (org.apache.zeppelin.notebook.FolderListener) $r5
org.apache.zeppelin.notebook.Folder.notifyRenamed : r3 = (org.apache.zeppelin.notebook.FolderListener) $r5 >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : interfaceinvoke r3.<org.apache.zeppelin.notebook.FolderListener: void onFolderRenamed(org.apache.zeppelin.notebook.Folder,java.lang.String)>(r0, r1)
org.apache.zeppelin.notebook.Folder.notifyRenamed : interfaceinvoke r3.<org.apache.zeppelin.notebook.FolderListener: void onFolderRenamed(org.apache.zeppelin.notebook.Folder,java.lang.String)>(r0, r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r6 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r6 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>($r6)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : if $r7 != r1
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : if $r7 != r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r8 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r8 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("folder renamed: {} -> {}", r2, $r9)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("folder renamed: {} -> {}", r2, $r9) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r10 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r2)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r10 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : if $r10 != r1
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : if $r10 != r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r16 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r16 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r11 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r11 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>($r11)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void merge(org.apache.zeppelin.notebook.Folder)>(r1)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void merge(org.apache.zeppelin.notebook.Folder)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.merge : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.merge : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.merge : $r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.merge : $r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.merge : $r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.merge : $r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.merge : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Merge {} into {}", $r3, $r4)
org.apache.zeppelin.notebook.Folder.merge : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Merge {} into {}", $r3, $r4) >>>>>>>> org.apache.zeppelin.notebook.Folder.merge : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.util.List getNotes()>()
org.apache.zeppelin.notebook.Folder.merge : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.util.List getNotes()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.merge : virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: void addNotes(java.util.List)>($r5)
org.apache.zeppelin.notebook.Folder.merge : virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: void addNotes(java.util.List)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : $r6 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNotes : $r6 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : entermonitor $r6
org.apache.zeppelin.notebook.Folder.addNotes : entermonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.addNotes : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Folder.addNotes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : if $z0 == 0
org.apache.zeppelin.notebook.Folder.addNotes : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Folder.addNotes : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : r4 = (org.apache.zeppelin.notebook.Note) $r7
org.apache.zeppelin.notebook.Folder.addNotes : r4 = (org.apache.zeppelin.notebook.Note) $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNotes : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : $r9 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNotes : $r9 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r4)
org.apache.zeppelin.notebook.Folder.addNotes : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r4) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Folder.addNotes : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : exitmonitor $r6
org.apache.zeppelin.notebook.Folder.addNotes : exitmonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNotes : goto [?= return]
org.apache.zeppelin.notebook.Folder.addNotes : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r12 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.util.List getNotes()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r12 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.util.List getNotes()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : r4 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : r4 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : r5 = (org.apache.zeppelin.notebook.Note) $r13
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : r5 = (org.apache.zeppelin.notebook.Note) $r13 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r14 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r14 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onFolderRenamed : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Folder.notifyRenamed : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : goto [?= $z2 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Folder.rename : goto [?= $z2 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.FolderView.renameFolder : return r5
