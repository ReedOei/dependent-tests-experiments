org.apache.zeppelin.interpreter.InterpreterSetting.close : $r4 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterSetting: ")
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterSetting: ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.InterpreterSetting.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : r1 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : r1 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : r2 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r12
org.apache.zeppelin.interpreter.InterpreterSetting.close : r2 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : virtualinvoke r2.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : virtualinvoke r2.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterGroup: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close InterpreterGroup: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = (java.lang.String) $r11
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = (java.lang.String) $r11 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r3 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close Session: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close Session: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for interpreter setting: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for interpreter setting: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r13 = (java.util.Collection) $r12
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r13 = (java.util.Collection) $r12 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.util.Collection)>($r13)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void close(java.util.Collection)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if r1 != null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if r1 != null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r5
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r5 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r6)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r8 = new org.apache.zeppelin.scheduler.RemoteScheduler
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r8 = new org.apache.zeppelin.scheduler.RemoteScheduler >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r9 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r10 = class "Lorg/apache/zeppelin/interpreter/remote/RemoteInterpreter;"
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r10 = class "Lorg/apache/zeppelin/interpreter/remote/RemoteInterpreter;" >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r17 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r17 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r18 = virtualinvoke $r17.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService getExecutor()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r18 = virtualinvoke $r17.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService getExecutor()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r19 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r19 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r20 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r20 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r8.<org.apache.zeppelin.scheduler.RemoteScheduler: void <init>(java.lang.String,java.util.concurrent.ExecutorService,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreter,org.apache.zeppelin.scheduler.SchedulerListener,int)>($r16, $r18, $r19, r0, $r20, i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r8.<org.apache.zeppelin.scheduler.RemoteScheduler: void <init>(java.lang.String,java.util.concurrent.ExecutorService,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreter,org.apache.zeppelin.scheduler.SchedulerListener,int)>($r16, $r18, $r19, r0, $r20, i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r21 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r21 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r22 = virtualinvoke $r21.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetScheduler(org.apache.zeppelin.scheduler.Scheduler)>($r8)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r22 = virtualinvoke $r21.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetScheduler(org.apache.zeppelin.scheduler.Scheduler)>($r8) >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name>
org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getName : return $r1
org.apache.zeppelin.scheduler.RemoteScheduler.getName : return $r1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z2 != 0
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z2 != 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r5 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r5 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r5.<java.lang.Object: void wait(long)>(500L)
org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r5.<java.lang.Object: void wait(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : return $r22
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : return $r22 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsRunning()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r6 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsRunning()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r6 = new java.util.LinkedList
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r6 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : specialinvoke $r6.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : specialinvoke $r6.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : entermonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : entermonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : if $z0 == 0
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : if $z0 == 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : exitmonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : goto [?= return $r6]
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : goto [?= return $r6] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : return $r6
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsRunning : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r35 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r35 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsWaiting()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r7 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.util.Collection getJobsWaiting()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r6 = new java.util.LinkedList
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r6 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : specialinvoke $r6.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : specialinvoke $r6.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : entermonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : entermonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : if $z0 == 0
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : if $z0 == 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : exitmonitor $r7
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : exitmonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : goto [?= return $r6]
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : goto [?= return $r6] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : return $r6
org.apache.zeppelin.scheduler.RemoteScheduler.getJobsWaiting : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r37 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r37 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.Interpreter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r3 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r3 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close is called when RemoterInterpreter is not opened for ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close is called when RemoterInterpreter is not opened for ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= (branch)]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if null == r4 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r8 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r9 = interfaceinvoke r4.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r8.<org.apache.zeppelin.scheduler.SchedulerFactory: void removeScheduler(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r8.<org.apache.zeppelin.scheduler.SchedulerFactory: void removeScheduler(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1
org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : entermonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.stop : entermonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : virtualinvoke $r4.<java.lang.Object: void notify()>()
org.apache.zeppelin.scheduler.RemoteScheduler.stop : virtualinvoke $r4.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : goto [?= return]
org.apache.zeppelin.scheduler.RemoteScheduler.stop : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor $r3]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor $r3] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z2 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r14 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r14 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke $r14.<java.util.Map: boolean isEmpty()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $z0 = interfaceinvoke $r14.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r15 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r15 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r15 == null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r15 == null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r17 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r17 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove this InterpreterGroup: {} as all the sessions are closed", $r16)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove this InterpreterGroup: {} as all the sessions are closed", $r16) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r19 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r19 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r18 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r18 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r19.<org.apache.zeppelin.interpreter.InterpreterSetting: void removeInterpreterGroup(java.lang.String)>($r18)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r19.<org.apache.zeppelin.interpreter.InterpreterSetting: void removeInterpreterGroup(java.lang.String)>($r18) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSetting.removeInterpreterGroup : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r20 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r20 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r20 == null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : if $r20 == null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r21 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r21 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>("Kill RemoteInterpreterProcess")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>("Kill RemoteInterpreterProcess") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r22 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : $r22 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void stop()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : virtualinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void stop()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r2 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller getRemoteInterpreterEventPoller()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r2 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller getRemoteInterpreterEventPoller()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : return $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getRemoteInterpreterEventPoller : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : virtualinvoke $r2.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: void shutdown()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : virtualinvoke $r2.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: void shutdown()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $z0 = virtualinvoke $r3.<org.apache.thrift.server.TServer: boolean isServing()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $z0 = virtualinvoke $r3.<org.apache.thrift.server.TServer: boolean isServing()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $z1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: boolean isRunning()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $z1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: boolean isRunning()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : return $z0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : if $z1 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.ExecuteWatchdog watchdog> = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.ExecuteWatchdog watchdog> = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r12 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : $r12 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Remote process terminated")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.stop : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Remote process terminated") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSetting.close : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.close : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : interfaceinvoke $r11.<java.util.Map: void clear()>()
org.apache.zeppelin.interpreter.InterpreterSetting.close : interfaceinvoke $r11.<java.util.Map: void clear()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map runtimeInfosToBeCleared> = null
org.apache.zeppelin.interpreter.InterpreterSetting.close : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map runtimeInfosToBeCleared> = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.close : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map infos> = null
org.apache.zeppelin.interpreter.InterpreterSetting.close : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map infos> = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$002(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$002 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setId : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$102(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$102(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$102 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setName : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$202(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$202(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$202 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setGroup : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List access$302(org.apache.zeppelin.interpreter.InterpreterSetting,java.util.List)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List access$302(org.apache.zeppelin.interpreter.InterpreterSetting,java.util.List)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$302 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterInfos : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption access$502(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterOption)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption access$502(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterOption)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$502 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setOption : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRunner : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRunner : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRunner : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner access$702(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterRunner)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRunner : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner access$702(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterRunner)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$702 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$702 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$702 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$702 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRunner : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setRunner : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterDir : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterDir : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterDir : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$602(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1)
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterDir : staticinvoke <org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String access$602(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String)>($r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$602 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String interpreterDir> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$602 : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String interpreterDir> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.access$602 : return r1
org.apache.zeppelin.interpreter.InterpreterSetting.access$602 : return r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterDir : return r0
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.setInterpreterDir : return r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void postProcessing()>()
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void postProcessing()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r1 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r1 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = $r1
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : if $r2 != null
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : if $r2 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r3 = new org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r3 = new org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : specialinvoke $r3.<org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r4)
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : specialinvoke $r3.<org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> = $r3
org.apache.zeppelin.interpreter.InterpreterSetting.postProcessing : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> = $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting$Builder: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : return $r2
org.apache.zeppelin.interpreter.InterpreterSetting$Builder.create : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "noteId should be not null")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "noteId should be not null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "replName should be not null")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "replName should be not null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterClassFromInterpreterSetting(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterClassFromInterpreterSetting(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "replName should be not null")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "replName should be not null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : r3 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r7
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : r3 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterInfo.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getName : return $r1
org.apache.zeppelin.interpreter.InterpreterInfo.getName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $r8 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $r8 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : if null == $r8
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : if null == $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r4)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $r9 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : $r9 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String className>
org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : return $r1
org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : return $r9
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterClassFromInterpreterSetting : return $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : if r4 != null
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : if r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getOrCreateSession(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getOrCreateSession(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.ManagedInterpreterGroup getOrCreateInterpreterGroup(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.ManagedInterpreterGroup getOrCreateInterpreterGroup(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterGroupId(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterGroupId(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $z0 = $r3.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $z0 = $r3.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $z1 = virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isProcess()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $z1 = virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : r11 = "shared_process"
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : r11 = "shared_process" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r14 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r14 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : return $r19
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroupId : return $r19 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r11 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r11 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10 = newarray (java.lang.Object)[3]
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[0] = r3
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[0] = r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[1] = r1
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[1] = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[2] = r2
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r10[2] = r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Create InterpreterGroup with groupId: {} for user: {} and note: {}", $r10)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Create InterpreterGroup with groupId: {} for user: {} and note: {}", $r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r16 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.ManagedInterpreterGroup createInterpreterGroup(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r16 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.ManagedInterpreterGroup createInterpreterGroup(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r4 = new org.apache.zeppelin.interpreter.ManagedInterpreterGroup
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r4 = new org.apache.zeppelin.interpreter.ManagedInterpreterGroup >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : specialinvoke $r4.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void <init>(java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>(r1, r0)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : specialinvoke $r4.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void <init>(java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>(r1, r0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getLifecycleManager : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.display.AngularObjectRegistryListener angularObjectRegistryListener>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.display.AngularObjectRegistryListener angularObjectRegistryListener> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: void <init>(java.lang.String,org.apache.zeppelin.display.AngularObjectRegistryListener,org.apache.zeppelin.interpreter.ManagedInterpreterGroup)>(r1, $r6, $r4)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: void <init>(java.lang.String,org.apache.zeppelin.display.AngularObjectRegistryListener,org.apache.zeppelin.interpreter.ManagedInterpreterGroup)>(r1, $r6, $r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : virtualinvoke $r4.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void setAngularObjectRegistry(org.apache.zeppelin.display.AngularObjectRegistry)>($r5)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : virtualinvoke $r4.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: void setAngularObjectRegistry(org.apache.zeppelin.display.AngularObjectRegistry)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : return $r4
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterGroup : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r16)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r17 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r8
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : r17 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : return r17
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateInterpreterGroup : return r17 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : $r5 = newarray (java.lang.Object)[2]
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : $r5 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : $r5[0] = r1
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : $r5[0] = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : $r5[1] = r2
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : $r5[1] = r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r3, "No InterpreterGroup existed for user {}, noteId {}", $r5)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r3, "No InterpreterGroup existed for user {}, noteId {}", $r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterSessionId(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterSessionId(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $z0 = virtualinvoke $r3.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $z0 = virtualinvoke $r3.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $z1 = virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteScoped()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $z1 = virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteScoped()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $z2 = virtualinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perUserScoped()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $z2 = virtualinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perUserScoped()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : if $z2 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $z3 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteScoped()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : $z3 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteScoped()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : if $z3 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : r12 = "shared_session"
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : r12 = "shared_session" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : return r12
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterSessionId : return r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : $r7 = virtualinvoke r3.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.List getOrCreateSession(java.lang.String,java.lang.String)>(r1, r4)
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : $r7 = virtualinvoke r3.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.List getOrCreateSession(java.lang.String,java.lang.String)>(r1, r4) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r6 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : if $z0 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r7 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r3 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List createInterpreters(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r3 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List createInterpreters(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r7 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r7 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r6 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r8
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : r6 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r9 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r9 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r10 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r10 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r4 = new java.util.Properties
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r4 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r4.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r4.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r2 = (java.util.Map) $r5
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r2 = (java.util.Map) $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r40 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r40 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z0 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z0 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z1 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.output.limit")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z1 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.output.limit") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z1 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r22 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r22 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_OUTPUT_LIMIT>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_OUTPUT_LIMIT> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i1 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r23)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i1 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r23) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.output.limit", $r27)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.output.limit", $r27) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z2 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.max.poolsize")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $z2 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>("zeppelin.interpreter.max.poolsize") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z2 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r16 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r16 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_MAX_POOL_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i0 = virtualinvoke $r17.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r16)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $i0 = virtualinvoke $r17.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r20)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.max.poolsize", $r20) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r41 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : r41 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.localRepo", $r13)
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.interpreter.localRepo", $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : return $r4
org.apache.zeppelin.interpreter.InterpreterSetting.getJavaProperties : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r11 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r11 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager lifecycleManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r9.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.LifecycleManager)>($r10, r2, $r11, r1, $r12)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : specialinvoke $r9.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.LifecycleManager)>($r10, r2, $r11, r1, $r12) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z1 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean isDefaultInterpreter()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $z1 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean isDefaultInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean defaultInterpreter>
org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean defaultInterpreter> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : return $z0
org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(0, $r9)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(0, $r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $r14 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $r14 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r14 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r14 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13 = newarray (java.lang.Object)[3]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r15 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r15 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[0] = $r15
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[0] = $r15 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[1] = r1
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[1] = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[2] = r2
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : $r13[2] = r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Interpreter {} created for user: {}, sessionId: {}", $r13)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Interpreter {} created for user: {}, sessionId: {}", $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r9)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : return $r7
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreters : return $r7 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : if $z1 == 0
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r5 = (org.apache.zeppelin.interpreter.Interpreter) $r15
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : r5 = (org.apache.zeppelin.interpreter.Interpreter) $r15 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : virtualinvoke r5.<org.apache.zeppelin.interpreter.Interpreter: void setInterpreterGroup(org.apache.zeppelin.interpreter.InterpreterGroup)>(r0)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : virtualinvoke r5.<org.apache.zeppelin.interpreter.Interpreter: void setInterpreterGroup(org.apache.zeppelin.interpreter.InterpreterGroup)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r10 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r10 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8 = newarray (java.lang.Object)[3]
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[0] = r2
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[0] = r2 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[1] = $r9
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[1] = $r9 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[2] = r1
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r8[2] = r1 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Create Session: {} in InterpreterGroup: {} for user: {}", $r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Create Session: {} in InterpreterGroup: {} for user: {}", $r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r11 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager getLifecycleManager()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.LifecycleManager getLifecycleManager()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r12.<org.apache.zeppelin.interpreter.LifecycleManager: void onInterpreterSessionCreated(org.apache.zeppelin.interpreter.ManagedInterpreterGroup,java.lang.String)>(r0, r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r12.<org.apache.zeppelin.interpreter.LifecycleManager: void onInterpreterSessionCreated(org.apache.zeppelin.interpreter.ManagedInterpreterGroup,java.lang.String)>(r0, r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r13 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r13 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : return r3
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : return r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : return $r7
org.apache.zeppelin.interpreter.InterpreterSetting.getOrCreateSession : return $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : r7 = (org.apache.zeppelin.interpreter.Interpreter) $r10
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : r7 = (org.apache.zeppelin.interpreter.Interpreter) $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : $r11 = virtualinvoke r7.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : $r11 = virtualinvoke r7.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r11)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : return r7
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreter : return r7 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret : $r6 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret : $r6 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret : $z0 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret : $z0 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.Interpreter$FormType getFormType()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.Interpreter$FormType getFormType()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.Interpreter$FormType formType>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.Interpreter$FormType formType> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : if $r1 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : if $r1 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void open()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void open()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isOpened> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.ManagedInterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.ManagedInterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterGroup : $r1 = specialinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterGroup : $r1 = specialinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterGroup : $r2 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterGroup : $r2 = (org.apache.zeppelin.interpreter.ManagedInterpreterGroup) $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterGroup : return $r2
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterGroup : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r8 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getUserName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r8 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getUserName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r10 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.List getOrCreateSession(java.lang.String,java.lang.String)>($r8, $r9)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r10 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.List getOrCreateSession(java.lang.String,java.lang.String)>($r8, $r9) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r16 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.util.Map sessions> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r18 = (java.util.List) $r17
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : $r18 = (java.util.List) $r17 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : return $r18
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateSession : return $r18 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : if $z1 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r17 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r17 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r17
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : r3 = (org.apache.zeppelin.interpreter.Interpreter) $r17 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r18 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreter) r3
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : $r18 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreter) r3 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : specialinvoke $r18.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void internal_create()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : specialinvoke $r18.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void internal_create()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isCreated>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean isCreated> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getOrCreateInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getOrCreateInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r4 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r4 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : if $r4 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : if $r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.ManagedInterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.ManagedInterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r5 = virtualinvoke r1.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getOrCreateInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r5 = virtualinvoke r1.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getOrCreateInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : if $r1 != null
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : if $r1 != null >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r4 = <org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Create InterpreterProcess for InterpreterGroup: ")
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Create InterpreterProcess for InterpreterGroup: ") >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8)
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r9 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.InterpreterSetting interpreterSetting> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r10 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess createInterpreterProcess()>()
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r10 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess createInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.launcher.InterpreterLauncher launcher>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.launcher.InterpreterLauncher launcher> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : if $r3 != null
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : if $r3 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: void createLauncher()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: void createLauncher()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group>
org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("spark")
org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("spark") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : $r2 = new org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher
org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : $r2 = new org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : specialinvoke $r2.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r3)
org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : specialinvoke $r2.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: void <init>(org.apache.zeppelin.conf.ZeppelinConfiguration)>($r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.launcher.InterpreterLauncher launcher> = $r2
org.apache.zeppelin.interpreter.InterpreterSetting.createLauncher : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.launcher.InterpreterLauncher launcher> = $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r4 = new org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r4 = new org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>()
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Properties getJavaProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : specialinvoke $r4.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: void <init>(java.util.Properties,org.apache.zeppelin.interpreter.InterpreterOption,org.apache.zeppelin.interpreter.InterpreterRunner,java.lang.String,java.lang.String)>($r5, $r9, $r8, $r7, $r6)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : specialinvoke $r4.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: void <init>(java.util.Properties,org.apache.zeppelin.interpreter.InterpreterOption,org.apache.zeppelin.interpreter.InterpreterRunner,java.lang.String,java.lang.String)>($r5, $r9, $r8, $r7, $r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.launcher.InterpreterLauncher launcher>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.launcher.InterpreterLauncher launcher> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r11 = virtualinvoke $r10.<org.apache.zeppelin.interpreter.launcher.InterpreterLauncher: org.apache.zeppelin.interpreter.launcher.InterpreterClient launch(org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext)>($r4)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r11 = virtualinvoke $r10.<org.apache.zeppelin.interpreter.launcher.InterpreterLauncher: org.apache.zeppelin.interpreter.launcher.InterpreterClient launch(org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r7 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r7 = <org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r6 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Launching Interpreter: ")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Launching Interpreter: ") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.util.Properties getProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> = $r12
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> = $r12 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: org.apache.zeppelin.interpreter.InterpreterRunner getRunner()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupName()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r14 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r13 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : i0 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : i0 = virtualinvoke $r14.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r16 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r16 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r17 = virtualinvoke $r16.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r17 = virtualinvoke $r16.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext: java.lang.String getInterpreterGroupId()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r22 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String getPath()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r36 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : goto [?= $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>]
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : goto [?= $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>] >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r24 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r25 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getCallbackPortRange()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r25 = virtualinvoke $r24.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getCallbackPortRange()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r26 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r26 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r27 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: org.apache.zeppelin.conf.ZeppelinConfiguration zConf> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r28 = virtualinvoke $r27.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterDir()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r28 = virtualinvoke $r27.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterDir()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : $r33 = virtualinvoke r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Map buildEnvFromProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r4 = new java.util.HashMap
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r4 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : specialinvoke $r4.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : specialinvoke $r4.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r5 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties>
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r5 = r0.<org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher: java.util.Properties properties> >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r6 = virtualinvoke $r5.<java.util.Properties: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r6 = virtualinvoke $r5.<java.util.Properties: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z0 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r7 = (java.lang.String) r3
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $r7 = (java.lang.String) r3 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z1 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : $z1 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: boolean isEnvString(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z1 == 0
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : return $r4
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.buildEnvFromProperties : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,java.lang.String)>($r36, $r25, $r32, r5, $r33, i0, r4)
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : specialinvoke $r22.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,java.lang.String)>($r36, $r25, $r32, r5, $r33, i0, r4) >>>>>>>> org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return $r22
org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher.launch : return $r22 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : r2 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess) $r11
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : r2 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess) $r11 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r12 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r12 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener remoteInterpreterProcessListener> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.helium.ApplicationEventListener appEventListener>
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.helium.ApplicationEventListener appEventListener> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : specialinvoke $r12.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener,org.apache.zeppelin.helium.ApplicationEventListener)>($r14, $r13)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : specialinvoke $r12.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener,org.apache.zeppelin.helium.ApplicationEventListener)>($r14, $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : virtualinvoke r2.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void setRemoteInterpreterEventPoller(org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller)>($r12)
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : virtualinvoke r2.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void setRemoteInterpreterEventPoller(org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.setRemoteInterpreterEventPoller : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller> = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.setRemoteInterpreterEventPoller : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller remoteInterpreterEventPoller> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : return r2
org.apache.zeppelin.interpreter.InterpreterSetting.createInterpreterProcess : return r2 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = $r10
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = $r10 >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r2 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : $r2 = r0.<org.apache.zeppelin.interpreter.ManagedInterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : return $r2
org.apache.zeppelin.interpreter.ManagedInterpreterGroup.getOrCreateInterpreterProcess : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> = $r5
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : entermonitor $r6
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : entermonitor $r6 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r7 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r7 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $z0 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: boolean isRunning()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $z0 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: boolean isRunning()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r10 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getUserName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r10 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String getUserName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : virtualinvoke $r9.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void start(java.lang.String,java.lang.Boolean)>($r10, $r11)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : virtualinvoke $r9.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void start(java.lang.String,java.lang.Boolean)>($r10, $r11) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r7 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String portRange>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r7 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String portRange> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $i1 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: int findRandomAvailablePortOnAllLocalInterfaces(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $i1 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: int findRandomAvailablePortOnAllLocalInterfaces(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int port> = $i1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int port> = $i1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r8 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r8 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $i2 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int port>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $i2 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int port> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Choose port {} for RemoteInterpreterProcess", $r9)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Choose port {} for RemoteInterpreterProcess", $r9) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r3 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: java.lang.String findAvailableHostAddress()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r3 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: java.lang.String findAvailableHostAddress()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : i0 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: int findRandomAvailablePortOnAllLocalInterfaces()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : i0 = staticinvoke <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: int findRandomAvailablePortOnAllLocalInterfaces()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r10 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Thrift server for callback will start. Port: {}", $r11)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Thrift server for callback will start. Port: {}", $r11) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r12 = new org.apache.thrift.server.TThreadPoolServer
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r12 = new org.apache.thrift.server.TThreadPoolServer >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r13 = new org.apache.thrift.server.TThreadPoolServer$Args
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r13 = new org.apache.thrift.server.TThreadPoolServer$Args >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r14 = new org.apache.thrift.transport.TServerSocket
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r14 = new org.apache.thrift.transport.TServerSocket >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r14.<org.apache.thrift.transport.TServerSocket: void <init>(int)>(i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r14.<org.apache.thrift.transport.TServerSocket: void <init>(int)>(i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r13.<org.apache.thrift.server.TThreadPoolServer$Args: void <init>(org.apache.thrift.transport.TServerTransport)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r13.<org.apache.thrift.server.TThreadPoolServer$Args: void <init>(org.apache.thrift.transport.TServerTransport)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r15 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterCallbackService$Processor
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r15 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterCallbackService$Processor >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r16 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r16 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r16.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$1: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess)>(r0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r16.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$1: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r15.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterCallbackService$Processor: void <init>(org.apache.zeppelin.interpreter.thrift.RemoteInterpreterCallbackService$Iface)>($r16)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r15.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterCallbackService$Processor: void <init>(org.apache.zeppelin.interpreter.thrift.RemoteInterpreterCallbackService$Iface)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r17 = virtualinvoke $r13.<org.apache.thrift.server.TThreadPoolServer$Args: org.apache.thrift.server.TServer$AbstractServerArgs processor(org.apache.thrift.TProcessor)>($r15)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r17 = virtualinvoke $r13.<org.apache.thrift.server.TThreadPoolServer$Args: org.apache.thrift.server.TServer$AbstractServerArgs processor(org.apache.thrift.TProcessor)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r18 = (org.apache.thrift.server.TThreadPoolServer$Args) $r17
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r18 = (org.apache.thrift.server.TThreadPoolServer$Args) $r17 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r12.<org.apache.thrift.server.TThreadPoolServer: void <init>(org.apache.thrift.server.TThreadPoolServer$Args)>($r18)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r12.<org.apache.thrift.server.TThreadPoolServer: void <init>(org.apache.thrift.server.TThreadPoolServer$Args)>($r18) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer> = $r12
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer> = $r12 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r19 = new java.lang.Thread
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r19 = new java.lang.Thread >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r20 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r20 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r20.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess)>(r0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r20.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r19.<java.lang.Thread: void <init>(java.lang.Runnable)>($r20)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r19.<java.lang.Thread: void <init>(java.lang.Runnable)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r19.<java.lang.Thread: void start()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r19.<java.lang.Thread: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r21 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r21 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r22 = new java.lang.Thread
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r22 = new java.lang.Thread >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r23 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$3
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r23 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$3 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r23.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$3: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess)>(r0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r23.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$3: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r22.<java.lang.Thread: void <init>(java.lang.Runnable)>($r23)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r22.<java.lang.Thread: void <init>(java.lang.Runnable)>($r23) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r21.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r22)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r21.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r22) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r24 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r24 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $z0 = virtualinvoke $r24.<org.apache.thrift.server.TServer: boolean isServing()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $z0 = virtualinvoke $r24.<org.apache.thrift.server.TServer: boolean isServing()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r46 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r46 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r46.<org.slf4j.Logger: void debug(java.lang.String)>("callbackServer is not serving")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r46.<org.slf4j.Logger: void debug(java.lang.String)>("callbackServer is not serving") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : staticinvoke <java.lang.Thread: void sleep(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2.run : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2: org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess this$0>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2.run : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2: org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess this$0> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2.run : $r2 = $r1.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2.run : $r2 = $r1.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2.run : virtualinvoke $r2.<org.apache.thrift.server.TServer: void serve()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$2.run : virtualinvoke $r2.<org.apache.thrift.server.TServer: void serve()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r5 = r0.<org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1: org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager this$0>
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r5 = r0.<org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1: org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager this$0> >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r6 = staticinvoke <org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager: java.util.Map access$000(org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager)>($r5)
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r6 = staticinvoke <org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager: java.util.Map access$000(org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager.access$000 : $r1 = r0.<org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager: java.util.Map interpreterGroups>
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager.access$000 : $r1 = r0.<org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager: java.util.Map interpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager.access$000 : return $r1
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager.access$000 : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : if $z0 == 0
org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager$1.run : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r24 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer>]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r24 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer>] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r25 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r25 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r25.<org.slf4j.Logger: void debug(java.lang.String)>("callbackServer is serving now")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r25.<org.slf4j.Logger: void debug(java.lang.String)>("callbackServer is serving now") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r62 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterRunner>]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r62 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterRunner>] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r62 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterRunner>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r62 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterRunner> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r63 = staticinvoke <org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine parse(java.lang.String)>($r62)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r63 = staticinvoke <org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine parse(java.lang.String)>($r62) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-d", 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-d", 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r64 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterDir>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r64 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterDir> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>($r64, 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>($r64, 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-c", 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-c", 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>(r3, 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>(r3, 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-p", 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-p", 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r65 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r65 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>($r65, 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>($r65, 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $z4 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $z4 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : if $z4 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-l", 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-l", 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r66 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String localRepoDir>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r66 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String localRepoDir> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>($r66, 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>($r66, 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-g", 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>("-g", 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r67 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterGroupName>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r67 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.lang.String interpreterGroupName> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>($r67, 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke r63.<org.apache.commons.exec.CommandLine: org.apache.commons.exec.CommandLine addArgument(java.lang.String,boolean)>($r67, 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r68 = new org.apache.commons.exec.DefaultExecutor
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r68 = new org.apache.commons.exec.DefaultExecutor >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r68.<org.apache.commons.exec.DefaultExecutor: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r68.<org.apache.commons.exec.DefaultExecutor: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> = $r68
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> = $r68 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r69 = new java.io.ByteArrayOutputStream
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r69 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r69.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r69.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r70 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r70 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r71 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r71 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r70.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream: void <init>(org.slf4j.Logger)>($r71)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r70.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream: void <init>(org.slf4j.Logger)>($r71) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r70.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream: void setOutputStream(java.io.OutputStream)>($r69)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r70.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream: void setOutputStream(java.io.OutputStream)>($r69) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream.setOutputStream : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream.setOutputStream : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream.setOutputStream : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream: java.io.OutputStream out> = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream.setOutputStream : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream: java.io.OutputStream out> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream.setOutputStream : exitmonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream.setOutputStream : exitmonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream.setOutputStream : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess$ProcessLogOutputStream.setOutputStream : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r72 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r72 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r73 = new org.apache.commons.exec.PumpStreamHandler
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r73 = new org.apache.commons.exec.PumpStreamHandler >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r73.<org.apache.commons.exec.PumpStreamHandler: void <init>(java.io.OutputStream)>($r70)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r73.<org.apache.commons.exec.PumpStreamHandler: void <init>(java.io.OutputStream)>($r70) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r72.<org.apache.commons.exec.DefaultExecutor: void setStreamHandler(org.apache.commons.exec.ExecuteStreamHandler)>($r73)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r72.<org.apache.commons.exec.DefaultExecutor: void setStreamHandler(org.apache.commons.exec.ExecuteStreamHandler)>($r73) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r74 = new org.apache.commons.exec.ExecuteWatchdog
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r74 = new org.apache.commons.exec.ExecuteWatchdog >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r74.<org.apache.commons.exec.ExecuteWatchdog: void <init>(long)>(-1L)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r74.<org.apache.commons.exec.ExecuteWatchdog: void <init>(long)>(-1L) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.ExecuteWatchdog watchdog> = $r74
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.ExecuteWatchdog watchdog> = $r74 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r75 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r75 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r76 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.ExecuteWatchdog watchdog>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r76 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.ExecuteWatchdog watchdog> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r75.<org.apache.commons.exec.DefaultExecutor: void setWatchdog(org.apache.commons.exec.ExecuteWatchdog)>($r76)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r75.<org.apache.commons.exec.DefaultExecutor: void setWatchdog(org.apache.commons.exec.ExecuteWatchdog)>($r76) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r77 = staticinvoke <org.apache.commons.exec.environment.EnvironmentUtils: java.util.Map getProcEnvironment()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : r77 = staticinvoke <org.apache.commons.exec.environment.EnvironmentUtils: java.util.Map getProcEnvironment()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r78 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.Map env>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r78 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.Map env> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke r77.<java.util.Map: void putAll(java.util.Map)>($r78)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke r77.<java.util.Map: void putAll(java.util.Map)>($r78) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r79 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r79 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r79.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Run interpreter process {}", r63)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : interfaceinvoke $r79.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Run interpreter process {}", r63) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r80 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r80 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.commons.exec.DefaultExecutor executor> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r80.<org.apache.commons.exec.DefaultExecutor: void execute(org.apache.commons.exec.CommandLine,java.util.Map,org.apache.commons.exec.ExecuteResultHandler)>(r63, r77, r0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r80.<org.apache.commons.exec.DefaultExecutor: void execute(org.apache.commons.exec.CommandLine,java.util.Map,org.apache.commons.exec.ExecuteResultHandler)>(r63, r77, r0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r36 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r36 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r36 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r36 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : entermonitor $r36
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : entermonitor $r36 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r37 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r37 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $z1 = virtualinvoke $r37.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $z1 = virtualinvoke $r37.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : if $z1 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r43 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r43 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $i3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int getConnectTimeout()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $i3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: int getConnectTimeout()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getConnectTimeout : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int connectTimeout>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getConnectTimeout : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int connectTimeout> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getConnectTimeout : return $i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getConnectTimeout : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $i4 = $i3 * 2
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $i4 = $i3 * 2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $l5 = (long) $i4
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $l5 = (long) $i4 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r43.<java.lang.Object: void wait(long)>($l5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r43.<java.lang.Object: void wait(long)>($l5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : $r2 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : $r2 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>("Interpreter process failed {}", r1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>("Interpreter process failed {}", r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.onProcessFailed : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : exitmonitor $r36
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : exitmonitor $r36 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r38 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : goto [?= $r38 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r38 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r38 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: java.util.concurrent.atomic.AtomicBoolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $z2 = virtualinvoke $r38.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $z2 = virtualinvoke $r38.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : if $z2 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r39 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r39 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: org.apache.thrift.server.TServer callbackServer> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r39.<org.apache.thrift.server.TServer: void stop()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : virtualinvoke $r39.<org.apache.thrift.server.TServer: void stop()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r40 = new java.lang.RuntimeException
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r40 = new java.lang.RuntimeException >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r41 = new java.lang.String
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r41 = new java.lang.String >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r42 = virtualinvoke $r69.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : $r42 = virtualinvoke $r69.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r41.<java.lang.String: void <init>(byte[])>($r42)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r41.<java.lang.String: void <init>(byte[])>($r42) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r40.<java.lang.RuntimeException: void <init>(java.lang.String)>($r41)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : specialinvoke $r40.<java.lang.RuntimeException: void <init>(java.lang.String)>($r41) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : throw $r40
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.start : throw $r40 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : exitmonitor $r6
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : exitmonitor $r6 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : throw $r20
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getOrCreateInterpreterProcess : throw $r20 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : exitmonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : exitmonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : throw $r8
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create : throw $r8 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : exitmonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : exitmonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : throw $r19
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open : throw $r19 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : exitmonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : exitmonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType : throw $r11
