org.apache.accumulo.master.Master.setMasterState : $r3 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $z0 = virtualinvoke $r3.<org.apache.accumulo.core.master.thrift.MasterState: boolean equals(java.lang.Object)>(r1)
org.apache.accumulo.master.Master.setMasterState : $z0 = virtualinvoke $r3.<org.apache.accumulo.core.master.thrift.MasterState: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if $z0 == 0
org.apache.accumulo.master.Master.setMasterState : if $z0 == 0 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : return
org.apache.accumulo.master.Master.setMasterState : if $z0 == 0 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r5 = <org.apache.accumulo.master.Master: boolean[][] transitionOK>
org.apache.accumulo.master.Master.setMasterState : $r5 = <org.apache.accumulo.master.Master: boolean[][] transitionOK> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r4 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state>
org.apache.accumulo.master.Master.setMasterState : $r4 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $i0 = virtualinvoke $r4.<org.apache.accumulo.core.master.thrift.MasterState: int ordinal()>()
org.apache.accumulo.master.Master.setMasterState : $i0 = virtualinvoke $r4.<org.apache.accumulo.core.master.thrift.MasterState: int ordinal()>() >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r6 = $r5[$i0]
org.apache.accumulo.master.Master.setMasterState : $r6 = $r5[$i0] >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $i1 = virtualinvoke r1.<org.apache.accumulo.core.master.thrift.MasterState: int ordinal()>()
org.apache.accumulo.master.Master.setMasterState : $i1 = virtualinvoke r1.<org.apache.accumulo.core.master.thrift.MasterState: int ordinal()>() >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $z1 = $r6[$i1]
org.apache.accumulo.master.Master.setMasterState : $z1 = $r6[$i1] >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if $z1 != 0
org.apache.accumulo.master.Master.setMasterState : if $z1 != 0 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r17 = <org.apache.accumulo.master.Master: org.slf4j.Logger log>
org.apache.accumulo.master.Master.setMasterState : if $z1 != 0 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : r2 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state>
org.apache.accumulo.master.Master.setMasterState : r2 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state> = r1
org.apache.accumulo.master.Master.setMasterState : r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state> = r1 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r8 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.master.EventCoordinator nextEvent>
org.apache.accumulo.master.Master.setMasterState : $r8 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.master.EventCoordinator nextEvent> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r7 = newarray (java.lang.Object)[2]
org.apache.accumulo.master.Master.setMasterState : $r7 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r7[0] = r2
org.apache.accumulo.master.Master.setMasterState : $r7[0] = r2 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r7[1] = r1
org.apache.accumulo.master.Master.setMasterState : $r7[1] = r1 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : virtualinvoke $r8.<org.apache.accumulo.master.EventCoordinator: void event(java.lang.String,java.lang.Object[])>("State changed from %s to %s", $r7)
org.apache.accumulo.master.Master.setMasterState : virtualinvoke $r8.<org.apache.accumulo.master.EventCoordinator: void event(java.lang.String,java.lang.Object[])>("State changed from %s to %s", $r7) >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r9 = <org.apache.accumulo.core.master.thrift.MasterState: org.apache.accumulo.core.master.thrift.MasterState STOP>
org.apache.accumulo.master.Master.setMasterState : $r9 = <org.apache.accumulo.core.master.thrift.MasterState: org.apache.accumulo.core.master.thrift.MasterState STOP> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if r1 != $r9
org.apache.accumulo.master.Master.setMasterState : if r1 != $r9 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r12 = virtualinvoke r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.conf.AccumuloConfiguration getConfiguration()>()
org.apache.accumulo.master.Master.setMasterState : if r1 != $r9 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if r2 == r1
org.apache.accumulo.master.Master.setMasterState : if r2 == r1 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r11 = <org.apache.accumulo.core.master.thrift.MasterState: org.apache.accumulo.core.master.thrift.MasterState HAVE_LOCK>
org.apache.accumulo.master.Master.setMasterState : if r2 == r1 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if r2 == r1
org.apache.accumulo.master.Master.setMasterState : if r2 == r1 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r10 = <org.apache.accumulo.core.master.thrift.MasterState: org.apache.accumulo.core.master.thrift.MasterState NORMAL>
org.apache.accumulo.master.Master.setMasterState : if r2 == r1 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : return
org.apache.accumulo.master.Master.setMasterState : $r10 = <org.apache.accumulo.core.master.thrift.MasterState: org.apache.accumulo.core.master.thrift.MasterState NORMAL> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if r1 != $r10
org.apache.accumulo.master.Master.setMasterState : if r1 != $r10 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : specialinvoke r0.<org.apache.accumulo.master.Master: void upgradeMetadata()>()
org.apache.accumulo.master.Master.setMasterState : if r1 != $r10 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : return
org.apache.accumulo.master.Master.setMasterState : specialinvoke r0.<org.apache.accumulo.master.Master: void upgradeMetadata()>() >>>>>>>> org.apache.accumulo.master.Master.setMasterState : return
org.apache.accumulo.master.Master.setMasterState : $r11 = <org.apache.accumulo.core.master.thrift.MasterState: org.apache.accumulo.core.master.thrift.MasterState HAVE_LOCK> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if r1 != $r11
org.apache.accumulo.master.Master.setMasterState : if r1 != $r11 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : specialinvoke r0.<org.apache.accumulo.master.Master: void upgradeZookeeper()>()
org.apache.accumulo.master.Master.setMasterState : if r1 != $r11 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if r2 == r1
org.apache.accumulo.master.Master.setMasterState : specialinvoke r0.<org.apache.accumulo.master.Master: void upgradeZookeeper()>() >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if r2 == r1
org.apache.accumulo.master.Master.setMasterState : $r12 = virtualinvoke r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.conf.AccumuloConfiguration getConfiguration()>() >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r13 = staticinvoke <org.apache.accumulo.server.util.time.SimpleTimer: org.apache.accumulo.server.util.time.SimpleTimer getInstance(org.apache.accumulo.core.conf.AccumuloConfiguration)>($r12)
org.apache.accumulo.master.Master.setMasterState : $r13 = staticinvoke <org.apache.accumulo.server.util.time.SimpleTimer: org.apache.accumulo.server.util.time.SimpleTimer getInstance(org.apache.accumulo.core.conf.AccumuloConfiguration)>($r12) >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r14 = new org.apache.accumulo.master.Master$1
org.apache.accumulo.master.Master.setMasterState : $r14 = new org.apache.accumulo.master.Master$1 >>>>>>>> org.apache.accumulo.master.Master.setMasterState : specialinvoke $r14.<org.apache.accumulo.master.Master$1: void <init>(org.apache.accumulo.master.Master)>(r0)
org.apache.accumulo.master.Master.setMasterState : specialinvoke $r14.<org.apache.accumulo.master.Master$1: void <init>(org.apache.accumulo.master.Master)>(r0) >>>>>>>> org.apache.accumulo.master.Master.setMasterState : virtualinvoke $r13.<org.apache.accumulo.server.util.time.SimpleTimer: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,long)>($r14, 100L, 1000L)
org.apache.accumulo.master.Master.setMasterState : virtualinvoke $r13.<org.apache.accumulo.server.util.time.SimpleTimer: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,long)>($r14, 100L, 1000L) >>>>>>>> org.apache.accumulo.master.Master.setMasterState : if r2 == r1
org.apache.accumulo.master.Master.setMasterState : $r17 = <org.apache.accumulo.master.Master: org.slf4j.Logger log> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : $r16 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state>
org.apache.accumulo.master.Master.setMasterState : $r16 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state> >>>>>>>> org.apache.accumulo.master.Master.setMasterState : interfaceinvoke $r17.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Programmer error: master should not transition from {} to {}", $r16, r1)
org.apache.accumulo.master.Master.setMasterState : interfaceinvoke $r17.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Programmer error: master should not transition from {} to {}", $r16, r1) >>>>>>>> org.apache.accumulo.master.Master.setMasterState : r2 = r0.<org.apache.accumulo.master.Master: org.apache.accumulo.core.master.thrift.MasterState state>
